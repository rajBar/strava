{"version":3,"sources":["components/StravaChart/StravaChart.jsx","store/selectors/users.js","utils/consts.js","store/selectors/activities.js","containers/StravaChart.js","components/StravaTable/StravaTable.jsx","store/actions/users.js","store/actionTypes/users.js","store/actions/activities.js","store/actionTypes/activities.js","containers/StravaTable.js","components/YearTable/YearTable.jsx","containers/YearTable.js","components/Home/Home.jsx","containers/Home.js","App.js","store/reducers/users.js","store/reducers/activities.js","store/reducers/index.js","store/sagas/activitiesSagas.js","store/sagas/usersSagas.js","store/sagas/index.js","serviceWorker.js","index.js","store/configureStore.js","store/initialState.js"],"names":["StravaChart","props","state","runSegments","cycleSegments","activity","unit","title","hAxis","vAxis","gridlines","units","hours","format","minutes","seconds","bubble","textStyle","fontSize","this","currentActivityType","activityUnit","chartData","chartDataCurrentYear","data","currentYear","options","parseOptions","className","chartType","width","height","Component","selectUserNames","users","map","user","name","selectCurrentUser","currentUser","COMPETITION_DISTANCE","DATE","Date","THIS_MONTH","getMonth","selectActivities","activities","selectCurrentActivityType","selectActivityUnit","selectUserSpecificActivity","userActivity","formattedActivities","_","find","selectUserActivity","allRuns","allCycles","isThisYear","date","currentDate","activityDate","getFullYear","selectFormattedActivitiesForCurrentYearWithPercentage","activitiesPercentage","activitiesCurrentYear","forEach","userActivities","cycles","filter","cycle","startDate","runs","run","runDistance","reduce","a","b","parseFloat","cycleDistance","newUser","toFixed","runDistanceMile","runQuantity","length","bikeDistance","bikeDistanceMile","bikeQuantity","push","selectFormattedActivitiesForCurrentYear","monthIndex","competitionRun","competitionCycle","runPercentageCapped","cyclePercentageCapped","totalPercentage","calculateTotalPercent","orderBy","selectFormattedUserSpecificActivityCurrentYear","selectFormattedUserActivityForCurrentYear","getDate","dateSplit","split","day","parseInt","month","year","parseData","rows","header","sortBy","o","distance","row","averageSpeed","averageSpeedMile","distanceMile","unitRange","newDistance","segment","ceilingFive","Math","ceil","getSegK","ceilingThree","getThreeM","speed","speedSplit","toString","minute","second","formatSpeed","dataRow","selectChartData","currentUserActivity","currentUnit","currentActivity","selectChartDataCurrentYear","connect","dispatch","StravaTable","tableHead","tableHeadSecond","sort","field","direction","headers","sorter","onClick","setSort","currentSort","newDirection","setState","setCurrentUser","selectedUser","urlArr","window","location","href","userNames","includes","replace","i","setUser","key","to","setCurrentActivityType","userRows","getSortedCurrentUserRows","getHeader","singleUnit","speedUnit","movingTime","elevationGain","style","paddingTop","currentUserCurrentActivityData","Number","allRows","setActivityUnit","singleSetUser","getRowsData","detailedRows","fetchUsersSuccess","type","payload","fetchActivitiesSuccess","activityType","actions","YearTable","isMobile","cycleDistanceMile","percentage","formattedUserSpecificActivityForCurrentYear","padding","Home","alerted","publicIp","require","v4","ipv4","url","navigator","platform","fetch","method","fetchUsers","notifyPhone","basename","process","exact","path","render","App","initialState","error","action","fetchUsersFailure","fetchActivitiesFailure","rootReducer","combineReducers","fetchActivitiesSaga","getActivities","then","res","json","getAllKm","accumulator","round","findAllSpecificActivity","athleteID","element","athlete","id","createUserObj","userRun","userTotalRan","userBike","userTotalBike","r","dist","time","moving_time","oneKM","floor","km","oneMile","floorMile","mile","start_date","substr","total_elevation_gain","call","put","fetchUsersSaga","getUsers","usersWatcher","takeEvery","usersSagas","Boolean","hostname","match","store","sagaMiddleware","createSagaMiddleware","enhancer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","createStore","Object","keys","sagaWatchers","watcher","configureStore","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2fc1f781.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nclass StravaChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            runSegments: 2.5,\r\n            cycleSegments: 5,\r\n        }\r\n    }\r\n\r\n    parseOptions(activity, unit) {\r\n        const unitType = unit === \"km\" ? \"k\" : \"m\";\r\n        const speed = activity === \"run\" ? \"min/\" + unit : unitType + \"ph\";\r\n        return {\r\n            title: \"Lifetime \" + activity + \"s\",\r\n            hAxis: {\r\n                title: \"date\"\r\n            },\r\n            vAxis: {\r\n                title: speed,\r\n                gridlines: {\r\n                    units: {\r\n                        hours: {format: ['']},\r\n                        minutes: {format: ['mm:ss']},\r\n                        seconds: {format: ['mm:ss']},\r\n                    }\r\n                }\r\n            },\r\n            bubble: { textStyle: { fontSize: 11 } }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {currentActivityType, activityUnit, chartData, chartDataCurrentYear, currentYear} = this.props;\r\n        const data = currentYear ? chartDataCurrentYear : chartData;\r\n\r\n        const options = currentActivityType ? this.parseOptions(currentActivityType, activityUnit) : [];\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Chart\r\n                    chartType=\"BubbleChart\"\r\n                    width=\"100%\"\r\n                    height=\"400px\"\r\n                    data={data}\r\n                    options={options}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StravaChart;\r\n","export const selectUserNames = state => state.users.users.map(user => user.name);\r\n\r\nexport const selectUsers = state => state.users.users;\r\n\r\nexport const selectCurrentUser = state => state.users.currentUser;","export const COMPETITION_DISTANCE = {\r\n    run: 30,\r\n    cycle: 60,\r\n};\r\n\r\nexport const DATE = new Date();\r\n\r\nconst month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\r\nexport const THIS_MONTH = month[DATE.getMonth()];","import _ from \"lodash\";\r\nimport {selectCurrentUser} from \"./users\";\r\nimport {COMPETITION_DISTANCE} from \"../../utils/consts\";\r\n\r\nexport const selectActivities = state => state.activities.activities;\r\n\r\nexport const selectCurrentActivityType = state => state.activities.currentActivityType;\r\n\r\nexport const selectActivityUnit = state => state.activities.activityUnit;\r\n\r\nexport const selectUserActivity = state => {\r\n    const formattedActivities = selectActivities(state);\r\n    const currentUser = selectCurrentUser(state);\r\n\r\n    return _.find(formattedActivities, userActivity => userActivity.name === currentUser);\r\n}\r\n\r\nexport const selectUserSpecificActivity = state => {\r\n    const userActivity = selectUserActivity(state);\r\n    const currentActivityType = selectCurrentActivityType(state);\r\n\r\n    return currentActivityType === \"run\" ? userActivity?.allRuns : userActivity?.allCycles;\r\n}\r\n\r\nconst calculateTotalPercent = (user) => {\r\n    const date = new Date();\r\n    const monthIndex = date.getMonth() + 1;\r\n    const competitionRun = COMPETITION_DISTANCE.run * monthIndex;\r\n    const competitionCycle = COMPETITION_DISTANCE.cycle * monthIndex;\r\n    const runDistance = user.runDistance;\r\n    const cycleDistance = user.bikeDistance;\r\n\r\n    const runPercentageCapped = runDistance > competitionRun ? 100 : (runDistance / competitionRun) * 100;\r\n    const runPercentage = (runDistance / competitionRun) * 100;\r\n    const cyclePercentageCapped = cycleDistance > competitionCycle ? 100 : (cycleDistance / competitionCycle) * 100;\r\n    const cyclePercentage = (cycleDistance / competitionCycle) * 100;\r\n\r\n    const totalPercentage =  (runPercentageCapped + cyclePercentageCapped) / 2 === 100 ? (runPercentage + cyclePercentage) / 2 : (runPercentageCapped + cyclePercentageCapped) / 2;\r\n\r\n    return {\r\n        ...user,\r\n        totalPercentage: totalPercentage\r\n    };\r\n};\r\n\r\nconst isThisYear = (date) => {\r\n    const currentDate = new Date();\r\n    const activityDate = new Date(date);\r\n\r\n    return currentDate.getFullYear() === activityDate.getFullYear();\r\n}\r\n\r\nexport const selectFormattedActivitiesForCurrentYear = state => {\r\n    const activities = selectActivities(state);\r\n    const mileConversion = 0.6214;\r\n    const activitiesCurrentYear = [];\r\n    activities.forEach(userActivities => {\r\n        const cycles = _.filter(userActivities.allCycles, cycle => { return isThisYear(cycle.startDate) })\r\n        const runs = _.filter(userActivities.allRuns, run => { return isThisYear(run.startDate) });\r\n        const runDistance = runs.reduce((a, b) => a + (parseFloat(b['distance']) || 0), 0);\r\n        const cycleDistance = cycles.reduce((a, b) => a + (parseFloat(b['distance']) || 0), 0);\r\n        const newUser = {\r\n            ...userActivities,\r\n            allRuns: runs,\r\n            runDistance: runDistance.toFixed(2),\r\n            runDistanceMile: (runDistance * mileConversion).toFixed(2),\r\n            runQuantity: runs.length,\r\n            allCycles: cycles,\r\n            bikeDistance: cycleDistance.toFixed(2),\r\n            bikeDistanceMile: (cycleDistance * mileConversion).toFixed(2),\r\n            bikeQuantity: cycles.length\r\n        }\r\n        activitiesCurrentYear.push(newUser);\r\n    });\r\n\r\n    return activitiesCurrentYear;\r\n}\r\n\r\n\r\nexport const selectFormattedActivitiesForCurrentYearWithPercentage = state => {\r\n    const activities = selectFormattedActivitiesForCurrentYear(state);\r\n\r\n    const activitiesPercentage = activities.map(user => {\r\n        return calculateTotalPercent(user);\r\n    })\r\n\r\n    return _.orderBy(activitiesPercentage, ['totalPercentage'], ['desc']);\r\n};\r\n\r\nexport const selectFormattedUserActivityForCurrentYear = state => {\r\n    const formattedActivities = selectFormattedActivitiesForCurrentYearWithPercentage(state);\r\n    const currentUser = selectCurrentUser(state);\r\n\r\n    return _.find(formattedActivities, userActivity => userActivity.name === currentUser);\r\n};\r\n\r\nexport const selectFormattedUserSpecificActivityCurrentYear = state => {\r\n    const userActivity = selectFormattedUserActivityForCurrentYear(state);\r\n    const currentActivityType = selectCurrentActivityType(state);\r\n\r\n    return currentActivityType === \"run\" ? userActivity?.allRuns : userActivity?.allCycles;\r\n}\r\n\r\n\r\nconst formatSpeed = (speed) => {\r\n    const speedSplit = speed.toString().split(\".\");\r\n    const minute = parseInt(speedSplit[0]);\r\n    const second = parseInt(speedSplit[1]);\r\n\r\n    return new Date(2000, 0, 1, 1, minute, second, 0);\r\n}\r\n\r\nconst getDate = (date) => {\r\n    const dateSplit = date.split(\"/\");\r\n    const day = parseInt(dateSplit[0]);\r\n    const month = parseInt(dateSplit[1]) - 1;\r\n    const year = parseInt(dateSplit[2]) + 2000;\r\n\r\n    return new Date(year, month, day);\r\n}\r\n\r\nconst getSegK = (distance, activity) => {\r\n    const newDistance = parseFloat(distance);\r\n\r\n    const segment = activity === \"run\" ? 2.5 : 5;\r\n\r\n    const ceilingFive = Math.ceil(newDistance / segment) * segment;\r\n    const floorFive = ceilingFive - segment;\r\n\r\n    return floorFive + \"k - \" + ceilingFive + \"k\";\r\n}\r\n\r\nconst getThreeM = (distance) => {\r\n    const newDistance = parseFloat(distance);\r\n\r\n    const ceilingThree = Math.ceil(newDistance / 3) * 3;\r\n    const floorThree = ceilingThree - 3;\r\n\r\n    return floorThree + \"m - \" + ceilingThree + \"m\";\r\n}\r\n\r\nconst parseData = (rows, activity, unit) => {\r\n    const data = [];\r\n    const whatSpeed = activity === \"run\" ? \"N/A\" : \"Speed (km/h)\";\r\n    const segment = activity === \"run\" ? \"2.5k\" : \"5k\";\r\n    const unitRange = unit === \"km\" ? segment : \"3m\";\r\n    const header = [\"ID\", \"Date\", whatSpeed, unitRange, \"Distance\"];\r\n    data.push(header);\r\n\r\n    const orderedRows = _.sortBy(rows, o => parseFloat(o.distance));\r\n\r\n    orderedRows.forEach((row) => {\r\n        const averageSpeed = unit === \"km\" ? row.averageSpeed : row.averageSpeedMile;\r\n        const distance = unit === \"km\" ? row.distance : row.distanceMile;\r\n        const unitRange = unit === \"km\" ? getSegK(distance, activity) : getThreeM(distance);\r\n        let speed = parseFloat(averageSpeed);\r\n        if (activity === \"run\") {\r\n            speed = formatSpeed(averageSpeed);\r\n        }\r\n        const dataRow =[averageSpeed, getDate(row.date), speed, unitRange, parseFloat(distance)];\r\n        data.push(dataRow);\r\n    });\r\n\r\n    return data;\r\n}\r\n\r\nexport const selectChartData = state => {\r\n    const currentUserActivity = selectUserSpecificActivity(state);\r\n    const currentUnit = selectActivityUnit(state);\r\n    const currentActivity = selectCurrentActivityType(state);\r\n\r\n    return parseData(currentUserActivity, currentActivity, currentUnit);\r\n}\r\n\r\nexport const selectChartDataCurrentYear = state => {\r\n    const currentUserActivity = selectFormattedUserSpecificActivityCurrentYear(state);\r\n    const currentUnit = selectActivityUnit(state);\r\n    const currentActivity = selectCurrentActivityType(state);\r\n\r\n    return parseData(currentUserActivity, currentActivity, currentUnit);\r\n}","import { connect } from 'react-redux';\r\nimport StravaChart from \"../components/StravaChart/StravaChart\";\r\nimport {\r\n    selectActivityUnit,\r\n    selectChartData,\r\n    selectChartDataCurrentYear,\r\n    selectCurrentActivityType\r\n} from \"../store/selectors/activities\";\r\n\r\nconst mapStateToProps = state => ({\r\n    currentActivityType: selectCurrentActivityType(state),\r\n    activityUnit: selectActivityUnit(state),\r\n    chartData: selectChartData(state),\r\n    chartDataCurrentYear: selectChartDataCurrentYear(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StravaChart);","import React, {Component} from 'react';\r\nimport './StravaTable-style.css';\r\nimport StravaChart from \"../../containers/StravaChart\";\r\nimport _ from 'lodash';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass StravaTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableHead: [\r\n                'Name',\r\n                'No. Runs',\r\n                'Run Distance',\r\n                'No. Cycles',\r\n                'Cycle Distance',\r\n            ],\r\n            tableHeadSecond: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n                'Elevation Gain',\r\n            ],\r\n            sort: {\r\n                field: \"date\",\r\n                direction: true\r\n            },\r\n        };\r\n    }\r\n\r\n    getHeader(headers, sorter) {\r\n        return headers.map((header) => {\r\n            if (sorter) {\r\n                return <th className=\"myTableHeaders\" onClick={() => this.setSort(header)}>{header}</th>\r\n            } else {\r\n                return <th className=\"myTableHeaders\">{header}</th>\r\n            }\r\n        })\r\n    }\r\n\r\n    setSort(field) {\r\n        const currentSort = this.state.sort;\r\n        const newDirection = field === currentSort.field ? !currentSort.direction : true;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            sort: {\r\n                field: field,\r\n                direction: newDirection\r\n            }\r\n        });\r\n    }\r\n\r\n    singleSetUser(user) {\r\n        const { currentUser, setCurrentUser } = this.props;\r\n\r\n        if (user !== currentUser) {\r\n            setCurrentUser(user);\r\n        }\r\n    }\r\n\r\n    setUser(selectedUser) {\r\n        const { currentUser, setCurrentUser } = this.props;\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name) && (name !== selectedUser)) {\r\n            window.location = window.location.href.replace(name, '');\r\n        }\r\n\r\n        const athlete = currentUser === selectedUser ? \"\" : selectedUser;\r\n\r\n        setCurrentUser(athlete);\r\n    }\r\n\r\n    getRowsData(row, i) {\r\n        const { currentUser, activityUnit } = this.props;\r\n        const name = row.name;\r\n\r\n        return (\r\n            <tr className={currentUser === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\r\n                <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/home/${name}`}>{name}</Link></td>\r\n                <td key={i} className=\"myTableContents\">{row.runQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? row.runDistance + \"km\" : row.runDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{row.bikeQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? row.bikeDistance + \"km\" : row.bikeDistanceMile + \"miles\"}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    detailedRows() {\r\n        const { currentUser, currentActivityType, setCurrentActivityType, activityUnit, userNames } = this.props;\r\n\r\n        const userRows = this.getSortedCurrentUserRows();\r\n\r\n        if (!userNames.includes(currentUser)) {\r\n            return <br />;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <button className={currentActivityType === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"run\")}>Run</button>\r\n                    <button className={currentActivityType === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"cycle\")}>Cycle</button>\r\n\r\n\r\n                    {userRows.length > 0 ?\r\n                        (<div>\r\n                            <StravaChart />\r\n\r\n                            <table className=\"myTableTwo\">\r\n                                <thead>\r\n                                    <tr>{this.getHeader(this.state.tableHeadSecond, \"sorting function\")}</tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {userRows.map(row => {\r\n                                        const singleUnit = activityUnit === \"km\" ? \"km\" : \"mile\";\r\n                                        const speedUnit = activityUnit === \"km\" ? \"k\" : \"m\";\r\n                                        return (\r\n                                            <tr>\r\n                                                <td>{row.date}</td>\r\n                                                <td>{row.activity}</td>\r\n                                                <td>{activityUnit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\r\n                                                <td>{activityUnit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {currentActivityType === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\r\n                                                <td>{row.movingTime} min</td>\r\n                                                <td>{row.elevationGain} m</td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{currentUser} is yet to {currentActivityType}</h6>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    getSortedCurrentUserRows() {\r\n        const { currentUserCurrentActivityData } = this.props\r\n        let userActivity = currentUserCurrentActivityData ? [...currentUserCurrentActivityData] : [];\r\n        const { sort } = this.state;\r\n\r\n\r\n        if (sort.field === \"Date\") {\r\n            userActivity = [...currentUserCurrentActivityData];\r\n        } else if (sort.field === \"Distance\") {\r\n            if (sort.direction) {\r\n                userActivity = _.orderBy(userActivity, function (o) { return Number(o.distance); }, 'asc');\r\n            } else {\r\n                userActivity = _.orderBy(userActivity, function (o) { return Number(o.distance); }, 'desc');\r\n            }\r\n        } else if (sort.field === \"Average Speed\") {\r\n            if (sort.direction) {\r\n                userActivity = _.orderBy(userActivity, o => { return Number(o.averageSpeed) }, 'asc');\r\n            } else {\r\n                userActivity = _.orderBy(userActivity, o => { return Number(o.averageSpeed) }, 'desc');\r\n            }\r\n        } else if (sort.field === \"Activity Time\") {\r\n            if (sort.direction) {\r\n                userActivity = _.orderBy(userActivity, 'movingTime', 'asc');\r\n            } else {\r\n                userActivity = _.orderBy(userActivity, 'movingTime', 'desc');\r\n            }\r\n        } else if (sort.field === \"Elevation Gain\") {\r\n            if (sort.direction) {\r\n                userActivity = _.orderBy(userActivity, 'elevationGain', 'asc');\r\n            } else {\r\n                userActivity = _.orderBy(userActivity, 'elevationGain', 'desc');\r\n            }\r\n        }\r\n\r\n        return userActivity;\r\n    }\r\n\r\n    render() {\r\n        const { allRows, activityUnit, setActivityUnit } = this.props;\r\n\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name)) {\r\n            this.singleSetUser(name);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <button className={activityUnit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"km\")}>Km</button>\r\n                <button className={activityUnit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"miles\")}>Miles</button>\r\n\r\n                <table className=\"myTable\">\r\n                    <thead>\r\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {allRows.map((row, i) => {\r\n                            return this.getRowsData(row, i)\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {this.detailedRows()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StravaTable;\r\n","import * as actionTypes from '../actionTypes/users';\r\n\r\nexport const fetchUsers = () => ({\r\n    type: actionTypes.FETCH_USERS,\r\n});\r\n\r\nexport const fetchUsersSuccess = users => ({\r\n    type: actionTypes.FETCH_USERS_SUCCESS,\r\n    payload: { users },\r\n});\r\n\r\nexport const fetchUsersFailure = error => ({\r\n    type: actionTypes.FETCH_USERS_FAILURE,\r\n    payload: { error },\r\n});\r\n\r\nexport const setCurrentUser = user => ({\r\n        type: actionTypes.SET_CURRENT_USER,\r\n        payload: { user },\r\n});","export const FETCH_USERS = 'FETCH_USERS';\r\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\r\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE';\r\n\r\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';","import * as actionTypes from \"../actionTypes/activities\";\r\n\r\nexport const fetchActivitiesSuccess = activities => ({\r\n    type: actionTypes.FETCH_ACTIVITIES_SUCCESS,\r\n    payload: { activities },\r\n});\r\n\r\nexport const fetchActivitiesFailure = error => ({\r\n    type: actionTypes.FETCH_ACTIVITIES_FAILURE,\r\n    payload: { error },\r\n});\r\n\r\nexport const setCurrentActivityType = activityType => ({\r\n    type: actionTypes.SET_CURRENT_ACTIVITY_TYPE,\r\n    payload: { activityType },\r\n});\r\n\r\nexport const setActivityUnit = activityUnit => ({\r\n    type: actionTypes.SET_ACTIVITY_UNIT,\r\n    payload: { activityUnit },\r\n})","export const FETCH_ACTIVITIES_SUCCESS = 'FETCH_ACTIVITIES_SUCCESS';\r\nexport const FETCH_ACTIVITIES_FAILURE = 'FETCH_ACTIVITIES_FAILURE';\r\n\r\nexport const SET_CURRENT_ACTIVITY_TYPE = 'SET_CURRENT_ACTIVITY_TYPE';\r\nexport const SET_ACTIVITY_UNIT = 'SET_ACTIVITY_UNIT';","import { connect } from 'react-redux';\r\nimport StravaTable from \"../components/StravaTable/StravaTable\";\r\nimport {selectCurrentUser, selectUserNames} from \"../store/selectors/users\";\r\nimport {\r\n    selectActivityUnit,\r\n    selectCurrentActivityType,\r\n    selectActivities,\r\n    selectUserSpecificActivity\r\n} from \"../store/selectors/activities\";\r\nimport * as actions from '../store/actions';\r\n\r\nconst mapStateToProps = state => ({\r\n    allRows: selectActivities(state),\r\n    currentUserCurrentActivityData: selectUserSpecificActivity(state),\r\n    userNames: selectUserNames(state),\r\n    currentUser: selectCurrentUser(state),\r\n    currentActivityType: selectCurrentActivityType(state),\r\n    activityUnit: selectActivityUnit(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCurrentUser: user => dispatch(actions.setCurrentUser(user)),\r\n    setCurrentActivityType: activityType => dispatch(actions.setCurrentActivityType(activityType)),\r\n    setActivityUnit: activityUnit => dispatch(actions.setActivityUnit(activityUnit)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StravaTable);","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {isMobile} from 'react-device-detect';\r\nimport './YearTable-style.css';\r\nimport StravaChart from \"../../containers/StravaChart\";\r\nimport {COMPETITION_DISTANCE, DATE, THIS_MONTH} from \"../../utils/consts\";\r\n\r\nclass YearTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableHead: [\r\n                'Name',\r\n                'No. Runs',\r\n                'Run Distance',\r\n                'No. Cycles',\r\n                'Cycle Distance',\r\n                'Total Complete',\r\n            ],\r\n            tableHeadSecond: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n                'Elevation Gain',\r\n            ],\r\n        };\r\n    }\r\n\r\n    getHeader(headers) {\r\n        return headers.map((header) => {\r\n            return <th className={isMobile ? \"myTableHeadersMobile\" : \"myTableHeaders\"}>{header}</th>\r\n        });\r\n    }\r\n\r\n    singleSetUser(user) {\r\n        const { currentUser, setCurrentUser } = this.props;\r\n\r\n        if (user !== currentUser) {\r\n            setCurrentUser(user);\r\n        }\r\n    }\r\n\r\n    setUser(selectedUser) {\r\n        const { currentUser, setCurrentUser } = this.props;\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name) && (name !== selectedUser)) {\r\n            window.location = window.location.href.replace(name, '');\r\n        }\r\n\r\n        const athlete = currentUser === selectedUser ? \"\" : selectedUser;\r\n\r\n        setCurrentUser(athlete);\r\n    }\r\n\r\n    getRowsData(row, i) {\r\n        const { currentUser, activityUnit } = this.props;\r\n        const name = row.name;\r\n        const runDistance = isMobile ? row.runDistance.toFixed(1) : row.runDistance;\r\n        const runDistanceMile = isMobile ? parseFloat(row.runDistanceMile).toFixed(1) : row.runDistanceMile;\r\n        const cycleDistance = isMobile ? row.bikeDistance.toFixed(1) : row.bikeDistance;\r\n        const cycleDistanceMile = isMobile ? parseFloat(row.bikeDistanceMile).toFixed(1) : row.bikeDistanceMile;\r\n        const percentage = row.totalPercentage;\r\n\r\n        return (\r\n            <tr className={currentUser === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\r\n                {percentage >= 100 ?\r\n                    <td key={i} className=\"myTableContents-complete\">{name} (completed)</td>\r\n                    : <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/strava-competition/${name}`}>{name}</Link></td>\r\n                }\r\n                <td key={i} className=\"myTableContents\">{row.runQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? runDistance + \"km\" : runDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{row.bikeQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? cycleDistance + \"km\" : cycleDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{percentage.toFixed(2)}%</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    detailedRows() {\r\n        const { currentUser, currentActivityType, setCurrentActivityType, activityUnit, formattedUserSpecificActivityForCurrentYear } = this.props;\r\n\r\n        if (currentUser === \"\") {\r\n            return <br />;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <button className={currentActivityType === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"run\")}>Run</button>\r\n                    <button className={currentActivityType === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"cycle\")}>Cycle</button>\r\n\r\n                    {formattedUserSpecificActivityForCurrentYear.length > 0 ?\r\n                        (<div>\r\n                            <StravaChart currentYear={true} />\r\n\r\n                            <table className=\"myTableTwo\">\r\n                                <thead>\r\n                                <tr>{this.getHeader(this.state.tableHeadSecond)}</tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {formattedUserSpecificActivityForCurrentYear.map(row => {\r\n                                    const singleUnit = activityUnit === \"km\" ? \"km\" : \"mile\";\r\n                                    const speedUnit = activityUnit === \"km\" ? \"k\" : \"m\";\r\n                                    return (\r\n                                        <tr>\r\n                                            <td>{row.date}</td>\r\n                                            <td>{row.activity}</td>\r\n                                            <td>{activityUnit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\r\n                                            <td>{activityUnit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {currentActivityType === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\r\n                                            <td>{row.movingTime} min</td>\r\n                                            <td>{row.elevationGain} m</td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{currentUser} is yet to {currentActivityType} this year</h6>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { allRows, activityUnit, setActivityUnit } = this.props;\r\n        const monthIndex = DATE.getMonth() + 1;\r\n\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name)) {\r\n            this.singleSetUser(name);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h4>Jan - {THIS_MONTH} Competition</h4>\r\n                <h6>Run {COMPETITION_DISTANCE.run * monthIndex} km  &  Cycle {COMPETITION_DISTANCE.cycle * monthIndex} km</h6>\r\n                <p style={{fontSize: \"11px\", padding: 0}}>({COMPETITION_DISTANCE.run} km & {COMPETITION_DISTANCE.cycle} km a month)</p>\r\n                <button className={activityUnit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"km\")}>Km</button>\r\n                <button className={activityUnit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"miles\")}>Miles</button>\r\n\r\n                <table className=\"myTable\">\r\n                    <thead>\r\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {allRows.map((row, i) => {\r\n                            return this.getRowsData(row, i)\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {this.detailedRows()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default YearTable;\r\n","import { connect } from 'react-redux';\r\nimport YearTable from \"../components/YearTable/YearTable\";\r\nimport {selectCurrentUser, selectUserNames} from \"../store/selectors/users\";\r\nimport {\r\n    selectActivityUnit,\r\n    selectCurrentActivityType,\r\n    selectFormattedActivitiesForCurrentYearWithPercentage,\r\n    selectFormattedUserSpecificActivityCurrentYear,\r\n} from \"../store/selectors/activities\";\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n    allRows: selectFormattedActivitiesForCurrentYearWithPercentage(state),\r\n    formattedUserSpecificActivityForCurrentYear: selectFormattedUserSpecificActivityCurrentYear(state),\r\n    userNames: selectUserNames(state),\r\n    currentUser: selectCurrentUser(state),\r\n    currentActivityType: selectCurrentActivityType(state),\r\n    activityUnit: selectActivityUnit(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCurrentUser: user => dispatch(actions.setCurrentUser(user)),\r\n    setCurrentActivityType: activityType => dispatch(actions.setCurrentActivityType(activityType)),\r\n    setActivityUnit: activityUnit => dispatch(actions.setActivityUnit(activityUnit)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(YearTable);","import React, {Component} from 'react';\r\nimport { HashRouter as Router, Link, Route, Redirect } from \"react-router-dom\";\r\nimport StravaTable from \"../../containers/StravaTable\";\r\nimport YearTable from \"../../containers/YearTable\";\r\nimport './Home-style.css';\r\nimport {DATE} from \"../../utils/consts\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            alerted: false,\r\n        };\r\n    }\r\n\r\n    async notifyPhone() {\r\n        const publicIp = require('public-ip');\r\n        const ipv4 = await publicIp.v4();\r\n\r\n        const url = 'https://raj.bariah.com:2010/location?ipAddress=' + ipv4 + \"&device=\" + navigator.platform + \"&site=Strava\";\r\n        if(!this.state.alerted) {\r\n            fetch(url, {\r\n                method: 'post'\r\n            });\r\n            this.setState({\r\n                ...this.state,\r\n                alerted: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { fetchUsers } = this.props;\r\n        fetchUsers();\r\n    }\r\n\r\n    render() {\r\n        this.notifyPhone();\r\n\r\n        return (\r\n            <div>\r\n                <Router basename={process.env.PUBLIC_URL}>\r\n                    <h2 className=\"myHeading\"><a className=\"rajbar-link\" href=\"https://raj.bar\">raj.Bar</a> <Link className=\"rajbar-link\" to={'/home'}>/</Link> <Link className=\"rajbar-link\" to={'/strava-competition'}>strava</Link></h2>\r\n                    <Route exact path={\"/\"}>\r\n                        <Redirect to={\"/home\"} />\r\n                    </Route>\r\n                    <Route path={'/home'} render={() => (\r\n                        <StravaTable />\r\n                    )}/>\r\n\r\n                    <Route path={'/strava-competition'} render={() => (\r\n                        <YearTable />\r\n                    )} />\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import { connect } from 'react-redux';\r\nimport Home from '../components/Home/Home';\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchUsers: () => dispatch(actions.fetchUsers()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, {Component} from 'react';\r\nimport './App.css'\r\nimport Home from './containers/Home';\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n        <div className=\"App\">\r\n          <Home />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as actionTypes from '../actionTypes/users';\r\n\r\nconst initialState = {\r\n    users: [],\r\n    currentUser: \"\",\r\n    error: null,\r\n};\r\n\r\nconst fetchUsersSuccess = (state, action) => ({\r\n    ...state,\r\n    users: action.payload.users,\r\n});\r\n\r\nconst fetchUsersFailure = (state, action) => ({\r\n    ...state,\r\n    error: action.payload.error,\r\n});\r\n\r\nconst setCurrentUser = (state, action) => ({\r\n    ...state,\r\n    currentUser: action.payload.user,\r\n});\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.FETCH_USERS_SUCCESS:\r\n            return fetchUsersSuccess(state, action);\r\n        case actionTypes.FETCH_USERS_FAILURE:\r\n            return fetchUsersFailure(state, action);\r\n        case actionTypes.SET_CURRENT_USER:\r\n            return setCurrentUser(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};","import * as actionTypes from '../actionTypes/activities';\r\n\r\nconst initialState = {\r\n    activities: [],\r\n    currentActivityType: 'run',\r\n    activityUnit: 'km',\r\n    error: null,\r\n};\r\n\r\nconst fetchActivitiesSuccess = (state, action) => ({\r\n    ...state,\r\n    activities: action.payload.activities,\r\n});\r\n\r\nconst fetchActivitiesFailure = (state, action) => ({\r\n    ...state,\r\n    error: action.payload.error,\r\n});\r\n\r\nconst setCurrentActivityType = (state, action) => ({\r\n    ...state,\r\n    currentActivityType: action.payload.activityType,\r\n});\r\n\r\nconst setActivityUnit = (state, action) => ({\r\n    ...state,\r\n    activityUnit: action.payload.activityUnit,\r\n})\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.FETCH_ACTIVITIES_SUCCESS:\r\n            return fetchActivitiesSuccess(state, action);\r\n        case actionTypes.FETCH_ACTIVITIES_FAILURE:\r\n            return fetchActivitiesFailure(state, action);\r\n        case actionTypes.SET_CURRENT_ACTIVITY_TYPE:\r\n            return setCurrentActivityType(state, action);\r\n        case actionTypes.SET_ACTIVITY_UNIT:\r\n            return setActivityUnit(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { combineReducers } from \"redux\";\r\nimport users from \"./users\";\r\nimport activities from \"./activities\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    users,\r\n    activities,\r\n})\r\n","import {call, put} from 'redux-saga/effects';\r\nimport * as actions from '../actions';\r\n\r\nconst getActivities = async () => {\r\n    const activitiesLink = \"https://raj.bariah.com:2010/strava/activities\";\r\n\r\n    return await fetch(activitiesLink)\r\n        .then(res => res.json());\r\n}\r\n\r\nconst getAllKm = (accumulator, a) => {\r\n    return Math.round(accumulator + a.distance);\r\n}\r\n\r\nconst findAllSpecificActivity = (activityType, athleteID, activities) => {\r\n    const activity = [...activities];\r\n\r\n    return activity.filter(function (element) {\r\n        return (element.type === activityType) && (element.athlete.id.toString() === athleteID);\r\n    });\r\n}\r\n\r\nconst createUserObj = (athleteID, name, activities) => {\r\n    const mileConversion = 0.6214;\r\n    const userRun = findAllSpecificActivity(\"Run\", athleteID, activities);\r\n    const userTotalRan = userRun.length > 0 ? (userRun.reduce(getAllKm,0) / 1000) : 0;\r\n    const userBike = findAllSpecificActivity(\"Ride\", athleteID, activities);\r\n    const userTotalBike = userBike.length > 0 ? (userBike.reduce(getAllKm,0) / 1000) : 0;\r\n    const userObj = {\r\n        name: name,\r\n        runQuantity: userRun.length,\r\n        runDistance: userTotalRan,\r\n        runDistanceMile: (userTotalRan * mileConversion).toFixed(2),\r\n        bikeQuantity: userBike.length,\r\n        bikeDistance: userTotalBike,\r\n        bikeDistanceMile: (userTotalBike * mileConversion).toFixed(2),\r\n        allRuns: userRun.map((r, i) => {\r\n            const dist = r.distance / 1000;\r\n            const time = r.moving_time / 60;\r\n            const distance = (r.distance / 1000).toFixed(2)\r\n            const distanceMile = (dist * mileConversion).toFixed(2)\r\n            const movingTime = (r.moving_time / 60).toFixed(0);\r\n            const averageSpeed = dist / (time/60);\r\n            const oneKM = (1 / averageSpeed) * 60;\r\n            const floor = Math.floor(oneKM);\r\n            const decimal = (oneKM - floor) * 0.60;\r\n            const km = (floor + decimal).toFixed(2);\r\n            const averageSpeedMiles = (dist * mileConversion) / (time/60);\r\n            const oneMile = (1 / averageSpeedMiles) * 60;\r\n            const floorMile = Math.floor(oneMile);\r\n            const decimalMile = (oneMile - floorMile) * 0.60;\r\n            const mile = (floorMile + decimalMile).toFixed(2);\r\n            const day = r.start_date.substr(8,2);\r\n            const month = r.start_date.substr(5,2);\r\n            const year = r.start_date.substr(2, 2)\r\n            const date = day + \"/\" + month + \"/\" + year;\r\n            const elevationGain = r.total_elevation_gain;\r\n            return {date: date, startDate: r.start_date, activity: \"Run\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: km, averageSpeedMile: mile, elevationGain: elevationGain};\r\n        }),\r\n        allCycles: userBike.map((r, i) => {\r\n            const distance = (r.distance / 1000).toFixed(2)\r\n            const distanceMile = (distance * mileConversion).toFixed(2)\r\n            const movingTime = (r.moving_time / 60).toFixed(0);\r\n            const averageSpeed = (distance / (movingTime/60)).toFixed(1);\r\n            const averageSpeedMile = (averageSpeed * mileConversion).toFixed(1);\r\n            const day = r.start_date.substr(8,2);\r\n            const month = r.start_date.substr(5,2);\r\n            const year = r.start_date.substr(2, 2)\r\n            const date = day + \"/\" + month + \"/\" + year;\r\n            const elevationGain = r.total_elevation_gain;\r\n            return {date: date, startDate: r.start_date, activity: \"Cycle\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: averageSpeed, averageSpeedMile: averageSpeedMile, elevationGain: elevationGain};\r\n        }),\r\n    };\r\n\r\n    return userObj;\r\n};\r\n\r\nexport function* fetchActivitiesSaga(users) {\r\n    try {\r\n        const activities = yield call(getActivities);\r\n\r\n        const formattedActivities = users.map(user => {\r\n            return createUserObj(user.athleteID, user.name, activities)\r\n        });\r\n\r\n        yield put(actions.fetchActivitiesSuccess(formattedActivities));\r\n    } catch (error) {\r\n        yield put(actions.fetchActivitiesFailure(error));\r\n    }\r\n}","import {call, put} from 'redux-saga/effects';\r\nimport * as actions from '../actions';\r\nimport {fetchActivitiesSaga} from \"./activitiesSagas\";\r\n\r\nconst getUsers = async () => {\r\n    const userLink = \"https://raj.bariah.com:2010/strava/users\";\r\n    return await fetch(userLink)\r\n        .then(res => res.json());\r\n}\r\n\r\nexport function* fetchUsersSaga() {\r\n    try {\r\n        const users = yield call(getUsers)\r\n        yield put(actions.fetchUsersSuccess(users));\r\n        yield call(fetchActivitiesSaga, users);\r\n    } catch (error) {\r\n        yield put(actions.fetchUsersFailure(error));\r\n    }\r\n}","import { takeEvery } from 'redux-saga/effects';\r\nimport * as actionTypes from '../actionTypes';\r\nimport * as usersSagas from './usersSagas';\r\n\r\nexport function* usersWatcher() {\r\n    yield takeEvery(actionTypes.FETCH_USERS, usersSagas.fetchUsersSaga);\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { configureStore } from './store/configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport { initialState } from './store/initialState';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = configureStore(initialState);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { rootReducer } from \"./reducers\";\r\nimport * as sagaWatchers from './sagas';\r\n\r\nexport function configureStore(initialState) {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n\r\n    const enhancer = compose(\r\n        applyMiddleware(sagaMiddleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__\r\n            ? window.__REDUX_DEVTOOLS_EXTENSION__({ name: 'strava-stats' })\r\n            : f => f,\r\n    )\r\n\r\n    const store = createStore(rootReducer, initialState, enhancer)\r\n\r\n    Object.keys(sagaWatchers).forEach(watcher => {\r\n        sagaMiddleware.run(sagaWatchers[watcher])\r\n    })\r\n\r\n    return store;\r\n}\r\n","export const initialState = {};\r\n"],"sourceRoot":""}