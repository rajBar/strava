{"version":3,"sources":["components/StravaChart/StravaChart.jsx","store/selectors/users.js","utils/consts.js","store/selectors/activities.js","containers/StravaChart.js","components/StravaTable/StravaTable.jsx","store/actions/users.js","store/actionTypes/users.js","store/actions/activities.js","store/actionTypes/activities.js","containers/StravaTable.js","components/YearTable/YearTable.jsx","containers/YearTable.js","components/Home/Home.jsx","containers/Home.js","App.js","store/reducers/users.js","store/reducers/activities.js","store/reducers/index.js","store/sagas/activitiesSagas.js","store/sagas/usersSagas.js","store/sagas/index.js","serviceWorker.js","index.js","store/configureStore.js","store/initialState.js"],"names":["StravaChart","props","activity","unit","title","hAxis","vAxis","gridlines","units","hours","format","minutes","seconds","bubble","textStyle","fontSize","this","currentActivityType","activityUnit","chartData","chartDataCurrentYear","data","currentYear","options","parseOptions","className","chartType","width","height","Component","selectUserNames","state","users","map","user","name","selectCurrentUser","currentUser","COMPETITION_DISTANCE","DATE","Date","THIS_MONTH","getMonth","selectActivities","activities","selectCurrentActivityType","selectActivityUnit","selectUserActivity","createSelector","formattedActivities","_","find","userActivity","selectUserSpecificActivity","allRuns","allCycles","allSwims","isThisYear","date","currentDate","activityDate","getFullYear","selectFormattedActivitiesForCurrentYear","activitiesCurrentYear","forEach","userActivities","cycles","filter","cycle","startDate","runs","run","swims","swim","runDistance","reduce","a","b","parseFloat","cycleDistance","swimDistance","newUser","toFixed","runDistanceMile","runQuantity","length","bikeDistance","bikeDistanceMile","bikeQuantity","swimDistanceMile","swimQuantity","push","selectFormattedActivitiesForCurrentYearWithPercentage","activitiesPercentage","monthIndex","competitionRun","competitionCycle","competitionSwim","runPercentageCapped","cyclePercentageCapped","swimPercentageCapped","totalPercentage","calculateTotalPercent","orderBy","selectFormattedUserActivityForCurrentYear","selectFormattedUserSpecificActivityCurrentYear","getDate","dateSplit","split","day","parseInt","month","year","parseData","rows","header","sortBy","o","distance","row","averageSpeed","averageSpeedMile","distanceMile","unitRange","newDistance","segment","ceilingFive","Math","ceil","getSegK","ceilingThree","getThreeM","speed","speedSplit","toString","minute","second","formatSpeed","dataRow","selectChartData","currentUserActivity","currentUnit","currentActivity","selectChartDataCurrentYear","connect","dispatch","StravaTable","tableHead","tableHeadSecond","tableHeadSwim","sort","field","direction","headers","sorter","onClick","setSort","currentSort","newDirection","setState","setCurrentUser","selectedUser","urlArr","window","location","href","userNames","includes","replace","i","setUser","key","to","setCurrentActivityType","userRows","getSortedCurrentUserRows","getHeader","singleUnit","speedUnit","swimSpeedUnit","movingTime","elevationGain","style","paddingTop","currentUserCurrentActivityData","Number","allRows","setActivityUnit","singleSetUser","getRowsData","detailedRows","fetchUsersSuccess","type","payload","fetchActivitiesSuccess","activityType","actions","YearTable","isMobile","cycleDistanceMile","percentage","formattedUserSpecificActivityForCurrentYear","padding","Home","alerted","publicIpv4","ipv4","platform","mobileVendor","mobileModel","navigator","url","fetch","method","catch","e","console","log","fetchUsers","notifyPhone","basename","process","exact","path","render","App","initialState","error","action","fetchUsersFailure","fetchActivitiesFailure","rootReducer","combineReducers","fetchActivitiesSaga","getActivities","then","res","json","getAllKm","accumulator","round","findAllSpecificActivity","athleteID","element","athlete","id","createUserObj","userRun","userTotalRan","userBike","userTotalBike","userSwim","userTotalSwim","r","dist","time","moving_time","oneKM","floor","decimal","km","oneMile","floorMile","decimalMile","mile","start_date","substr","total_elevation_gain","distKm","hundredMeter","averageSpeedMiles","oneYard","call","put","fetchUsersSaga","getUsers","usersWatcher","takeEvery","usersSagas","Boolean","hostname","match","store","sagaMiddleware","createSagaMiddleware","enhancer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","createStore","Object","keys","sagaWatchers","watcher","configureStore","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a9edb6b8.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nclass StravaChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    parseOptions(activity, unit) {\r\n        const unitType = unit === \"km\" ? \"k\" : \"m\";\r\n        const swimSpeedUnit = unit === \"km\" ? \"100m\" : \"100y\";\r\n        const speed = activity === \"cycle\" ?\r\n            unitType + \"ph\" :\r\n            \"min/\" + (activity === \"run\" ?\r\n                unit :\r\n                swimSpeedUnit)\r\n\r\n        return {\r\n            title: \"Lifetime \" + activity + \"s\",\r\n            hAxis: {\r\n                title: \"date\"\r\n            },\r\n            vAxis: {\r\n                title: speed,\r\n                gridlines: {\r\n                    units: {\r\n                        hours: {format: ['']},\r\n                        minutes: {format: ['mm:ss']},\r\n                        seconds: {format: ['mm:ss']},\r\n                    }\r\n                }\r\n            },\r\n            bubble: { textStyle: { fontSize: 11 } }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {currentActivityType, activityUnit, chartData, chartDataCurrentYear, currentYear} = this.props;\r\n        const data = currentYear ? chartDataCurrentYear : chartData;\r\n\r\n        const options = currentActivityType ? this.parseOptions(currentActivityType, activityUnit) : [];\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Chart\r\n                    chartType=\"BubbleChart\"\r\n                    width=\"100%\"\r\n                    height=\"400px\"\r\n                    data={data}\r\n                    options={options}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StravaChart;\r\n","export const selectUserNames = state => state.users.users.map(user => user.name);\r\n\r\nexport const selectUsers = state => state.users.users;\r\n\r\nexport const selectCurrentUser = state => state.users.currentUser;","export const COMPETITION_DISTANCE = {\r\n    run: 30,\r\n    cycle: 60,\r\n    swim: 5,\r\n};\r\n\r\nexport const DATE = new Date();\r\n\r\nconst month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\r\nexport const THIS_MONTH = month[DATE.getMonth()];","import _ from \"lodash\";\r\nimport {createSelector} from 'reselect';\r\nimport {selectCurrentUser} from \"./users\";\r\nimport {COMPETITION_DISTANCE} from \"../../utils/consts\";\r\n\r\nexport const selectActivities = state => state.activities.activities;\r\n\r\nexport const selectCurrentActivityType = state => state.activities.currentActivityType;\r\n\r\nexport const selectActivityUnit = state => state.activities.activityUnit;\r\n\r\nexport const selectUserActivity = createSelector(\r\n    selectActivities,\r\n    selectCurrentUser,\r\n    (formattedActivities, currentUser) => _.find(formattedActivities, userActivity => userActivity.name === currentUser)\r\n);\r\n\r\nexport const selectUserSpecificActivity = createSelector(\r\n    selectUserActivity,\r\n    selectCurrentActivityType,\r\n    (userActivity, currentActivityType) => {\r\n            switch(currentActivityType) {\r\n                case \"run\":\r\n                    return userActivity?.allRuns;\r\n                case \"cycle\":\r\n                    return userActivity?.allCycles;\r\n                case \"swim\":\r\n                    return userActivity?.allSwims;\r\n            }\r\n        }\r\n//    (userActivity, currentActivityType) => currentActivityType === \"run\" ? userActivity?.allRuns : userActivity?.allCycles\r\n);\r\n\r\nconst calculateTotalPercent = (user) => {\r\n    const date = new Date();\r\n    const monthIndex = date.getMonth() + 1;\r\n    const competitionRun = COMPETITION_DISTANCE.run * monthIndex;\r\n    const competitionCycle = COMPETITION_DISTANCE.cycle * monthIndex;\r\n    const competitionSwim = COMPETITION_DISTANCE.swim * monthIndex;\r\n    const runDistance = user.runDistance;\r\n    const cycleDistance = user.bikeDistance;\r\n    const swimDistance = user.swimDistance;\r\n\r\n    const runPercentageCapped = runDistance > competitionRun ? 100 : (runDistance / competitionRun) * 100;\r\n    const runPercentage = (runDistance / competitionRun) * 100;\r\n    const cyclePercentageCapped = cycleDistance > competitionCycle ? 100 : (cycleDistance / competitionCycle) * 100;\r\n    const cyclePercentage = (cycleDistance / competitionCycle) * 100;\r\n    const swimPercentageCapped = swimDistance > competitionSwim ? 100 : (swimDistance / competitionSwim) * 100;\r\n    const swimPercentage = (swimDistance / competitionSwim) * 100;\r\n\r\n    const totalPercentage =  (runPercentageCapped + cyclePercentageCapped + swimPercentageCapped) / 3 === 100 ? (runPercentage + cyclePercentage, swimPercentage) / 3 : (runPercentageCapped + cyclePercentageCapped + swimPercentageCapped) / 3;\r\n\r\n    return {\r\n        ...user,\r\n        totalPercentage: totalPercentage\r\n    };\r\n};\r\n\r\nconst isThisYear = (date) => {\r\n    const currentDate = new Date();\r\n    const activityDate = new Date(date);\r\n\r\n    return currentDate.getFullYear() === activityDate.getFullYear();\r\n}\r\n\r\nexport const selectFormattedActivitiesForCurrentYear = createSelector(\r\n    selectActivities,\r\n    activities => {\r\n        const mileConversion = 0.6214;\r\n        const activitiesCurrentYear = [];\r\n        activities.forEach(userActivities => {\r\n            const cycles = _.filter(userActivities.allCycles, cycle => { return isThisYear(cycle.startDate) })\r\n            const runs = _.filter(userActivities.allRuns, run => { return isThisYear(run.startDate) });\r\n            const swims = _.filter(userActivities.allSwims, swim => { return isThisYear(swim.startDate) });\r\n            const runDistance = runs.reduce((a, b) => a + (parseFloat(b['distance']) || 0), 0);\r\n            const cycleDistance = cycles.reduce((a, b) => a + (parseFloat(b['distance']) || 0), 0);\r\n            const swimDistance = swims.reduce((a, b) => a + (parseFloat(b['distance']) || 0), 0);\r\n            const newUser = {\r\n                ...userActivities,\r\n                allRuns: runs,\r\n                runDistance: runDistance.toFixed(2),\r\n                runDistanceMile: (runDistance * mileConversion).toFixed(2),\r\n                runQuantity: runs.length,\r\n                allCycles: cycles,\r\n                bikeDistance: cycleDistance.toFixed(2),\r\n                bikeDistanceMile: (cycleDistance * mileConversion).toFixed(2),\r\n                bikeQuantity: cycles.length,\r\n                allSwims: swims,\r\n                swimDistance: (swimDistance/1000).toFixed(2),\r\n                swimDistanceMile: ((swimDistance * mileConversion)/1000).toFixed(2),\r\n                swimQuantity: swims.length\r\n            }\r\n            activitiesCurrentYear.push(newUser);\r\n        });\r\n\r\n        return activitiesCurrentYear;\r\n    }\r\n);\r\n\r\nexport const selectFormattedActivitiesForCurrentYearWithPercentage = createSelector(\r\n    selectFormattedActivitiesForCurrentYear,\r\n    activities => {\r\n        const activitiesPercentage = activities.map(user => {\r\n            return calculateTotalPercent(user);\r\n        })\r\n\r\n        return _.orderBy(activitiesPercentage, ['totalPercentage'], ['desc']);\r\n    }\r\n);\r\n\r\nexport const selectFormattedUserActivityForCurrentYear = createSelector(\r\n    selectFormattedActivitiesForCurrentYearWithPercentage,\r\n    selectCurrentUser,\r\n    (formattedActivities, currentUser) => _.find(formattedActivities, userActivity => userActivity.name === currentUser)\r\n);\r\n\r\nexport const selectFormattedUserSpecificActivityCurrentYear = createSelector(\r\n    selectFormattedUserActivityForCurrentYear,\r\n    selectCurrentActivityType,\r\n    (userActivity, currentActivityType) => {\r\n        switch(currentActivityType) {\r\n            case \"run\":\r\n                return userActivity?.allRuns;\r\n            case \"cycle\":\r\n                return userActivity?.allCycles;\r\n            case \"swim\":\r\n                return userActivity?.allSwims;\r\n        }\r\n    }\r\n\r\n//    currentActivityType === \"run\" ? userActivity?.allRuns : userActivity?.allCycles\r\n);\r\n\r\nconst formatSpeed = (speed) => {\r\n    const speedSplit = speed.toString().split(\".\");\r\n    const minute = parseInt(speedSplit[0]);\r\n    const second = parseInt(speedSplit[1]);\r\n\r\n    return new Date(2000, 0, 1, 1, minute, second, 0);\r\n}\r\n\r\nconst getDate = (date) => {\r\n    const dateSplit = date.split(\"/\");\r\n    const day = parseInt(dateSplit[0]);\r\n    const month = parseInt(dateSplit[1]) - 1;\r\n    const year = parseInt(dateSplit[2]) + 2000;\r\n\r\n    return new Date(year, month, day);\r\n}\r\n\r\nconst getSegK = (distance, activity) => {\r\n    const newDistance = parseFloat(distance);\r\n\r\n    const segment = activity === \"run\" ? 2.5\r\n                      : activity === \"cycle\" ? 5\r\n                      : activity === \"swim\" ? 400\r\n                      : 1;\r\n\r\n    const ceilingFive = Math.ceil(newDistance / segment) * segment;\r\n    const floorFive = ceilingFive - segment;\r\n\r\n    return floorFive + \"k - \" + ceilingFive + \"k\";\r\n}\r\n\r\nconst getThreeM = (distance) => {\r\n    const newDistance = parseFloat(distance);\r\n\r\n    const ceilingThree = Math.ceil(newDistance / 3) * 3;\r\n    const floorThree = ceilingThree - 3;\r\n\r\n    return floorThree + \"m - \" + ceilingThree + \"m\";\r\n}\r\n\r\nconst parseData = (rows, activity, unit) => {\r\n    const data = [];\r\n    const whatSpeed = activity === \"run\" ? \"N/A\" : \"Speed (km/h)\";\r\n    const segment = activity === \"run\" ? \"2.5\"\r\n                                  : activity === \"cycle\" ? \"5\"\r\n                                  : activity === \"swim\" ? \"400\"\r\n                                  : \"1\";\r\n    const unitRange = unit === \"km\" ? segment : \"3m\";\r\n    const header = [\"ID\", \"Date\", whatSpeed, unitRange, \"Distance\"];\r\n    data.push(header);\r\n\r\n    const orderedRows = _.sortBy(rows, o => parseFloat(o.distance));\r\n\r\n    orderedRows.forEach((row) => {\r\n        const averageSpeed = unit === \"km\" ? row.averageSpeed : row.averageSpeedMile;\r\n        const distance = unit === \"km\" ? row.distance : row.distanceMile;\r\n        const unitRange = unit === \"km\" ? getSegK(distance, activity) : getThreeM(distance);\r\n        let speed = parseFloat(averageSpeed);\r\n        if (activity === \"run\" || activity === \"swim\") {\r\n            speed = formatSpeed(averageSpeed);\r\n        }\r\n        const dataRow =[averageSpeed, getDate(row.date), speed, unitRange, parseFloat(distance)];\r\n        data.push(dataRow);\r\n    });\r\n\r\n    return data;\r\n}\r\n\r\nexport const selectChartData = createSelector(\r\n    selectUserSpecificActivity,\r\n    selectActivityUnit,\r\n    selectCurrentActivityType,\r\n    (currentUserActivity, currentUnit, currentActivity) => parseData(currentUserActivity, currentActivity, currentUnit)\r\n);\r\n\r\nexport const selectChartDataCurrentYear = createSelector(\r\n    selectFormattedUserSpecificActivityCurrentYear,\r\n    selectActivityUnit,\r\n    selectCurrentActivityType,\r\n    (currentUserActivity, currentUnit, currentActivity) => parseData(currentUserActivity, currentActivity, currentUnit)\r\n);\r\n","import { connect } from 'react-redux';\r\nimport StravaChart from \"../components/StravaChart/StravaChart\";\r\nimport {\r\n    selectActivityUnit,\r\n    selectChartData,\r\n    selectChartDataCurrentYear,\r\n    selectCurrentActivityType\r\n} from \"../store/selectors/activities\";\r\n\r\nconst mapStateToProps = state => ({\r\n    currentActivityType: selectCurrentActivityType(state),\r\n    activityUnit: selectActivityUnit(state),\r\n    chartData: selectChartData(state),\r\n    chartDataCurrentYear: selectChartDataCurrentYear(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StravaChart);","import React, {Component} from 'react';\r\nimport './StravaTable-style.css';\r\nimport StravaChart from \"../../containers/StravaChart\";\r\nimport _ from 'lodash';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass StravaTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableHead: [\r\n                'Name',\r\n                'No. Runs',\r\n                'Run Distance',\r\n                'No. Cycles',\r\n                'Cycle Distance',\r\n                'No. Swims',\r\n                'Swim Distance',\r\n            ],\r\n            tableHeadSecond: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n                'Elevation Gain',\r\n            ],\r\n            tableHeadSwim: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n            ],\r\n            sort: {\r\n                field: \"date\",\r\n                direction: true\r\n            },\r\n        };\r\n    }\r\n\r\n    getHeader(headers, sorter) {\r\n        return headers.map((header) => {\r\n            if (sorter) {\r\n                return <th className=\"myTableHeaders\" onClick={() => this.setSort(header)}>{header}</th>\r\n            } else {\r\n                return <th className=\"myTableHeaders\">{header}</th>\r\n            }\r\n        })\r\n    }\r\n\r\n    setSort(field) {\r\n        const currentSort = this.state.sort;\r\n        const newDirection = field === currentSort.field ? !currentSort.direction : true;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            sort: {\r\n                field: field,\r\n                direction: newDirection\r\n            }\r\n        });\r\n    }\r\n\r\n    singleSetUser(user) {\r\n        const { currentUser, setCurrentUser } = this.props;\r\n\r\n        if (user !== currentUser) {\r\n            setCurrentUser(user);\r\n        }\r\n    }\r\n\r\n    setUser(selectedUser) {\r\n        const { currentUser, setCurrentUser } = this.props;\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name) && (name !== selectedUser)) {\r\n            window.location = window.location.href.replace(name, '');\r\n        }\r\n\r\n        const athlete = currentUser === selectedUser ? \"\" : selectedUser;\r\n\r\n        setCurrentUser(athlete);\r\n    }\r\n\r\n    getRowsData(row, i) {\r\n        const { currentUser, activityUnit } = this.props;\r\n        const name = row.name;\r\n\r\n        return (\r\n            <tr className={currentUser === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\r\n                <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/home/${name}`}>{name}</Link></td>\r\n                <td key={i} className=\"myTableContents\">{row.runQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? row.runDistance + \"km\" : row.runDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{row.bikeQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? row.bikeDistance + \"km\" : row.bikeDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{row.swimQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? row.swimDistance + \"km\" : row.swimDistanceMile + \"miles\"}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    detailedRows() {\r\n        const { currentUser, currentActivityType, setCurrentActivityType, activityUnit, userNames } = this.props;\r\n\r\n        const userRows = this.getSortedCurrentUserRows();\r\n\r\n        if (!userNames.includes(currentUser)) {\r\n            return <br />;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <button className={currentActivityType === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"run\")}>Run</button>\r\n                    <button className={currentActivityType === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"cycle\")}>Cycle</button>\r\n                    <button className={currentActivityType === \"swim\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"swim\")}>Swim</button>\r\n\r\n\r\n                    {userRows.length > 0 ?\r\n                        (<div>\r\n                            <StravaChart />\r\n\r\n                            <table className=\"myTableTwo\">\r\n                                <thead>\r\n                                    <tr>{currentActivityType !== \"swim\" ?\r\n                                        this.getHeader(this.state.tableHeadSecond, \"sorting function\") :\r\n                                        this.getHeader(this.state.tableHeadSwim, \"sorting function\")}</tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {userRows.map(row => {\r\n                                        const singleUnit = activityUnit === \"km\" ? \"km\" : \"mile\";\r\n                                        const speedUnit = activityUnit === \"km\" ? \"k\" : \"m\";\r\n                                        const swimSpeedUnit = activityUnit === \"km\" ? \"100m\" : \"100y\";\r\n                                        return (\r\n                                            <tr>\r\n                                                <td>{row.date}</td>\r\n                                                <td>{row.activity}</td>\r\n                                                <td>{activityUnit === \"km\" ?\r\n                                                    row.distance + (currentActivityType === \"swim\" ? \"m\" : \" km\") :\r\n                                                    row.distanceMile + \" miles\"}\r\n                                                </td>\r\n                                                <td>\r\n                                                    {activityUnit === \"km\" ? row.averageSpeed : row.averageSpeedMile}\r\n                                                    {\r\n                                                        currentActivityType === \"cycle\" ?\r\n                                                            speedUnit + \"ph\" :\r\n                                                            \"min/\" + (currentActivityType === \"run\" ?\r\n                                                                singleUnit :\r\n                                                                swimSpeedUnit)\r\n                                                    }\r\n                                                </td>\r\n                                                <td>{row.movingTime} min</td>\r\n                                                {\r\n                                                    currentActivityType !== \"swim\" ?\r\n                                                    <td>{row.elevationGain} m</td> : null\r\n                                                }\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{currentUser} is yet to {currentActivityType}</h6>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    getSortedCurrentUserRows() {\r\n        const { currentUserCurrentActivityData } = this.props\r\n        let userActivity = currentUserCurrentActivityData ? [...currentUserCurrentActivityData] : [];\r\n        const { sort } = this.state;\r\n\r\n\r\n        if (sort.field === \"Date\") {\r\n            userActivity = [...currentUserCurrentActivityData];\r\n        } else if (sort.field === \"Distance\") {\r\n            if (sort.direction) {\r\n                userActivity = _.orderBy(userActivity, function (o) { return Number(o.distance); }, 'asc');\r\n            } else {\r\n                userActivity = _.orderBy(userActivity, function (o) { return Number(o.distance); }, 'desc');\r\n            }\r\n        } else if (sort.field === \"Average Speed\") {\r\n            if (sort.direction) {\r\n                userActivity = _.orderBy(userActivity, o => { return Number(o.averageSpeed) }, 'asc');\r\n            } else {\r\n                userActivity = _.orderBy(userActivity, o => { return Number(o.averageSpeed) }, 'desc');\r\n            }\r\n        } else if (sort.field === \"Activity Time\") {\r\n            if (sort.direction) {\r\n                userActivity = _.orderBy(userActivity, 'movingTime', 'asc');\r\n            } else {\r\n                userActivity = _.orderBy(userActivity, 'movingTime', 'desc');\r\n            }\r\n        } else if (sort.field === \"Elevation Gain\") {\r\n            if (sort.direction) {\r\n                userActivity = _.orderBy(userActivity, 'elevationGain', 'asc');\r\n            } else {\r\n                userActivity = _.orderBy(userActivity, 'elevationGain', 'desc');\r\n            }\r\n        }\r\n\r\n        return userActivity;\r\n    }\r\n\r\n    render() {\r\n        const { allRows, activityUnit, setActivityUnit } = this.props;\r\n\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name)) {\r\n            this.singleSetUser(name);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <button className={activityUnit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"km\")}>Km</button>\r\n                <button className={activityUnit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"miles\")}>Miles</button>\r\n\r\n                <table className=\"myTable\">\r\n                    <thead>\r\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {allRows.map((row, i) => {\r\n                            return this.getRowsData(row, i)\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {this.detailedRows()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StravaTable;\r\n","import * as actionTypes from '../actionTypes/users';\r\n\r\nexport const fetchUsers = () => ({\r\n    type: actionTypes.FETCH_USERS,\r\n});\r\n\r\nexport const fetchUsersSuccess = users => ({\r\n    type: actionTypes.FETCH_USERS_SUCCESS,\r\n    payload: { users },\r\n});\r\n\r\nexport const fetchUsersFailure = error => ({\r\n    type: actionTypes.FETCH_USERS_FAILURE,\r\n    payload: { error },\r\n});\r\n\r\nexport const setCurrentUser = user => ({\r\n        type: actionTypes.SET_CURRENT_USER,\r\n        payload: { user },\r\n});","export const FETCH_USERS = 'FETCH_USERS';\r\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\r\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE';\r\n\r\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';","import * as actionTypes from \"../actionTypes/activities\";\r\n\r\nexport const fetchActivitiesSuccess = activities => ({\r\n    type: actionTypes.FETCH_ACTIVITIES_SUCCESS,\r\n    payload: { activities },\r\n});\r\n\r\nexport const fetchActivitiesFailure = error => ({\r\n    type: actionTypes.FETCH_ACTIVITIES_FAILURE,\r\n    payload: { error },\r\n});\r\n\r\nexport const setCurrentActivityType = activityType => ({\r\n    type: actionTypes.SET_CURRENT_ACTIVITY_TYPE,\r\n    payload: { activityType },\r\n});\r\n\r\nexport const setActivityUnit = activityUnit => ({\r\n    type: actionTypes.SET_ACTIVITY_UNIT,\r\n    payload: { activityUnit },\r\n})","export const FETCH_ACTIVITIES_SUCCESS = 'FETCH_ACTIVITIES_SUCCESS';\r\nexport const FETCH_ACTIVITIES_FAILURE = 'FETCH_ACTIVITIES_FAILURE';\r\n\r\nexport const SET_CURRENT_ACTIVITY_TYPE = 'SET_CURRENT_ACTIVITY_TYPE';\r\nexport const SET_ACTIVITY_UNIT = 'SET_ACTIVITY_UNIT';","import { connect } from 'react-redux';\r\nimport StravaTable from \"../components/StravaTable/StravaTable\";\r\nimport {selectCurrentUser, selectUserNames} from \"../store/selectors/users\";\r\nimport {\r\n    selectActivityUnit,\r\n    selectCurrentActivityType,\r\n    selectActivities,\r\n    selectUserSpecificActivity\r\n} from \"../store/selectors/activities\";\r\nimport * as actions from '../store/actions';\r\n\r\nconst mapStateToProps = state => ({\r\n    allRows: selectActivities(state),\r\n    currentUserCurrentActivityData: selectUserSpecificActivity(state),\r\n    userNames: selectUserNames(state),\r\n    currentUser: selectCurrentUser(state),\r\n    currentActivityType: selectCurrentActivityType(state),\r\n    activityUnit: selectActivityUnit(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCurrentUser: user => dispatch(actions.setCurrentUser(user)),\r\n    setCurrentActivityType: activityType => dispatch(actions.setCurrentActivityType(activityType)),\r\n    setActivityUnit: activityUnit => dispatch(actions.setActivityUnit(activityUnit)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StravaTable);","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {isMobile} from 'react-device-detect';\r\nimport './YearTable-style.css';\r\nimport StravaChart from \"../../containers/StravaChart\";\r\nimport {COMPETITION_DISTANCE, DATE, THIS_MONTH} from \"../../utils/consts\";\r\n\r\nclass YearTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableHead: [\r\n                'Name',\r\n                'No. Runs',\r\n                'Run Distance',\r\n                'No. Cycles',\r\n                'Cycle Distance',\r\n                'No. Swims',\r\n                'Swim Distance',\r\n                'Total Complete',\r\n            ],\r\n            tableHeadSecond: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n                'Elevation Gain',\r\n            ],\r\n            tableHeadSwim: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n            ],\r\n        };\r\n    }\r\n\r\n    getHeader(headers) {\r\n        return headers.map((header) => {\r\n            return <th className={isMobile ? \"myTableHeadersMobile\" : \"myTableHeaders\"}>{header}</th>\r\n        });\r\n    }\r\n\r\n    singleSetUser(user) {\r\n        const { currentUser, setCurrentUser } = this.props;\r\n\r\n        if (user !== currentUser) {\r\n            setCurrentUser(user);\r\n        }\r\n    }\r\n\r\n    setUser(selectedUser) {\r\n        const { currentUser, setCurrentUser } = this.props;\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name) && (name !== selectedUser)) {\r\n            window.location = window.location.href.replace(name, '');\r\n        }\r\n\r\n        const athlete = currentUser === selectedUser ? \"\" : selectedUser;\r\n\r\n        setCurrentUser(athlete);\r\n    }\r\n\r\n    getRowsData(row, i) {\r\n        const { currentUser, activityUnit } = this.props;\r\n        const name = row.name;\r\n        const runDistance = isMobile ? parseFloat(row.runDistance).toFixed(1) : row.runDistance;\r\n        const runDistanceMile = isMobile ? parseFloat(row.runDistanceMile).toFixed(1) : row.runDistanceMile;\r\n        const cycleDistance = isMobile ? parseFloat(row.bikeDistance).toFixed(1) : row.bikeDistance;\r\n        const cycleDistanceMile = isMobile ? parseFloat(row.bikeDistanceMile).toFixed(1) : row.bikeDistanceMile;\r\n        const swimDistance = isMobile ? parseFloat(row.swimDistance).toFixed(1) : row.swimDistance;\r\n        const swimDistanceMile = isMobile ? parseFloat(row.swimDistanceMile).toFixed(1) : row.swimDistanceMile;\r\n        const percentage = row.totalPercentage;\r\n\r\n        return (\r\n            <tr className={currentUser === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\r\n                {percentage >= 100 ?\r\n                    <td key={i} className=\"myTableContents-complete\">{name} (completed)</td>\r\n                    : <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/strava-competition/${name}`}>{name}</Link></td>\r\n                }\r\n                <td key={i} className=\"myTableContents\">{row.runQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? runDistance + \"km\" : runDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{row.bikeQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? cycleDistance + \"km\" : cycleDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{row.swimQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? swimDistance + \"km\" : swimDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{percentage.toFixed(2)}%</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    detailedRows() {\r\n        const { currentUser, currentActivityType, setCurrentActivityType, activityUnit, formattedUserSpecificActivityForCurrentYear } = this.props;\r\n\r\n        if (currentUser === \"\") {\r\n            return <br />;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <button className={currentActivityType === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"run\")}>Run</button>\r\n                    <button className={currentActivityType === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"cycle\")}>Cycle</button>\r\n                    <button className={currentActivityType === \"swim\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"swim\")}>Swim</button>\r\n\r\n                    {formattedUserSpecificActivityForCurrentYear.length > 0 ?\r\n                        (<div>\r\n                            <StravaChart currentYear={true} />\r\n\r\n                            <table className=\"myTableTwo\">\r\n                                <thead>\r\n                                <tr>{this.getHeader(this.state.tableHeadSecond)}</tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {formattedUserSpecificActivityForCurrentYear.map(row => {\r\n                                    const singleUnit = activityUnit === \"km\" ? \"km\" : \"mile\";\r\n                                    const speedUnit = activityUnit === \"km\" ? \"k\" : \"m\";\r\n                                    const swimSpeedUnit = activityUnit === \"km\" ? \"100m\" : \"100y\";\r\n                                    return (\r\n                                        <tr>\r\n                                            <td>{row.date}</td>\r\n                                            <td>{row.activity}</td>\r\n                                            <td>{activityUnit === \"km\" ?\r\n                                                    row.distance + (currentActivityType === \"swim\" ? \"m\" : \" km\") :\r\n                                                    row.distanceMile + \" miles\"}\r\n                                            </td>\r\n                                            <td>{activityUnit === \"km\" ? row.averageSpeed : row.averageSpeedMile}\r\n                                                {\r\n                                                    currentActivityType === \"cycle\" ?\r\n                                                        speedUnit + \"ph\" :\r\n                                                        \"min/\" + (currentActivityType === \"run\" ?\r\n                                                            singleUnit :\r\n                                                            swimSpeedUnit)\r\n                                                }\r\n                                            </td>\r\n                                            <td>{row.movingTime} min</td>\r\n                                            <td>{row.elevationGain} m</td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{currentUser} is yet to {currentActivityType} this year</h6>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { allRows, activityUnit, setActivityUnit } = this.props;\r\n        const monthIndex = DATE.getMonth() + 1;\r\n\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name)) {\r\n            this.singleSetUser(name);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h4>Jan - {THIS_MONTH} Triathlon</h4>\r\n                <h6>\r\n                    Run {COMPETITION_DISTANCE.run * monthIndex} km,\r\n                    Cycle {COMPETITION_DISTANCE.cycle * monthIndex} km &\r\n                    Swim {COMPETITION_DISTANCE.swim * monthIndex} km\r\n                </h6>\r\n                <p style={{fontSize: \"11px\", padding: 0}}>\r\n                    ({COMPETITION_DISTANCE.run} km, {COMPETITION_DISTANCE.cycle} km & {COMPETITION_DISTANCE.swim} km a month)\r\n                </p>\r\n                <button className={activityUnit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"km\")}>Km</button>\r\n                <button className={activityUnit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"miles\")}>Miles</button>\r\n\r\n                <table className=\"myTable\">\r\n                    <thead>\r\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {allRows.map((row, i) => {\r\n                            return this.getRowsData(row, i)\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {this.detailedRows()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default YearTable;\r\n","import { connect } from 'react-redux';\r\nimport YearTable from \"../components/YearTable/YearTable\";\r\nimport {selectCurrentUser, selectUserNames} from \"../store/selectors/users\";\r\nimport {\r\n    selectActivityUnit,\r\n    selectCurrentActivityType,\r\n    selectFormattedActivitiesForCurrentYearWithPercentage,\r\n    selectFormattedUserSpecificActivityCurrentYear,\r\n} from \"../store/selectors/activities\";\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n    allRows: selectFormattedActivitiesForCurrentYearWithPercentage(state),\r\n    formattedUserSpecificActivityForCurrentYear: selectFormattedUserSpecificActivityCurrentYear(state),\r\n    userNames: selectUserNames(state),\r\n    currentUser: selectCurrentUser(state),\r\n    currentActivityType: selectCurrentActivityType(state),\r\n    activityUnit: selectActivityUnit(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCurrentUser: user => dispatch(actions.setCurrentUser(user)),\r\n    setCurrentActivityType: activityType => dispatch(actions.setCurrentActivityType(activityType)),\r\n    setActivityUnit: activityUnit => dispatch(actions.setActivityUnit(activityUnit)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(YearTable);","import React, {Component} from 'react';\r\nimport { HashRouter as Router, Link, Route, Redirect } from \"react-router-dom\";\r\nimport {isMobile, mobileVendor, mobileModel} from 'react-device-detect';\r\nimport {publicIpv4} from 'public-ip';\r\nimport StravaTable from \"../../containers/StravaTable\";\r\nimport YearTable from \"../../containers/YearTable\";\r\nimport './Home-style.css';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            alerted: false,\r\n        };\r\n    }\r\n\r\n    async notifyPhone() {\r\n        const ipv4 = await publicIpv4();\r\n        const platform = isMobile ? `${mobileVendor} ${mobileModel}` : navigator.platform;\r\n\r\n        // const url = 'https://raj.bariah.com:2010/location?ipAddress=' + ipv4 + \"&device=\" + platform + \"&site=Strava\";\r\n        const url = 'https://maker.ifttt.com/trigger/site_visited/with/key/b_Yu8_AU_JIDYDYR_WXF5-?value1=' + ipv4 + \"&value2=\" + platform + \"&value3=Strava\";\r\n        if(!this.state.alerted) {\r\n            fetch(url, {\r\n                method: 'post'\r\n            }).catch(e => console.log(e));\r\n            this.setState({\r\n                ...this.state,\r\n                alerted: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { fetchUsers } = this.props;\r\n        fetchUsers();\r\n    }\r\n\r\n    render() {\r\n        this.notifyPhone();\r\n\r\n        return (\r\n            <div>\r\n                <Router basename={process.env.PUBLIC_URL}>\r\n                    <h2 className=\"myHeading\"><a className=\"rajbar-link\" href=\"https://raj.bar\">raj.Bar</a> <Link className=\"rajbar-link\" to={'/home'}>/</Link> <Link className=\"rajbar-link\" to={'/strava-competition'}>strava</Link></h2>\r\n                    <Route exact path={\"/\"}>\r\n                        <Redirect to={\"/home\"} />\r\n                    </Route>\r\n                    <Route path={'/home'} render={() => (\r\n                        <StravaTable />\r\n                    )}/>\r\n\r\n                    <Route path={'/strava-competition'} render={() => (\r\n                        <YearTable />\r\n                    )} />\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import { connect } from 'react-redux';\r\nimport Home from '../components/Home/Home';\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchUsers: () => dispatch(actions.fetchUsers()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, {Component} from 'react';\r\nimport './App.css'\r\nimport Home from './containers/Home';\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n        <div className=\"App\">\r\n          <Home />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as actionTypes from '../actionTypes/users';\r\n\r\nconst initialState = {\r\n    users: [],\r\n    currentUser: \"\",\r\n    error: null,\r\n};\r\n\r\nconst fetchUsersSuccess = (state, action) => ({\r\n    ...state,\r\n    users: action.payload.users,\r\n});\r\n\r\nconst fetchUsersFailure = (state, action) => ({\r\n    ...state,\r\n    error: action.payload.error,\r\n});\r\n\r\nconst setCurrentUser = (state, action) => ({\r\n    ...state,\r\n    currentUser: action.payload.user,\r\n});\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.FETCH_USERS_SUCCESS:\r\n            return fetchUsersSuccess(state, action);\r\n        case actionTypes.FETCH_USERS_FAILURE:\r\n            return fetchUsersFailure(state, action);\r\n        case actionTypes.SET_CURRENT_USER:\r\n            return setCurrentUser(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};","import * as actionTypes from '../actionTypes/activities';\r\n\r\nconst initialState = {\r\n    activities: [],\r\n    currentActivityType: 'run',\r\n    activityUnit: 'km',\r\n    error: null,\r\n};\r\n\r\nconst fetchActivitiesSuccess = (state, action) => ({\r\n    ...state,\r\n    activities: action.payload.activities,\r\n});\r\n\r\nconst fetchActivitiesFailure = (state, action) => ({\r\n    ...state,\r\n    error: action.payload.error,\r\n});\r\n\r\nconst setCurrentActivityType = (state, action) => ({\r\n    ...state,\r\n    currentActivityType: action.payload.activityType,\r\n});\r\n\r\nconst setActivityUnit = (state, action) => ({\r\n    ...state,\r\n    activityUnit: action.payload.activityUnit,\r\n})\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.FETCH_ACTIVITIES_SUCCESS:\r\n            return fetchActivitiesSuccess(state, action);\r\n        case actionTypes.FETCH_ACTIVITIES_FAILURE:\r\n            return fetchActivitiesFailure(state, action);\r\n        case actionTypes.SET_CURRENT_ACTIVITY_TYPE:\r\n            return setCurrentActivityType(state, action);\r\n        case actionTypes.SET_ACTIVITY_UNIT:\r\n            return setActivityUnit(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { combineReducers } from \"redux\";\r\nimport users from \"./users\";\r\nimport activities from \"./activities\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    users,\r\n    activities,\r\n})\r\n","import {call, put} from 'redux-saga/effects';\r\nimport * as actions from '../actions';\r\n// import {activities} from \"../tmp-data/activities.js\";\r\n\r\nconst getActivities = async () => {\r\n    // const activitiesLink = \"https://raj.bariah.com:2010/strava/activities\";\r\n    // const activitiesLink = \"https://rajbar.hopto.org:2010/strava/activities\";\r\n    // const activitiesLink = \"https://api.rajbar.duckdns.org/strava/activities\";\r\n    const activitiesLink = \"https://api.rajbariah.com/strava/activities\";\r\n\r\n    return await fetch(activitiesLink)\r\n        .then(res => res.json());\r\n//    return activities;\r\n}\r\n\r\nconst getAllKm = (accumulator, a) => {\r\n    return Math.round(accumulator + a.distance);\r\n}\r\n\r\nconst findAllSpecificActivity = (activityType, athleteID, activities) => {\r\n    const activity = [...activities];\r\n\r\n    return activity.filter(function (element) {\r\n        return (element.type === activityType) && (element.athlete.id.toString() === athleteID);\r\n    });\r\n}\r\n\r\nconst createUserObj = (athleteID, name, activities) => {\r\n    const mileConversion = 0.6214;\r\n    const userRun = findAllSpecificActivity(\"Run\", athleteID, activities);\r\n    const userTotalRan = userRun.length > 0 ? (userRun.reduce(getAllKm,0) / 1000) : 0;\r\n    const userBike = findAllSpecificActivity(\"Ride\", athleteID, activities);\r\n    const userTotalBike = userBike.length > 0 ? (userBike.reduce(getAllKm,0) / 1000) : 0;\r\n    const userSwim = findAllSpecificActivity(\"Swim\", athleteID, activities);\r\n    const userTotalSwim = userSwim.length > 0 ? (userSwim.reduce(getAllKm,0) / 1000) : 0;\r\n    const userObj = {\r\n        name: name,\r\n        runQuantity: userRun.length,\r\n        runDistance: userTotalRan,\r\n        runDistanceMile: (userTotalRan * mileConversion).toFixed(2),\r\n        bikeQuantity: userBike.length,\r\n        bikeDistance: userTotalBike,\r\n        bikeDistanceMile: (userTotalBike * mileConversion).toFixed(2),\r\n        swimQuantity: userSwim.length,\r\n        swimDistance: userTotalSwim,\r\n        swimDistanceMile: (userTotalSwim * mileConversion).toFixed(2),\r\n        allRuns: userRun.map((r, i) => {\r\n            const dist = r.distance / 1000;\r\n            const time = r.moving_time / 60;\r\n            const distance = (r.distance / 1000).toFixed(2)\r\n            const distanceMile = (dist * mileConversion).toFixed(2)\r\n            const movingTime = (r.moving_time / 60).toFixed(0);\r\n            const averageSpeed = dist / (time/60);\r\n            const oneKM = (1 / averageSpeed) * 60;\r\n            let floor = Math.floor(oneKM);\r\n            let decimal = (oneKM - floor) * 0.60;\r\n            if (decimal.toFixed(2) === \"0.60\") {\r\n                floor += 1;\r\n                decimal = 0;\r\n            }\r\n            const km = (floor + decimal).toFixed(2);\r\n            const averageSpeedMiles = (dist * mileConversion) / (time/60);\r\n            const oneMile = (1 / averageSpeedMiles) * 60;\r\n            let floorMile = Math.floor(oneMile);\r\n            let decimalMile = (oneMile - floorMile) * 0.60;\r\n            if (decimal.toFixed(2) === \"0.60\") {\r\n                floorMile += 1;\r\n                decimalMile = 0;\r\n            }\r\n            const mile = (floorMile + decimalMile).toFixed(2);\r\n            const day = r.start_date.substr(8,2);\r\n            const month = r.start_date.substr(5,2);\r\n            const year = r.start_date.substr(2, 2)\r\n            const date = day + \"/\" + month + \"/\" + year;\r\n            const elevationGain = r.total_elevation_gain;\r\n            return {date: date, startDate: r.start_date, activity: \"Run\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: km, averageSpeedMile: mile, elevationGain: elevationGain};\r\n        }),\r\n        allCycles: userBike.map((r, i) => {\r\n            const distance = (r.distance / 1000).toFixed(2);\r\n            const distanceMile = (distance * mileConversion).toFixed(2);\r\n            const movingTime = (r.moving_time / 60).toFixed(0);\r\n            const averageSpeed = (distance / (movingTime/60)).toFixed(1);\r\n            const averageSpeedMile = (averageSpeed * mileConversion).toFixed(1);\r\n            const day = r.start_date.substr(8,2);\r\n            const month = r.start_date.substr(5,2);\r\n            const year = r.start_date.substr(2, 2)\r\n            const date = day + \"/\" + month + \"/\" + year;\r\n            const elevationGain = r.total_elevation_gain;\r\n            return {date: date, startDate: r.start_date, activity: \"Cycle\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: averageSpeed, averageSpeedMile: averageSpeedMile, elevationGain: elevationGain};\r\n        }),\r\n        allSwims: userSwim.map((r, i) => {\r\n            const distKm = r.distance / 100;\r\n            const dist = r.distance / 1000;\r\n            const time = r.moving_time / 60;\r\n            const distance = (r.distance)\r\n            const distanceMile = (dist * mileConversion).toFixed(2)\r\n            const movingTime = (r.moving_time / 60).toFixed(0);\r\n            const averageSpeed = distKm / (time/60);\r\n            const oneKM = (1 / averageSpeed) * 60;\r\n            let floor = Math.floor(oneKM);\r\n            let decimal = (oneKM - floor) * 0.60;\r\n            if (decimal.toFixed(2) === \"0.60\") {\r\n                floor += 1;\r\n                decimal = 0;\r\n            }\r\n            const hundredMeter = (floor + decimal).toFixed(2);\r\n            const averageSpeedMiles = (dist * mileConversion) / (time/60);\r\n            const oneMile = (1 / averageSpeedMiles) * 60;\r\n            const oneYard = (100 / (averageSpeedMiles * 1760)) * 60;\r\n            let floorMile = Math.floor(oneYard);\r\n            let decimalMile = (oneYard - floorMile) * 0.60;\r\n            if (decimalMile.toFixed(2) === \"0.60\") {\r\n                floorMile += 1;\r\n                decimalMile = 0;\r\n            }\r\n            const mile = (floorMile + decimalMile).toFixed(2);\r\n            const day = r.start_date.substr(8,2);\r\n            const month = r.start_date.substr(5,2);\r\n            const year = r.start_date.substr(2, 2)\r\n            const date = day + \"/\" + month + \"/\" + year;\r\n            return {date: date, startDate: r.start_date, activity: \"Swim\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: hundredMeter, averageSpeedMile: mile};\r\n        }),\r\n    };\r\n\r\n    return userObj;\r\n};\r\n\r\nexport function* fetchActivitiesSaga(users) {\r\n    try {\r\n        const activities = yield call(getActivities);\r\n\r\n        const formattedActivities = users.map(user => {\r\n            return createUserObj(user.athleteID, user.name, activities)\r\n        });\r\n\r\n        yield put(actions.fetchActivitiesSuccess(formattedActivities));\r\n    } catch (error) {\r\n        yield put(actions.fetchActivitiesFailure(error));\r\n    }\r\n}\r\n","import {call, put} from 'redux-saga/effects';\r\nimport * as actions from '../actions';\r\nimport {fetchActivitiesSaga} from \"./activitiesSagas\";\r\n// import {users} from \"../tmp-data/users.js\";\r\n\r\nconst getUsers = async () => {\r\n    // const userLink = \"https://raj.bariah.com:2010/strava/users\";\r\n    // const userLink = \"https://rajbar.hopto.org:2010/strava/users\";\r\n    // const userLink = \"https://api.rajbar.duckdns.org/strava/users\";\r\n    const userLink = \"https://api.rajbariah.com/strava/users\";\r\n    return await fetch(userLink)\r\n        .then(res => res.json());\r\n//    return users;\r\n}\r\n\r\nexport function* fetchUsersSaga() {\r\n    try {\r\n        const users = yield call(getUsers)\r\n        yield put(actions.fetchUsersSuccess(users));\r\n        yield call(fetchActivitiesSaga, users);\r\n    } catch (error) {\r\n        yield put(actions.fetchUsersFailure(error));\r\n    }\r\n}\r\n","import { takeEvery } from 'redux-saga/effects';\r\nimport * as actionTypes from '../actionTypes';\r\nimport * as usersSagas from './usersSagas';\r\n\r\nexport function* usersWatcher() {\r\n    yield takeEvery(actionTypes.FETCH_USERS, usersSagas.fetchUsersSaga);\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { configureStore } from './store/configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport { initialState } from './store/initialState';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = configureStore(initialState);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { rootReducer } from \"./reducers\";\r\nimport * as sagaWatchers from './sagas';\r\n\r\nexport function configureStore(initialState) {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n\r\n    const enhancer = compose(\r\n        applyMiddleware(sagaMiddleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__\r\n            ? window.__REDUX_DEVTOOLS_EXTENSION__({ name: 'strava-stats' })\r\n            : f => f,\r\n    )\r\n\r\n    const store = createStore(rootReducer, initialState, enhancer)\r\n\r\n    Object.keys(sagaWatchers).forEach(watcher => {\r\n        sagaMiddleware.run(sagaWatchers[watcher])\r\n    })\r\n\r\n    return store;\r\n}\r\n","export const initialState = {};\r\n"],"sourceRoot":""}