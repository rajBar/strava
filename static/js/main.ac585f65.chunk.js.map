{"version":3,"sources":["components/StravaChart/StravaChart.jsx","store/selectors/users.js","utils/consts.js","store/selectors/activities.js","containers/StravaChart.js","components/StravaTable/StravaTable.jsx","store/actions/users.js","store/actionTypes/users.js","store/actions/activities.js","store/actionTypes/activities.js","containers/StravaTable.js","components/YearTable/YearTable.jsx","containers/YearTable.js","components/Home/Home.jsx","containers/Home.js","App.js","store/reducers/users.js","store/reducers/activities.js","store/reducers/index.js","store/sagas/activitiesSagas.js","store/sagas/usersSagas.js","store/sagas/index.js","serviceWorker.js","index.js","store/configureStore.js","store/initialState.js"],"names":["StravaChart","props","activity","unit","title","hAxis","vAxis","gridlines","units","hours","format","minutes","seconds","bubble","textStyle","fontSize","this","currentActivityType","activityUnit","chartData","chartDataCurrentYear","data","currentYear","options","parseOptions","className","chartType","width","height","Component","selectUserNames","state","users","map","user","name","selectCurrentUser","currentUser","COMPETITION_DISTANCE","DATE","Date","THIS_MONTH","getMonth","selectActivities","activities","selectCurrentActivityType","selectActivityUnit","selectUserActivity","createSelector","formattedActivities","_","find","userActivity","selectSelectedYear","selectedYear","selectEarliestYearForUserActivity","allYears","forEach","allRuns","run","push","date","substr","allCycles","cycle","allSwims","swim","Math","min","selectUserSpecificActivity","isThisYear","activityDate","getFullYear","parseInt","selectFormattedActivitiesForCurrentYear","activitiesCurrentYear","userActivities","cycles","filter","startDate","runs","swims","runDistance","reduce","a","b","parseFloat","cycleDistance","swimDistance","newUser","toFixed","runDistanceMile","runQuantity","length","bikeDistance","bikeDistanceMile","bikeQuantity","swimDistanceMile","swimQuantity","selectFormattedActivitiesForCurrentYearWithPercentage","activitiesPercentage","monthIndex","competitionRun","competitionCycle","competitionSwim","runPercentageCapped","cyclePercentageCapped","swimPercentageCapped","totalPercentage","calculateTotalPercent","orderBy","selectFormattedUserActivityForCurrentYear","selectFormattedUserSpecificActivityCurrentYear","getDate","dateSplit","split","day","month","year","parseData","rows","header","sortBy","o","distance","row","averageSpeed","averageSpeedMile","distanceMile","unitRange","newDistance","segment","ceilingFive","ceil","getSegK","ceilingThree","getThreeM","speed","speedSplit","toString","minute","second","formatSpeed","dataRow","selectChartData","currentUserActivity","currentUnit","currentActivity","selectChartDataCurrentYear","connect","dispatch","StravaTable","tableHead","tableHeadSecond","tableHeadSwim","sort","field","direction","headers","sorter","onClick","setSort","currentSort","newDirection","setState","setCurrentUser","selectedUser","urlArr","window","location","href","userNames","includes","replace","i","setUser","key","to","setCurrentActivityType","userRows","getSortedCurrentUserRows","getHeader","singleUnit","speedUnit","swimSpeedUnit","movingTime","elevationGain","style","paddingTop","currentUserCurrentActivityData","Number","allRows","setActivityUnit","singleSetUser","getRowsData","detailedRows","fetchUsersSuccess","type","payload","fetchActivitiesSuccess","activityType","actions","YearTable","handleYearChange","bind","event","setSelectedYear","target","value","isMobile","cycleDistanceMile","percentage","formattedUserSpecificActivityForCurrentYear","earliestYear","onChange","Array","from","index","padding","Home","alerted","publicIpv4","ipv4","platform","mobileVendor","mobileModel","navigator","url","fetch","method","catch","e","console","log","fetchUsers","notifyPhone","basename","process","exact","path","render","App","initialState","error","action","fetchUsersFailure","fetchActivitiesFailure","rootReducer","combineReducers","fetchActivitiesSaga","getActivities","then","res","json","getAllKm","accumulator","round","findAllSpecificActivity","athleteID","element","athlete","id","createUserObj","userRun","userTotalRan","userBike","userTotalBike","userSwim","userTotalSwim","r","dist","time","moving_time","oneKM","floor","decimal","km","oneMile","floorMile","decimalMile","mile","start_date","total_elevation_gain","distKm","hundredMeter","averageSpeedMiles","oneYard","call","put","fetchUsersSaga","getUsers","usersWatcher","takeEvery","usersSagas","Boolean","hostname","match","store","sagaMiddleware","createSagaMiddleware","enhancer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","createStore","Object","keys","sagaWatchers","watcher","configureStore","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ac585f65.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport Chart from \"react-google-charts\";\n\nclass StravaChart extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    parseOptions(activity, unit) {\n        const unitType = unit === \"km\" ? \"k\" : \"m\";\n        const swimSpeedUnit = unit === \"km\" ? \"100m\" : \"100y\";\n        const speed = activity === \"cycle\" ?\n            unitType + \"ph\" :\n            \"min/\" + (activity === \"run\" ?\n                unit :\n                swimSpeedUnit)\n\n        return {\n            title: \"Lifetime \" + activity + \"s\",\n            hAxis: {\n                title: \"date\"\n            },\n            vAxis: {\n                title: speed,\n                gridlines: {\n                    units: {\n                        hours: {format: ['']},\n                        minutes: {format: ['mm:ss']},\n                        seconds: {format: ['mm:ss']},\n                    }\n                }\n            },\n            bubble: { textStyle: { fontSize: 11 } }\n        }\n    }\n\n    render() {\n        const {currentActivityType, activityUnit, chartData, chartDataCurrentYear, currentYear} = this.props;\n        const data = currentYear ? chartDataCurrentYear : chartData;\n\n        const options = currentActivityType ? this.parseOptions(currentActivityType, activityUnit) : [];\n\n        return (\n            <div className=\"App\">\n                <Chart\n                    chartType=\"BubbleChart\"\n                    width=\"100%\"\n                    height=\"400px\"\n                    data={data}\n                    options={options}\n                />\n            </div>\n        );\n    }\n}\n\nexport default StravaChart;\n","export const selectUserNames = state => state.users.users.map(user => user.name);\n\nexport const selectUsers = state => state.users.users;\n\nexport const selectCurrentUser = state => state.users.currentUser;","export const COMPETITION_DISTANCE = {\n    run: 30,\n    cycle: 60,\n    swim: 5,\n};\n\nexport const DATE = new Date();\n\nconst month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\nexport const THIS_MONTH = month[DATE.getMonth()];","import _ from \"lodash\";\nimport {createSelector} from 'reselect';\nimport {selectCurrentUser} from \"./users\";\nimport {COMPETITION_DISTANCE} from \"../../utils/consts\";\n\nexport const selectActivities = state => state.activities.activities;\n\nexport const selectCurrentActivityType = state => state.activities.currentActivityType;\n\nexport const selectActivityUnit = state => state.activities.activityUnit;\n\nexport const selectUserActivity = createSelector(\n    selectActivities,\n    selectCurrentUser,\n    (formattedActivities, currentUser) => _.find(formattedActivities, userActivity => userActivity.name === currentUser)\n);\n\nexport const selectSelectedYear = state => state.activities.selectedYear;\n\nexport const selectEarliestYearForUserActivity = createSelector(\n    selectActivities,\n    activities => {\n        const allYears = [];\n\n        activities.forEach(user => {\n                user.allRuns.forEach(run => {\n                    allYears.push(run.date.substr(6,2));\n                });\n                user.allCycles.forEach(cycle => {\n                    allYears.push(cycle.date.substr(6,2));\n                });\n                user.allSwims.forEach(swim => {\n                    allYears.push(swim.date.substr(6,2));\n                });\n            });\n\n        const earliestYear = Math.min(...allYears);\n        return (earliestYear + 2000);\n    }\n)\n\nexport const selectUserSpecificActivity = createSelector(\n    selectUserActivity,\n    selectCurrentActivityType,\n    (userActivity, currentActivityType) => {\n            switch(currentActivityType) {\n                case \"run\":\n                    return userActivity?.allRuns;\n                case \"cycle\":\n                    return userActivity?.allCycles;\n                case \"swim\":\n                    return userActivity?.allSwims;\n            }\n        }\n);\n\nconst calculateTotalPercent = (user, selectedYear) => {\n    const date = new Date();\n    const monthIndex = parseInt(selectedYear) === date.getFullYear() ? date.getMonth() + 1 : 12;\n    const competitionRun = COMPETITION_DISTANCE.run * monthIndex;\n    const competitionCycle = COMPETITION_DISTANCE.cycle * monthIndex;\n    const competitionSwim = COMPETITION_DISTANCE.swim * monthIndex;\n    const runDistance = user.runDistance;\n    const cycleDistance = user.bikeDistance;\n    const swimDistance = user.swimDistance;\n\n    const runPercentageCapped = runDistance > competitionRun ? 100 : (runDistance / competitionRun) * 100;\n    const runPercentage = (runDistance / competitionRun) * 100;\n    const cyclePercentageCapped = cycleDistance > competitionCycle ? 100 : (cycleDistance / competitionCycle) * 100;\n    const cyclePercentage = (cycleDistance / competitionCycle) * 100;\n    const swimPercentageCapped = swimDistance > competitionSwim ? 100 : (swimDistance / competitionSwim) * 100;\n    const swimPercentage = (swimDistance / competitionSwim) * 100;\n\n    const totalPercentage =  (runPercentageCapped + cyclePercentageCapped + swimPercentageCapped) / 3 === 100 ? (runPercentage + cyclePercentage + swimPercentage) / 3 : (runPercentageCapped + cyclePercentageCapped + swimPercentageCapped) / 3;\n\n    return {\n        ...user,\n        totalPercentage: totalPercentage\n    };\n};\n\nconst isThisYear = (date, selectedYear) => {\n    const activityDate = new Date(date).getFullYear();\n\n    return parseInt(selectedYear) === parseInt(activityDate);\n}\n\nexport const selectFormattedActivitiesForCurrentYear = createSelector(\n    selectActivities,\n    selectSelectedYear,\n    (activities, selectSelectedYear) => {\n        const mileConversion = 0.6214;\n        const activitiesCurrentYear = [];\n        activities.forEach(userActivities => {\n            const cycles = _.filter(userActivities.allCycles, cycle => { return isThisYear(cycle.startDate, selectSelectedYear) })\n            const runs = _.filter(userActivities.allRuns, run => { return isThisYear(run.startDate, selectSelectedYear) });\n            const swims = _.filter(userActivities.allSwims, swim => { return isThisYear(swim.startDate, selectSelectedYear) });\n            const runDistance = runs.reduce((a, b) => a + (parseFloat(b['distance']) || 0), 0);\n            const cycleDistance = cycles.reduce((a, b) => a + (parseFloat(b['distance']) || 0), 0);\n            const swimDistance = swims.reduce((a, b) => a + (parseFloat(b['distance']) || 0), 0);\n            const newUser = {\n                ...userActivities,\n                allRuns: runs,\n                runDistance: runDistance.toFixed(2),\n                runDistanceMile: (runDistance * mileConversion).toFixed(2),\n                runQuantity: runs.length,\n                allCycles: cycles,\n                bikeDistance: cycleDistance.toFixed(2),\n                bikeDistanceMile: (cycleDistance * mileConversion).toFixed(2),\n                bikeQuantity: cycles.length,\n                allSwims: swims,\n                swimDistance: (swimDistance/1000).toFixed(2),\n                swimDistanceMile: ((swimDistance * mileConversion)/1000).toFixed(2),\n                swimQuantity: swims.length\n            }\n            activitiesCurrentYear.push(newUser);\n        });\n\n        return activitiesCurrentYear;\n    }\n);\n\nexport const selectFormattedActivitiesForCurrentYearWithPercentage = createSelector(\n    selectFormattedActivitiesForCurrentYear,\n    selectSelectedYear,\n    (activities, selectSelectedYear) => {\n        const activitiesPercentage = activities.map(user => {\n            return calculateTotalPercent(user, selectSelectedYear);\n        })\n\n        return _.orderBy(activitiesPercentage, ['totalPercentage'], ['desc']);\n    }\n);\n\nexport const selectFormattedUserActivityForCurrentYear = createSelector(\n    selectFormattedActivitiesForCurrentYearWithPercentage,\n    selectCurrentUser,\n    (formattedActivities, currentUser) => _.find(formattedActivities, userActivity => userActivity.name === currentUser)\n);\n\nexport const selectFormattedUserSpecificActivityCurrentYear = createSelector(\n    selectFormattedUserActivityForCurrentYear,\n    selectCurrentActivityType,\n    (userActivity, currentActivityType) => {\n        switch(currentActivityType) {\n            case \"run\":\n                return userActivity?.allRuns;\n            case \"cycle\":\n                return userActivity?.allCycles;\n            case \"swim\":\n                return userActivity?.allSwims;\n        }\n    }\n\n//    currentActivityType === \"run\" ? userActivity?.allRuns : userActivity?.allCycles\n);\n\nconst formatSpeed = (speed) => {\n    const speedSplit = speed.toString().split(\".\");\n    const minute = parseInt(speedSplit[0]);\n    const second = parseInt(speedSplit[1]);\n\n    return new Date(2000, 0, 1, 1, minute, second, 0);\n}\n\nconst getDate = (date) => {\n    const dateSplit = date.split(\"/\");\n    const day = parseInt(dateSplit[0]);\n    const month = parseInt(dateSplit[1]) - 1;\n    const year = parseInt(dateSplit[2]) + 2000;\n\n    return new Date(year, month, day);\n}\n\nconst getSegK = (distance, activity) => {\n    const newDistance = parseFloat(distance);\n\n    const segment = activity === \"run\" ? 2.5\n                      : activity === \"cycle\" ? 5\n                      : activity === \"swim\" ? 400\n                      : 1;\n\n    const ceilingFive = Math.ceil(newDistance / segment) * segment;\n    const floorFive = ceilingFive - segment;\n\n    return floorFive + \"k - \" + ceilingFive + \"k\";\n}\n\nconst getThreeM = (distance) => {\n    const newDistance = parseFloat(distance);\n\n    const ceilingThree = Math.ceil(newDistance / 3) * 3;\n    const floorThree = ceilingThree - 3;\n\n    return floorThree + \"m - \" + ceilingThree + \"m\";\n}\n\nconst parseData = (rows, activity, unit) => {\n    const data = [];\n    const whatSpeed = activity === \"run\" ? \"N/A\" : \"Speed (km/h)\";\n    const segment = activity === \"run\" ? \"2.5\"\n                                  : activity === \"cycle\" ? \"5\"\n                                  : activity === \"swim\" ? \"400\"\n                                  : \"1\";\n    const unitRange = unit === \"km\" ? segment : \"3m\";\n    const header = [\"ID\", \"Date\", whatSpeed, unitRange, \"Distance\"];\n    data.push(header);\n\n    const orderedRows = _.sortBy(rows, o => parseFloat(o.distance));\n\n    orderedRows.forEach((row) => {\n        const averageSpeed = unit === \"km\" ? row.averageSpeed : row.averageSpeedMile;\n        const distance = unit === \"km\" ? row.distance : row.distanceMile;\n        const unitRange = unit === \"km\" ? getSegK(distance, activity) : getThreeM(distance);\n        let speed = parseFloat(averageSpeed);\n        if (activity === \"run\" || activity === \"swim\") {\n            speed = formatSpeed(averageSpeed);\n        }\n        const dataRow =[averageSpeed, getDate(row.date), speed, unitRange, parseFloat(distance)];\n        data.push(dataRow);\n    });\n\n    return data;\n}\n\nexport const selectChartData = createSelector(\n    selectUserSpecificActivity,\n    selectActivityUnit,\n    selectCurrentActivityType,\n    (currentUserActivity, currentUnit, currentActivity) => parseData(currentUserActivity, currentActivity, currentUnit)\n);\n\nexport const selectChartDataCurrentYear = createSelector(\n    selectFormattedUserSpecificActivityCurrentYear,\n    selectActivityUnit,\n    selectCurrentActivityType,\n    (currentUserActivity, currentUnit, currentActivity) => parseData(currentUserActivity, currentActivity, currentUnit)\n);\n","import { connect } from 'react-redux';\nimport StravaChart from \"../components/StravaChart/StravaChart\";\nimport {\n    selectActivityUnit,\n    selectChartData,\n    selectChartDataCurrentYear,\n    selectCurrentActivityType\n} from \"../store/selectors/activities\";\n\nconst mapStateToProps = state => ({\n    currentActivityType: selectCurrentActivityType(state),\n    activityUnit: selectActivityUnit(state),\n    chartData: selectChartData(state),\n    chartDataCurrentYear: selectChartDataCurrentYear(state),\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StravaChart);","import React, {Component} from 'react';\nimport './StravaTable-style.css';\nimport StravaChart from \"../../containers/StravaChart\";\nimport _ from 'lodash';\nimport {Link} from \"react-router-dom\";\n\nclass StravaTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tableHead: [\n                'Name',\n                'No. Runs',\n                'Run Distance',\n                'No. Cycles',\n                'Cycle Distance',\n                'No. Swims',\n                'Swim Distance',\n            ],\n            tableHeadSecond: [\n                'Date',\n                'Activity',\n                'Distance',\n                'Average Speed',\n                'Activity Time',\n                'Elevation Gain',\n            ],\n            tableHeadSwim: [\n                'Date',\n                'Activity',\n                'Distance',\n                'Average Speed',\n                'Activity Time',\n            ],\n            sort: {\n                field: \"date\",\n                direction: true\n            },\n        };\n    }\n\n    getHeader(headers, sorter) {\n        return headers.map((header) => {\n            if (sorter) {\n                return <th className=\"myTableHeaders\" onClick={() => this.setSort(header)}>{header}</th>\n            } else {\n                return <th className=\"myTableHeaders\">{header}</th>\n            }\n        })\n    }\n\n    setSort(field) {\n        const currentSort = this.state.sort;\n        const newDirection = field === currentSort.field ? !currentSort.direction : true;\n\n        this.setState({\n            ...this.state,\n            sort: {\n                field: field,\n                direction: newDirection\n            }\n        });\n    }\n\n    singleSetUser(user) {\n        const { currentUser, setCurrentUser } = this.props;\n\n        if (user !== currentUser) {\n            setCurrentUser(user);\n        }\n    }\n\n    setUser(selectedUser) {\n        const { currentUser, setCurrentUser } = this.props;\n        const currentURL = window.location.href;\n        const urlArr = currentURL.split('/');\n        const name = urlArr[urlArr.length - 1];\n        const userNames = this.props.userNames;\n        if (userNames.includes(name) && (name !== selectedUser)) {\n            window.location = window.location.href.replace(name, '');\n        }\n\n        const athlete = currentUser === selectedUser ? \"\" : selectedUser;\n\n        setCurrentUser(athlete);\n    }\n\n    getRowsData(row, i) {\n        const { currentUser, activityUnit } = this.props;\n        const name = row.name;\n\n        return (\n            <tr className={currentUser === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\n                <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/home/${name}`}>{name}</Link></td>\n                <td key={i} className=\"myTableContents\">{row.runQuantity}</td>\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? row.runDistance + \"km\" : row.runDistanceMile + \"miles\"}</td>\n                <td key={i} className=\"myTableContents\">{row.bikeQuantity}</td>\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? row.bikeDistance + \"km\" : row.bikeDistanceMile + \"miles\"}</td>\n                <td key={i} className=\"myTableContents\">{row.swimQuantity}</td>\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? row.swimDistance + \"km\" : row.swimDistanceMile + \"miles\"}</td>\n            </tr>\n        )\n    }\n\n    detailedRows() {\n        const { currentUser, currentActivityType, setCurrentActivityType, activityUnit, userNames } = this.props;\n\n        const userRows = this.getSortedCurrentUserRows();\n\n        if (!userNames.includes(currentUser)) {\n            return <br />;\n        } else {\n            return (\n                <div>\n                    <button className={currentActivityType === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"run\")}>Run</button>\n                    <button className={currentActivityType === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"cycle\")}>Cycle</button>\n                    <button className={currentActivityType === \"swim\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"swim\")}>Swim</button>\n\n\n                    {userRows.length > 0 ?\n                        (<div>\n                            <StravaChart />\n\n                            <table className=\"myTableTwo\">\n                                <thead>\n                                    <tr>{currentActivityType !== \"swim\" ?\n                                        this.getHeader(this.state.tableHeadSecond, \"sorting function\") :\n                                        this.getHeader(this.state.tableHeadSwim, \"sorting function\")}</tr>\n                                </thead>\n                                <tbody>\n                                    {userRows.map(row => {\n                                        const singleUnit = activityUnit === \"km\" ? \"km\" : \"mile\";\n                                        const speedUnit = activityUnit === \"km\" ? \"k\" : \"m\";\n                                        const swimSpeedUnit = activityUnit === \"km\" ? \"100m\" : \"100y\";\n                                        return (\n                                            <tr>\n                                                <td>{row.date}</td>\n                                                <td>{row.activity}</td>\n                                                <td>{activityUnit === \"km\" ?\n                                                    row.distance + (currentActivityType === \"swim\" ? \"m\" : \" km\") :\n                                                    row.distanceMile + \" miles\"}\n                                                </td>\n                                                <td>\n                                                    {activityUnit === \"km\" ? row.averageSpeed : row.averageSpeedMile}\n                                                    {\n                                                        currentActivityType === \"cycle\" ?\n                                                            speedUnit + \"ph\" :\n                                                            \"min/\" + (currentActivityType === \"run\" ?\n                                                                singleUnit :\n                                                                swimSpeedUnit)\n                                                    }\n                                                </td>\n                                                <td>{row.movingTime} min</td>\n                                                {\n                                                    currentActivityType !== \"swim\" ?\n                                                    <td>{row.elevationGain} m</td> : null\n                                                }\n                                            </tr>\n                                        )\n                                    })}\n                                </tbody>\n                            </table>\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{currentUser} is yet to {currentActivityType}</h6>\n                    }\n                </div>\n            );\n        }\n    };\n\n    getSortedCurrentUserRows() {\n        const { currentUserCurrentActivityData } = this.props\n        let userActivity = currentUserCurrentActivityData ? [...currentUserCurrentActivityData] : [];\n        const { sort } = this.state;\n\n\n        if (sort.field === \"Date\") {\n            userActivity = [...currentUserCurrentActivityData];\n        } else if (sort.field === \"Distance\") {\n            if (sort.direction) {\n                userActivity = _.orderBy(userActivity, function (o) { return Number(o.distance); }, 'asc');\n            } else {\n                userActivity = _.orderBy(userActivity, function (o) { return Number(o.distance); }, 'desc');\n            }\n        } else if (sort.field === \"Average Speed\") {\n            if (sort.direction) {\n                userActivity = _.orderBy(userActivity, o => { return Number(o.averageSpeed) }, 'asc');\n            } else {\n                userActivity = _.orderBy(userActivity, o => { return Number(o.averageSpeed) }, 'desc');\n            }\n        } else if (sort.field === \"Activity Time\") {\n            if (sort.direction) {\n                userActivity = _.orderBy(userActivity, 'movingTime', 'asc');\n            } else {\n                userActivity = _.orderBy(userActivity, 'movingTime', 'desc');\n            }\n        } else if (sort.field === \"Elevation Gain\") {\n            if (sort.direction) {\n                userActivity = _.orderBy(userActivity, 'elevationGain', 'asc');\n            } else {\n                userActivity = _.orderBy(userActivity, 'elevationGain', 'desc');\n            }\n        }\n\n        return userActivity;\n    }\n\n    render() {\n        const { allRows, activityUnit, setActivityUnit } = this.props;\n\n        const currentURL = window.location.href;\n        const urlArr = currentURL.split('/');\n        const name = urlArr[urlArr.length - 1];\n        const userNames = this.props.userNames;\n        if (userNames.includes(name)) {\n            this.singleSetUser(name);\n        }\n\n        return (\n            <div>\n                <button className={activityUnit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"km\")}>Km</button>\n                <button className={activityUnit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"miles\")}>Miles</button>\n\n                <table className=\"myTable\">\n                    <thead>\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\n                    </thead>\n                    <tbody>\n                        {allRows.map((row, i) => {\n                            return this.getRowsData(row, i)\n                        })}\n                    </tbody>\n                </table>\n\n                {this.detailedRows()}\n            </div>\n        )\n    }\n}\n\nexport default StravaTable;\n","import * as actionTypes from '../actionTypes/users';\n\nexport const fetchUsers = () => ({\n    type: actionTypes.FETCH_USERS,\n});\n\nexport const fetchUsersSuccess = users => ({\n    type: actionTypes.FETCH_USERS_SUCCESS,\n    payload: { users },\n});\n\nexport const fetchUsersFailure = error => ({\n    type: actionTypes.FETCH_USERS_FAILURE,\n    payload: { error },\n});\n\nexport const setCurrentUser = user => ({\n        type: actionTypes.SET_CURRENT_USER,\n        payload: { user },\n});","export const FETCH_USERS = 'FETCH_USERS';\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE';\n\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';","import * as actionTypes from \"../actionTypes/activities\";\n\nexport const fetchActivitiesSuccess = activities => ({\n    type: actionTypes.FETCH_ACTIVITIES_SUCCESS,\n    payload: { activities },\n});\n\nexport const fetchActivitiesFailure = error => ({\n    type: actionTypes.FETCH_ACTIVITIES_FAILURE,\n    payload: { error },\n});\n\nexport const setCurrentActivityType = activityType => ({\n    type: actionTypes.SET_CURRENT_ACTIVITY_TYPE,\n    payload: { activityType },\n});\n\nexport const setActivityUnit = activityUnit => ({\n    type: actionTypes.SET_ACTIVITY_UNIT,\n    payload: { activityUnit },\n})\n\nexport const setSelectedYear = selectedYear => ({\n    type: actionTypes.SET_SELECTED_YEAR,\n    payload: { selectedYear },\n});","export const FETCH_ACTIVITIES_SUCCESS = 'FETCH_ACTIVITIES_SUCCESS';\nexport const FETCH_ACTIVITIES_FAILURE = 'FETCH_ACTIVITIES_FAILURE';\n\nexport const SET_CURRENT_ACTIVITY_TYPE = 'SET_CURRENT_ACTIVITY_TYPE';\nexport const SET_ACTIVITY_UNIT = 'SET_ACTIVITY_UNIT';\nexport const SET_SELECTED_YEAR = 'SET_SELECTED_YEAR';","import { connect } from 'react-redux';\nimport StravaTable from \"../components/StravaTable/StravaTable\";\nimport {selectCurrentUser, selectUserNames} from \"../store/selectors/users\";\nimport {\n    selectActivityUnit,\n    selectCurrentActivityType,\n    selectActivities,\n    selectUserSpecificActivity\n} from \"../store/selectors/activities\";\nimport * as actions from '../store/actions';\n\nconst mapStateToProps = state => ({\n    allRows: selectActivities(state),\n    currentUserCurrentActivityData: selectUserSpecificActivity(state),\n    userNames: selectUserNames(state),\n    currentUser: selectCurrentUser(state),\n    currentActivityType: selectCurrentActivityType(state),\n    activityUnit: selectActivityUnit(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setCurrentUser: user => dispatch(actions.setCurrentUser(user)),\n    setCurrentActivityType: activityType => dispatch(actions.setCurrentActivityType(activityType)),\n    setActivityUnit: activityUnit => dispatch(actions.setActivityUnit(activityUnit)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StravaTable);","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {isMobile} from 'react-device-detect';\nimport './YearTable-style.css';\nimport StravaChart from \"../../containers/StravaChart\";\nimport {COMPETITION_DISTANCE, DATE, THIS_MONTH} from \"../../utils/consts\";\n\nclass YearTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tableHead: [\n                'Name',\n                'No. Runs',\n                'Run Distance',\n                'No. Cycles',\n                'Cycle Distance',\n                'No. Swims',\n                'Swim Distance',\n                'Total Complete',\n            ],\n            tableHeadSecond: [\n                'Date',\n                'Activity',\n                'Distance',\n                'Average Speed',\n                'Activity Time',\n                'Elevation Gain',\n            ],\n            tableHeadSwim: [\n                'Date',\n                'Activity',\n                'Distance',\n                'Average Speed',\n                'Activity Time',\n            ],\n        };\n        this.handleYearChange = this.handleYearChange.bind(this)\n    }\n\n    handleYearChange(event) {\n        let { setSelectedYear } = this.props;\n        const selectedValue = event.target.value;\n        setSelectedYear(selectedValue);\n    };\n\n    getHeader(headers) {\n        return headers.map((header) => {\n            return <th className={isMobile ? \"myTableHeadersMobile\" : \"myTableHeaders\"}>{header}</th>\n        });\n    }\n\n    singleSetUser(user) {\n        const { currentUser, setCurrentUser } = this.props;\n\n        if (user !== currentUser) {\n            setCurrentUser(user);\n        }\n    }\n\n    setUser(selectedUser) {\n        const { currentUser, setCurrentUser } = this.props;\n        const currentURL = window.location.href;\n        const urlArr = currentURL.split('/');\n        const name = urlArr[urlArr.length - 1];\n        const userNames = this.props.userNames;\n        if (userNames.includes(name) && (name !== selectedUser)) {\n            window.location = window.location.href.replace(name, '');\n        }\n\n        const athlete = currentUser === selectedUser ? \"\" : selectedUser;\n\n        setCurrentUser(athlete);\n    }\n\n    getRowsData(row, i) {\n        const { currentUser, activityUnit } = this.props;\n        const name = row.name;\n        const runDistance = isMobile ? parseFloat(row.runDistance).toFixed(1) : row.runDistance;\n        const runDistanceMile = isMobile ? parseFloat(row.runDistanceMile).toFixed(1) : row.runDistanceMile;\n        const cycleDistance = isMobile ? parseFloat(row.bikeDistance).toFixed(1) : row.bikeDistance;\n        const cycleDistanceMile = isMobile ? parseFloat(row.bikeDistanceMile).toFixed(1) : row.bikeDistanceMile;\n        const swimDistance = isMobile ? parseFloat(row.swimDistance).toFixed(1) : row.swimDistance;\n        const swimDistanceMile = isMobile ? parseFloat(row.swimDistanceMile).toFixed(1) : row.swimDistanceMile;\n        const percentage = row.totalPercentage;\n\n        return (\n            <tr className={currentUser === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\n                {percentage >= 100 ?\n                    <td key={i} className=\"myTableContents-complete\">{name} (completed)</td>\n                    : <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/strava-competition/${name}`}>{name}</Link></td>\n                }\n                <td key={i} className=\"myTableContents\">{row.runQuantity}</td>\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? runDistance + \"km\" : runDistanceMile + \"miles\"}</td>\n                <td key={i} className=\"myTableContents\">{row.bikeQuantity}</td>\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? cycleDistance + \"km\" : cycleDistanceMile + \"miles\"}</td>\n                <td key={i} className=\"myTableContents\">{row.swimQuantity}</td>\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? swimDistance + \"km\" : swimDistanceMile + \"miles\"}</td>\n                <td key={i} className=\"myTableContents\">{percentage.toFixed(2)}%</td>\n            </tr>\n        )\n    }\n\n    detailedRows() {\n        const { currentUser, currentActivityType, setCurrentActivityType, activityUnit, formattedUserSpecificActivityForCurrentYear, selectedYear } = this.props;\n        const currentYear = new Date().getFullYear();\n\n        if (currentUser === \"\") {\n            return <br />;\n        } else {\n            return (\n                <div>\n                    <button className={currentActivityType === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"run\")}>Run</button>\n                    <button className={currentActivityType === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"cycle\")}>Cycle</button>\n                    <button className={currentActivityType === \"swim\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"swim\")}>Swim</button>\n\n                    {formattedUserSpecificActivityForCurrentYear.length > 0 ?\n                        (<div>\n                            <StravaChart currentYear={true} />\n\n                            <table className=\"myTableTwo\">\n                                <thead>\n                                <tr>{this.getHeader(this.state.tableHeadSecond)}</tr>\n                                </thead>\n                                <tbody>\n                                {formattedUserSpecificActivityForCurrentYear.map(row => {\n                                    const singleUnit = activityUnit === \"km\" ? \"km\" : \"mile\";\n                                    const speedUnit = activityUnit === \"km\" ? \"k\" : \"m\";\n                                    const swimSpeedUnit = activityUnit === \"km\" ? \"100m\" : \"100y\";\n                                    return (\n                                        <tr>\n                                            <td>{row.date}</td>\n                                            <td>{row.activity}</td>\n                                            <td>{activityUnit === \"km\" ?\n                                                    row.distance + (currentActivityType === \"swim\" ? \"m\" : \" km\") :\n                                                    row.distanceMile + \" miles\"}\n                                            </td>\n                                            <td>{activityUnit === \"km\" ? row.averageSpeed : row.averageSpeedMile}\n                                                {\n                                                    currentActivityType === \"cycle\" ?\n                                                        speedUnit + \"ph\" :\n                                                        \"min/\" + (currentActivityType === \"run\" ?\n                                                            singleUnit :\n                                                            swimSpeedUnit)\n                                                }\n                                            </td>\n                                            <td>{row.movingTime} min</td>\n                                            <td>{row.elevationGain} m</td>\n                                        </tr>\n                                    )\n                                })}\n                                </tbody>\n                            </table>\n                        </div>) : currentYear === selectedYear ?\n                                    <h6 style={{paddingTop: '20px'}}>{currentUser} is yet to {currentActivityType} this year</h6> :\n                                    <h6 style={{paddingTop: '20px'}}>{currentUser} did not {currentActivityType} in {selectedYear}</h6>\n\n                    }\n                </div>\n            );\n        }\n    }\n\n    render() {\n        let { allRows, activityUnit, setActivityUnit, selectedYear, earliestYear } = this.props;\n        const monthIndex = DATE.getMonth() + 1;\n        const currentYear = new Date().getFullYear();\n\n        const currentURL = window.location.href;\n        const urlArr = currentURL.split('/');\n        const name = urlArr[urlArr.length - 1];\n        const userNames = this.props.userNames;\n        if (userNames.includes(name)) {\n            this.singleSetUser(name);\n        }\n\n        return (\n            <div>\n                <select value={selectedYear} onChange={this.handleYearChange}>\n                    {Array.from({ length: currentYear - earliestYear + 1 }, (_, index) => {\n                      const year = currentYear - index;\n                      return <option key={year} value={year}>{year}</option>;\n                    })}\n                </select>\n                <br/>\n                {\n                    (selectedYear == currentYear) ?\n                        <h4>Jan - {THIS_MONTH} Triathlon</h4>\n                    :\n                        <h4>{selectedYear} Triathlon</h4>\n                }\n                <h6>\n                    Run {COMPETITION_DISTANCE.run * ((selectedYear == currentYear) ? monthIndex : 12)} km,\n                    Cycle {COMPETITION_DISTANCE.cycle * ((selectedYear == currentYear) ? monthIndex : 12)} km &\n                    Swim {COMPETITION_DISTANCE.swim * ((selectedYear == currentYear) ? monthIndex : 12)} km\n                </h6>\n                <p style={{fontSize: \"11px\", padding: 0}}>\n                    ({COMPETITION_DISTANCE.run} km, {COMPETITION_DISTANCE.cycle} km & {COMPETITION_DISTANCE.swim} km a month)\n                </p>\n                <button className={activityUnit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"km\")}>Km</button>\n                <button className={activityUnit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"miles\")}>Miles</button>\n\n                <table className=\"myTable\">\n                    <thead>\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\n                    </thead>\n                    <tbody>\n                        {allRows.map((row, i) => {\n                            return this.getRowsData(row, i)\n                        })}\n                    </tbody>\n                </table>\n\n                {this.detailedRows()}\n            </div>\n        )\n    }\n}\n\nexport default YearTable;\n","import { connect } from 'react-redux';\nimport YearTable from \"../components/YearTable/YearTable\";\nimport {selectCurrentUser, selectUserNames} from \"../store/selectors/users\";\nimport {\n    selectActivityUnit,\n    selectCurrentActivityType,\n    selectFormattedActivitiesForCurrentYearWithPercentage,\n    selectFormattedUserSpecificActivityCurrentYear,\n    selectEarliestYearForUserActivity,\n    selectSelectedYear,\n} from \"../store/selectors/activities\";\nimport * as actions from \"../store/actions\";\n\nconst mapStateToProps = state => ({\n    allRows: selectFormattedActivitiesForCurrentYearWithPercentage(state),\n    formattedUserSpecificActivityForCurrentYear: selectFormattedUserSpecificActivityCurrentYear(state),\n    userNames: selectUserNames(state),\n    currentUser: selectCurrentUser(state),\n    currentActivityType: selectCurrentActivityType(state),\n    activityUnit: selectActivityUnit(state),\n    selectedYear: selectSelectedYear(state),\n    earliestYear: selectEarliestYearForUserActivity(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setCurrentUser: user => dispatch(actions.setCurrentUser(user)),\n    setCurrentActivityType: activityType => dispatch(actions.setCurrentActivityType(activityType)),\n    setActivityUnit: activityUnit => dispatch(actions.setActivityUnit(activityUnit)),\n    setSelectedYear: year => dispatch(actions.setSelectedYear(year)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(YearTable);","import React, {Component} from 'react';\nimport { HashRouter as Router, Link, Route, Redirect } from \"react-router-dom\";\nimport {isMobile, mobileVendor, mobileModel} from 'react-device-detect';\nimport {publicIpv4} from 'public-ip';\nimport StravaTable from \"../../containers/StravaTable\";\nimport YearTable from \"../../containers/YearTable\";\nimport './Home-style.css';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            alerted: false,\n        };\n    }\n\n    async notifyPhone() {\n        const ipv4 = await publicIpv4();\n        const platform = isMobile ? `${mobileVendor} ${mobileModel}` : navigator.platform;\n\n        // const url = 'https://raj.bariah.com:2010/location?ipAddress=' + ipv4 + \"&device=\" + platform + \"&site=Strava\";\n        const url = 'https://maker.ifttt.com/trigger/site_visited/with/key/b_Yu8_AU_JIDYDYR_WXF5-?value1=' + ipv4 + \"&value2=\" + platform + \"&value3=Strava\";\n        if(!this.state.alerted) {\n            fetch(url, {\n                method: 'post'\n            }).catch(e => console.log(e));\n            this.setState({\n                ...this.state,\n                alerted: true,\n            });\n        }\n    }\n\n    componentDidMount() {\n        const { fetchUsers } = this.props;\n        fetchUsers();\n    }\n\n    render() {\n        this.notifyPhone();\n\n        return (\n            <div>\n                <Router basename={process.env.PUBLIC_URL}>\n                    <h2 className=\"myHeading\"><a className=\"rajbar-link\" href=\"https://raj.bar\">raj.Bar</a> <Link className=\"rajbar-link\" to={'/home'}>/</Link> <Link className=\"rajbar-link\" to={'/strava-competition'}>strava</Link></h2>\n                    <Route exact path={\"/\"}>\n                        <Redirect to={\"/home\"} />\n                    </Route>\n                    <Route path={'/home'} render={() => (\n                        <StravaTable />\n                    )}/>\n\n                    <Route path={'/strava-competition'} render={() => (\n                        <YearTable />\n                    )} />\n                </Router>\n            </div>\n        )\n    }\n}\n\nexport default Home;\n","import { connect } from 'react-redux';\nimport Home from '../components/Home/Home';\nimport * as actions from \"../store/actions\";\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchUsers: () => dispatch(actions.fetchUsers()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, {Component} from 'react';\nimport './App.css'\nimport Home from './containers/Home';\n\nclass App extends Component {\n  render () {\n    return (\n        <div className=\"App\">\n          <Home />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","import * as actionTypes from '../actionTypes/users';\n\nconst initialState = {\n    users: [],\n    currentUser: \"\",\n    error: null,\n};\n\nconst fetchUsersSuccess = (state, action) => ({\n    ...state,\n    users: action.payload.users,\n});\n\nconst fetchUsersFailure = (state, action) => ({\n    ...state,\n    error: action.payload.error,\n});\n\nconst setCurrentUser = (state, action) => ({\n    ...state,\n    currentUser: action.payload.user,\n});\n\n\nexport default (state = initialState, action) => {\n    switch(action.type) {\n        case actionTypes.FETCH_USERS_SUCCESS:\n            return fetchUsersSuccess(state, action);\n        case actionTypes.FETCH_USERS_FAILURE:\n            return fetchUsersFailure(state, action);\n        case actionTypes.SET_CURRENT_USER:\n            return setCurrentUser(state, action);\n        default:\n            return state;\n    }\n};","import * as actionTypes from '../actionTypes/activities';\n\nconst initialState = {\n    activities: [],\n    currentActivityType: 'run',\n    activityUnit: 'km',\n    error: null,\n    selectedYear: new Date().getFullYear(),\n};\n\nconst fetchActivitiesSuccess = (state, action) => ({\n    ...state,\n    activities: action.payload.activities,\n});\n\nconst fetchActivitiesFailure = (state, action) => ({\n    ...state,\n    error: action.payload.error,\n});\n\nconst setCurrentActivityType = (state, action) => ({\n    ...state,\n    currentActivityType: action.payload.activityType,\n});\n\nconst setActivityUnit = (state, action) => ({\n    ...state,\n    activityUnit: action.payload.activityUnit,\n})\n\nconst setSelectedYear = (state, action) => ({\n    ...state,\n    selectedYear: action.payload.selectedYear,\n});\n\nexport default (state = initialState, action) => {\n    switch(action.type) {\n        case actionTypes.FETCH_ACTIVITIES_SUCCESS:\n            return fetchActivitiesSuccess(state, action);\n        case actionTypes.FETCH_ACTIVITIES_FAILURE:\n            return fetchActivitiesFailure(state, action);\n        case actionTypes.SET_CURRENT_ACTIVITY_TYPE:\n            return setCurrentActivityType(state, action);\n        case actionTypes.SET_ACTIVITY_UNIT:\n            return setActivityUnit(state, action);\n        case actionTypes.SET_SELECTED_YEAR:\n            return setSelectedYear(state, action);\n        default:\n            return state;\n    }\n};","import { combineReducers } from \"redux\";\nimport users from \"./users\";\nimport activities from \"./activities\";\n\nexport const rootReducer = combineReducers({\n    users,\n    activities,\n})\n","import {call, put} from 'redux-saga/effects';\nimport * as actions from '../actions';\n// import {activities} from \"../tmp-data/activities.js\";\n\nconst getActivities = async () => {\n    // const activitiesLink = \"https://raj.bariah.com:2010/strava/activities\";\n    // const activitiesLink = \"https://rajbar.hopto.org:2010/strava/activities\";\n    // const activitiesLink = \"https://api.rajbar.duckdns.org/strava/activities\";\n    const activitiesLink = \"https://api.rajbariah.com/strava/activities\";\n\n    return await fetch(activitiesLink)\n        .then(res => res.json());\n//    return activities;\n}\n\nconst getAllKm = (accumulator, a) => {\n    return Math.round(accumulator + a.distance);\n}\n\nconst findAllSpecificActivity = (activityType, athleteID, activities) => {\n    const activity = [...activities];\n\n    return activity.filter(function (element) {\n        return (element.type === activityType) && (element.athlete.id.toString() === athleteID);\n    });\n}\n\nconst createUserObj = (athleteID, name, activities) => {\n    const mileConversion = 0.6214;\n    const userRun = findAllSpecificActivity(\"Run\", athleteID, activities);\n    const userTotalRan = userRun.length > 0 ? (userRun.reduce(getAllKm,0) / 1000) : 0;\n    const userBike = findAllSpecificActivity(\"Ride\", athleteID, activities);\n    const userTotalBike = userBike.length > 0 ? (userBike.reduce(getAllKm,0) / 1000) : 0;\n    const userSwim = findAllSpecificActivity(\"Swim\", athleteID, activities);\n    const userTotalSwim = userSwim.length > 0 ? (userSwim.reduce(getAllKm,0) / 1000) : 0;\n    const userObj = {\n        name: name,\n        runQuantity: userRun.length,\n        runDistance: userTotalRan,\n        runDistanceMile: (userTotalRan * mileConversion).toFixed(2),\n        bikeQuantity: userBike.length,\n        bikeDistance: userTotalBike,\n        bikeDistanceMile: (userTotalBike * mileConversion).toFixed(2),\n        swimQuantity: userSwim.length,\n        swimDistance: userTotalSwim,\n        swimDistanceMile: (userTotalSwim * mileConversion).toFixed(2),\n        allRuns: userRun.map((r, i) => {\n            const dist = r.distance / 1000;\n            const time = r.moving_time / 60;\n            const distance = (r.distance / 1000).toFixed(2)\n            const distanceMile = (dist * mileConversion).toFixed(2)\n            const movingTime = (r.moving_time / 60).toFixed(0);\n            const averageSpeed = dist / (time/60);\n            const oneKM = (1 / averageSpeed) * 60;\n            let floor = Math.floor(oneKM);\n            let decimal = (oneKM - floor) * 0.60;\n            if (decimal.toFixed(2) === \"0.60\") {\n                floor += 1;\n                decimal = 0;\n            }\n            const km = (floor + decimal).toFixed(2);\n            const averageSpeedMiles = (dist * mileConversion) / (time/60);\n            const oneMile = (1 / averageSpeedMiles) * 60;\n            let floorMile = Math.floor(oneMile);\n            let decimalMile = (oneMile - floorMile) * 0.60;\n            if (decimal.toFixed(2) === \"0.60\") {\n                floorMile += 1;\n                decimalMile = 0;\n            }\n            const mile = (floorMile + decimalMile).toFixed(2);\n            const day = r.start_date.substr(8,2);\n            const month = r.start_date.substr(5,2);\n            const year = r.start_date.substr(2, 2)\n            const date = day + \"/\" + month + \"/\" + year;\n            const elevationGain = r.total_elevation_gain;\n            return {date: date, startDate: r.start_date, activity: \"Run\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: km, averageSpeedMile: mile, elevationGain: elevationGain};\n        }),\n        allCycles: userBike.map((r, i) => {\n            const distance = (r.distance / 1000).toFixed(2);\n            const distanceMile = (distance * mileConversion).toFixed(2);\n            const movingTime = (r.moving_time / 60).toFixed(0);\n            const averageSpeed = (distance / (movingTime/60)).toFixed(1);\n            const averageSpeedMile = (averageSpeed * mileConversion).toFixed(1);\n            const day = r.start_date.substr(8,2);\n            const month = r.start_date.substr(5,2);\n            const year = r.start_date.substr(2, 2)\n            const date = day + \"/\" + month + \"/\" + year;\n            const elevationGain = r.total_elevation_gain;\n            return {date: date, startDate: r.start_date, activity: \"Cycle\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: averageSpeed, averageSpeedMile: averageSpeedMile, elevationGain: elevationGain};\n        }),\n        allSwims: userSwim.map((r, i) => {\n            const distKm = r.distance / 100;\n            const dist = r.distance / 1000;\n            const time = r.moving_time / 60;\n            const distance = (r.distance)\n            const distanceMile = (dist * mileConversion).toFixed(2)\n            const movingTime = (r.moving_time / 60).toFixed(0);\n            const averageSpeed = distKm / (time/60);\n            const oneKM = (1 / averageSpeed) * 60;\n            let floor = Math.floor(oneKM);\n            let decimal = (oneKM - floor) * 0.60;\n            if (decimal.toFixed(2) === \"0.60\") {\n                floor += 1;\n                decimal = 0;\n            }\n            const hundredMeter = (floor + decimal).toFixed(2);\n            const averageSpeedMiles = (dist * mileConversion) / (time/60);\n            const oneMile = (1 / averageSpeedMiles) * 60;\n            const oneYard = (100 / (averageSpeedMiles * 1760)) * 60;\n            let floorMile = Math.floor(oneYard);\n            let decimalMile = (oneYard - floorMile) * 0.60;\n            if (decimalMile.toFixed(2) === \"0.60\") {\n                floorMile += 1;\n                decimalMile = 0;\n            }\n            const mile = (floorMile + decimalMile).toFixed(2);\n            const day = r.start_date.substr(8,2);\n            const month = r.start_date.substr(5,2);\n            const year = r.start_date.substr(2, 2)\n            const date = day + \"/\" + month + \"/\" + year;\n            return {date: date, startDate: r.start_date, activity: \"Swim\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: hundredMeter, averageSpeedMile: mile};\n        }),\n    };\n\n    return userObj;\n};\n\nexport function* fetchActivitiesSaga(users) {\n    try {\n        const activities = yield call(getActivities);\n\n        const formattedActivities = users.map(user => {\n            return createUserObj(user.athleteID, user.name, activities)\n        });\n\n        yield put(actions.fetchActivitiesSuccess(formattedActivities));\n    } catch (error) {\n        yield put(actions.fetchActivitiesFailure(error));\n    }\n}\n","import {call, put} from 'redux-saga/effects';\nimport * as actions from '../actions';\nimport {fetchActivitiesSaga} from \"./activitiesSagas\";\n// import {users} from \"../tmp-data/users.js\";\n\nconst getUsers = async () => {\n    // const userLink = \"https://raj.bariah.com:2010/strava/users\";\n    // const userLink = \"https://rajbar.hopto.org:2010/strava/users\";\n    // const userLink = \"https://api.rajbar.duckdns.org/strava/users\";\n    const userLink = \"https://api.rajbariah.com/strava/users\";\n    return await fetch(userLink)\n        .then(res => res.json());\n//    return users;\n}\n\nexport function* fetchUsersSaga() {\n    try {\n        const users = yield call(getUsers)\n        yield put(actions.fetchUsersSuccess(users));\n        yield call(fetchActivitiesSaga, users);\n    } catch (error) {\n        yield put(actions.fetchUsersFailure(error));\n    }\n}\n","import { takeEvery } from 'redux-saga/effects';\nimport * as actionTypes from '../actionTypes';\nimport * as usersSagas from './usersSagas';\n\nexport function* usersWatcher() {\n    yield takeEvery(actionTypes.FETCH_USERS, usersSagas.fetchUsersSaga);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { configureStore } from './store/configureStore';\nimport { Provider } from 'react-redux';\nimport { initialState } from './store/initialState';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore(initialState);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from 'redux-saga';\nimport { rootReducer } from \"./reducers\";\nimport * as sagaWatchers from './sagas';\n\nexport function configureStore(initialState) {\n    const sagaMiddleware = createSagaMiddleware();\n\n    const enhancer = compose(\n        applyMiddleware(sagaMiddleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__\n            ? window.__REDUX_DEVTOOLS_EXTENSION__({ name: 'strava-stats' })\n            : f => f,\n    )\n\n    const store = createStore(rootReducer, initialState, enhancer)\n\n    Object.keys(sagaWatchers).forEach(watcher => {\n        sagaMiddleware.run(sagaWatchers[watcher])\n    })\n\n    return store;\n}\n","export const initialState = {};\n"],"sourceRoot":""}