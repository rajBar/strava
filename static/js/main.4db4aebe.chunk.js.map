{"version":3,"sources":["components/StravaChart/StravaChart.js","components/StravaTable/StravaTable.js","components/MonthTable/MonthTable.js","components/Home/Home.js","containers/App.js","serviceWorker.js","index.js"],"names":["StravaChart","props","state","runSegments","cycleSegments","activity","unit","title","hAxis","vAxis","gridlines","units","hours","format","minutes","seconds","bubble","textStyle","fontSize","speed","speedSplit","toString","split","minute","second","Date","parseInt","date","dateSplit","day","month","year","distance","newDistance","parseFloat","segment","this","ceilingFive","Math","ceil","rows","data","whatSpeed","header","push","_","sortBy","o","forEach","row","averageSpeed","averageSpeedMile","distanceMile","unitRange","getSegK","getThreeM","formatSpeed","dataRow","getDate","orderedRows","concat","reverse","parseData","options","parseOptions","className","chartType","width","height","Component","StravaTable","tableHead","tableHeadSecond","currentActivity","user","sort","field","direction","headers","sorter","map","i","onClick","setSort","currentSort","newDirection","console","log","setState","selectedUser","athlete","name","runNo","runQuantity","runDistance","runDistanceMile","cycleNo","bikeQuantity","cycleDistance","bikeDistance","cycleDistanceMile","bikeDistanceMile","percentage","totalPercent","setUser","key","userRows","length","allRuns","allCycles","setActivity","getHeader","singleUnit","speedUnit","movingTime","elevationGain","style","paddingTop","allRows","orderBy","setUnit","getRowsData","detailedRows","MonthTable","totalPercentage","toFixed","thisMonth","competitionDistance","run","cycle","Home","activities","users","alerted","competition","competitionSetter","bind","oldStatus","publicIp","require","v4","ipv4","url","navigator","platform","fetch","method","activitiesLink","then","res","json","newActivities","setUsers","fetchData","athleteID","reAuthFunc","activityType","all","filter","element","type","id","monthData","a","activityDate","start_date","getFullYear","getMonth","accumulator","round","userRun","findAllSpecificActivity","userTotalRan","reduce","getAllKm","userBike","userTotalBike","r","dist","time","moving_time","oneKM","floor","km","oneMile","floorMile","mile","substr","total_elevation_gain","competitionRun","competitionCycle","runPercentageCapped","cyclePercentageCapped","notifyPhone","createUserObj","lastMonthPercentage","calculateTotalPercent","orderedLastMonth","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mZA8HeA,E,kDAzHX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAa,IACbC,cAAe,GAJJ,E,yDAQNC,EAAUC,GAGnB,MAAO,CACHC,MAAO,YAAcF,EAAW,IAChCG,MAAO,CACHD,MAAO,QAEXE,MAAO,CACHF,MAPmB,QAAbF,EAAqB,OAASC,GADlB,OAATA,EAAgB,IAAM,KACuB,KAQtDI,UAAW,CACPC,MAAO,CACHC,MAAO,CAACC,OAAQ,CAAC,KACjBC,QAAS,CAACD,OAAQ,CAAC,UACnBE,QAAS,CAACF,OAAQ,CAAC,aAI/BG,OAAQ,CAAEC,UAAW,CAAEC,SAAU,Q,kCAI7BC,GACR,IAAMC,EAAaD,EAAME,WAAWC,MAAM,KACpCC,EAASH,EAAW,GACpBI,EAASJ,EAAW,GAI1B,OAFgB,IAAIK,KAAK,IAAM,EAAG,EAAG,EAAGC,SAASH,GAASG,SAASF,GAAS,K,8BAKxEG,GACJ,IAAMC,EAAYD,EAAKL,MAAM,KACvBO,EAAMH,SAASE,EAAU,IACzBE,EAAQJ,SAASE,EAAU,IAAM,EACjCG,EAAOL,SAASE,EAAU,IAAM,IAItC,OAFgB,IAAIH,KAAKM,EAAMD,EAAOD,K,8BAKlCG,EAAU3B,GACd,IAAM4B,EAAcC,WAAWF,GAEzBG,EAAuB,QAAb9B,EAAqB+B,KAAKlC,MAAMC,YAAciC,KAAKlC,MAAME,cAEnEiC,EAAcC,KAAKC,KAAKN,EAAcE,GAAWA,EAKvD,OAJkBE,EAAcF,EAEH,OAASE,EAAc,M,gCAK9CL,GACN,IAAMC,EAAcC,WAAWF,GAEzBK,EAA2C,EAA7BC,KAAKC,KAAKN,EAAc,GAK5C,OAJkBI,EAAc,EAEH,OAASA,EAAc,M,gCAK9CG,EAAMnC,EAAUC,GAAO,IAAD,OACtBmC,EAAO,GACPC,EAAyB,QAAbrC,EAAqB,MAAQ,eACzC8B,EAAuB,QAAb9B,EAAqB+B,KAAKlC,MAAMC,YAAc,IAAMiC,KAAKlC,MAAME,cAAgB,IAEzFuC,EAAS,CAAC,KAAM,OAAQD,EADH,OAATpC,EAAgB6B,EAAU,KACQ,YAiBpD,OAhBAM,EAAKG,KAAKD,GAEUE,IAAEC,OAAON,GAAM,SAAAO,GAAC,OAAIb,WAAWa,EAAEf,aAEzCgB,SAAQ,SAACC,GACjB,IAAMC,EAAwB,OAAT5C,EAAgB2C,EAAIC,aAAeD,EAAIE,iBACtDnB,EAAoB,OAAT1B,EAAgB2C,EAAIjB,SAAWiB,EAAIG,aAC9CC,EAAqB,OAAT/C,EAAgB,EAAKgD,QAAQtB,EAAU3B,GAAY,EAAKkD,UAAUvB,GAChFb,EAAQe,WAAWgB,GACN,QAAb7C,IACAc,EAAQ,EAAKqC,YAAYN,IAE7B,IAAMO,EAAS,CAACP,EAAc,EAAKQ,QAAQT,EAAItB,MAAOR,EAAOkC,EAAWnB,WAAWF,IACnFS,EAAKG,KAAKa,MAGPhB,I,+BAGD,IAAD,EAC0BL,KAAKnC,MAA7BI,EADF,EACEA,SAAUmC,EADZ,EACYA,KAAMlC,EADlB,EACkBA,KACjBqD,EAAc,GAAGC,OAAOpB,GAAMqB,UAC9BpB,EAAOL,KAAK0B,UAAUH,EAAatD,EAAUC,GAE7CyD,EAAU1D,EAAW+B,KAAK4B,aAAa3D,EAAUC,GAAQ,GAE/D,OACI,yBAAK2D,UAAU,OACX,kBAAC,IAAD,CACIC,UAAU,cACVC,MAAM,OACNC,OAAO,QACP3B,KAAMA,EACNsB,QAASA,S,GAnHHM,aC2NXC,E,kDAzNX,WAAYrE,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTqE,UAAW,CACP,OACA,WACA,eACA,aACA,kBAEJC,gBAAiB,CACb,OACA,WACA,WACA,gBACA,gBACA,kBAEJC,gBAAiB,MACjBC,KAAM,GACNpE,KAAM,KACNqE,KAAM,CACFC,MAAO,OACPC,WAAW,IAvBJ,E,sDA4BTC,EAASC,GAAS,IAAD,OACvB,OAAOD,EAAQE,KAAI,SAACrC,EAAQsC,GACxB,OAAIF,EACO,wBAAId,UAAU,iBAAiBiB,QAAS,kBAAM,EAAKC,QAAQxC,KAAUA,GAErE,wBAAIsB,UAAU,kBAAkBtB,Q,8BAK3CiC,GACJ,IAAMQ,EAAchD,KAAKlC,MAAMyE,KACzBU,EAAeT,IAAUQ,EAAYR,QAASQ,EAAYP,UAEhES,QAAQC,IAAIX,GAEZxC,KAAKoD,SAAL,2BACOpD,KAAKlC,OADZ,IAEIyE,KAAM,CACFC,MAAOA,EACPC,UAAWQ,Q,8BAKfI,GACJ,IACMC,EADiBtD,KAAKlC,MAAMwE,OACCe,EAAe,GAAKA,EAEvDrD,KAAKoD,SAAL,2BACOpD,KAAKlC,OADZ,IAEIwE,KAAMgB,O,kCAIFzC,EAAKgC,GAAI,IAAD,OACVP,EAAOtC,KAAKlC,MAAMwE,KAClBiB,EAAO1C,EAAI0C,KACXC,EAAQ3C,EAAI4C,YACZC,EAAc7C,EAAI6C,YAClBC,EAAkB9C,EAAI8C,gBACtBC,EAAU/C,EAAIgD,aACdC,EAAgBjD,EAAIkD,aACpBC,EAAoBnD,EAAIoD,iBACxBC,EAAarD,EAAIsD,aACjBjG,EAAO8B,KAAKlC,MAAMI,KAExB,OACI,wBAAI2D,UAAWS,IAASiB,EAAO,cAAgB,gBAAiBT,QAAS,kBAAM,EAAKsB,QAAQb,KACxF,wBAAIc,IAAKxB,EAAGhB,UAAU,mBAAmB0B,EAAzC,IAA8D,KAAdW,EAAoB,cAAgB,IACpF,wBAAIG,IAAKxB,EAAGhB,UAAU,mBAAmB2B,GACzC,wBAAIa,IAAKxB,EAAGhB,UAAU,mBAA4B,OAAT3D,EAAgBwF,EAAc,KAAOC,EAAkB,SAChG,wBAAIU,IAAKxB,EAAGhB,UAAU,mBAAmB+B,GACzC,wBAAIS,IAAKxB,EAAGhB,UAAU,mBAA4B,OAAT3D,EAAgB4F,EAAgB,KAAOE,EAAoB,Y,kCAKpG/F,GACR+B,KAAKoD,SAAL,2BACOpD,KAAKlC,OADZ,IAEIuE,gBAAiBpE,O,8BAIjBC,GACJ8B,KAAKoD,SAAL,2BACOpD,KAAKlC,OADZ,IAEII,KAAMA,O,mCAIDkC,GAIT,IAJgB,IAGZkE,EAHW,OACThC,EAAOtC,KAAKlC,MAAMwE,KAGfO,EAAE,EAAGA,EAAIzC,EAAKmE,OAAQ1B,IACvBzC,EAAKyC,GAAGU,MAAQjB,IAChBgC,EAAWlE,EAAKyC,IAIxB,GAAa,KAATP,EACA,OAAO,6BAEP,IAAMlC,EAAsC,QAA/BJ,KAAKlC,MAAMuE,gBAA4BiC,EAASE,QAAUF,EAASG,UAChF,OACI,6BACI,4BAAQ5C,UAA0C,QAA/B7B,KAAKlC,MAAMuE,gBAA4B,iBAAmB,oBAAqBS,QAAS,kBAAM,EAAK4B,YAAY,SAAlI,OACA,4BAAQ7C,UAA0C,UAA/B7B,KAAKlC,MAAMuE,gBAA8B,iBAAmB,oBAAqBS,QAAS,kBAAM,EAAK4B,YAAY,WAApI,SAGCtE,EAAKmE,OAAS,EACV,6BACG,kBAAC,EAAD,CAAatG,SAAU+B,KAAKlC,MAAMuE,gBAAiBjC,KAAMA,EAAMlC,KAAM8B,KAAKlC,MAAMI,OAEhF,2BAAO2D,UAAU,cACb,+BACI,4BAAK7B,KAAK2E,UAAU3E,KAAKlC,MAAMsE,gBAAiB,sBAEpD,+BACKhC,EAAKwC,KAAI,SAAA/B,GACN,IAAM3C,EAAO,EAAKJ,MAAMI,KAClB0G,EAAsB,OAAT1G,EAAgB,KAAO,OACpC2G,EAAqB,OAAT3G,EAAgB,IAAM,IACxC,OACI,4BACI,4BAAK2C,EAAItB,MACT,4BAAKsB,EAAI5C,UACT,4BAAc,OAATC,EAAgB2C,EAAIjB,SAAW,MAAQiB,EAAIG,aAAe,UAC/D,4BAAc,OAAT9C,EAAgB2C,EAAIC,aAAeD,EAAIE,iBAA5C,IAA8F,QAA/B,EAAKjD,MAAMuE,gBAA4B,OAASuC,EAAaC,EAAY,MACxI,4BAAKhE,EAAIiE,WAAT,QACA,4BAAKjE,EAAIkE,cAAT,aAMd,wBAAIC,MAAO,CAACC,WAAY,SAAUjF,KAAKlC,MAAMwE,KAA7C,cAA8DtC,KAAKlC,MAAMuE,oB,+BAO7F,IAAD,SAC0BrC,KAAKnC,MAA9BqH,EADD,EACCA,QAAS3D,EADV,EACUA,YACXgB,EAAOvC,KAAKlC,MAAMyE,KAwCtB,OAtCA2C,EAAQtE,SAAQ,SAAAC,GACO,SAAf0B,EAAKC,MACL0C,EAAO,YAAO3D,GACQ,aAAfgB,EAAKC,MACRD,EAAKE,WACL5B,EAAI2D,QAAU/D,IAAE0E,QAAQtE,EAAI2D,QAAS,WAAY,OACjD3D,EAAI4D,UAAYhE,IAAE0E,QAAQtE,EAAI4D,UAAW,WAAY,SAErD5D,EAAI2D,QAAU/D,IAAE0E,QAAQtE,EAAI2D,QAAS,WAAY,QACjD3D,EAAI4D,UAAYhE,IAAE0E,QAAQtE,EAAI4D,UAAW,WAAY,SAEnC,kBAAflC,EAAKC,MACRD,EAAKE,WACL5B,EAAI2D,QAAU/D,IAAE0E,QAAQtE,EAAI2D,QAAS,eAAgB,OACrD3D,EAAI4D,UAAYhE,IAAE0E,QAAQtE,EAAI4D,UAAW,eAAgB,SAEzD5D,EAAI2D,QAAU/D,IAAE0E,QAAQtE,EAAI2D,QAAS,eAAgB,QACrD3D,EAAI4D,UAAYhE,IAAE0E,QAAQtE,EAAI4D,UAAW,eAAgB,SAEvC,kBAAflC,EAAKC,MACRD,EAAKE,WACL5B,EAAI2D,QAAU/D,IAAE0E,QAAQtE,EAAI2D,QAAS,aAAc,OACnD3D,EAAI4D,UAAYhE,IAAE0E,QAAQtE,EAAI4D,UAAW,aAAc,SAEvD5D,EAAI2D,QAAU/D,IAAE0E,QAAQtE,EAAI2D,QAAS,aAAc,QACnD3D,EAAI4D,UAAYhE,IAAE0E,QAAQtE,EAAI4D,UAAW,aAAc,SAErC,mBAAflC,EAAKC,QACRD,EAAKE,WACL5B,EAAI2D,QAAU/D,IAAE0E,QAAQtE,EAAI2D,QAAS,gBAAiB,OACtD3D,EAAI4D,UAAYhE,IAAE0E,QAAQtE,EAAI4D,UAAW,gBAAiB,SAE1D5D,EAAI2D,QAAU/D,IAAE0E,QAAQtE,EAAI2D,QAAS,gBAAiB,QACtD3D,EAAI4D,UAAYhE,IAAE0E,QAAQtE,EAAI4D,UAAW,gBAAiB,aAMlE,6BACI,4BAAQ5C,UAA+B,OAApB7B,KAAKlC,MAAMI,KAAgB,iBAAmB,oBAAqB4E,QAAS,kBAAM,EAAKsC,QAAQ,QAAlH,MACA,4BAAQvD,UAA+B,UAApB7B,KAAKlC,MAAMI,KAAmB,iBAAmB,oBAAqB4E,QAAS,kBAAM,EAAKsC,QAAQ,WAArH,SAEA,2BAAOvD,UAAU,WACb,+BACI,4BAAK7B,KAAK2E,UAAU3E,KAAKlC,MAAMqE,aAEnC,+BACK+C,EAAQtC,KAAI,SAAC/B,EAAKgC,GACf,OAAO,EAAKwC,YAAYxE,EAAKgC,QAKxC7C,KAAKsF,aAAaJ,Q,GApNTjD,aCiKXsD,G,wDAjKX,WAAY1H,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTqE,UAAW,CACP,OACA,WACA,eACA,aACA,iBACA,kBAEJC,gBAAiB,CACb,OACA,WACA,WACA,gBACA,gBACA,kBAEJC,gBAAiB,MACjBC,KAAM,GACNpE,KAAM,MArBK,E,sDAyBTwE,GACN,OAAOA,EAAQE,KAAI,SAACrC,EAAQsC,GACxB,OAAO,wBAAIhB,UAAU,kBAAkBtB,Q,8BAIvC8C,GACJ,IACMC,EADiBtD,KAAKlC,MAAMwE,OACCe,EAAe,GAAKA,EAEvDrD,KAAKoD,SAAL,2BACOpD,KAAKlC,OADZ,IAEIwE,KAAMgB,O,kCAIFzC,EAAKgC,GAAI,IAAD,OACVP,EAAOtC,KAAKlC,MAAMwE,KAClBiB,EAAO1C,EAAI0C,KACXC,EAAQ3C,EAAI4C,YACZC,EAAc7C,EAAI6C,YAClBC,EAAkB9C,EAAI8C,gBACtBC,EAAU/C,EAAIgD,aACdC,EAAgBjD,EAAIkD,aACpBC,EAAoBnD,EAAIoD,iBACxBC,EAAarD,EAAI2E,gBACjBtH,EAAO8B,KAAKlC,MAAMI,KAExB,OACI,wBAAI2D,UAAWS,IAASiB,EAAO,cAAgB,gBAAiBT,QAAS,kBAAM,EAAKsB,QAAQb,KACvFW,GAAc,IACX,wBAAIG,IAAKxB,EAAGhB,UAAU,4BAA4B0B,EAAlD,gBACE,wBAAIc,IAAKxB,EAAGhB,UAAU,mBAAmB0B,GAE/C,wBAAIc,IAAKxB,EAAGhB,UAAU,mBAAmB2B,GACzC,wBAAIa,IAAKxB,EAAGhB,UAAU,mBAA4B,OAAT3D,EAAgBwF,EAAc,KAAOC,EAAkB,SAChG,wBAAIU,IAAKxB,EAAGhB,UAAU,mBAAmB+B,GACzC,wBAAIS,IAAKxB,EAAGhB,UAAU,mBAA4B,OAAT3D,EAAgB4F,EAAgB,KAAOE,EAAoB,SACpG,wBAAIK,IAAKxB,EAAGhB,UAAU,mBAAmBqC,EAAWuB,QAAQ,GAA5D,Q,kCAKAxH,GACR+B,KAAKoD,SAAL,2BACOpD,KAAKlC,OADZ,IAEIuE,gBAAiBpE,O,8BAIjBC,GACJ8B,KAAKoD,SAAL,2BACOpD,KAAKlC,OADZ,IAEII,KAAMA,O,mCAIDkC,GAIT,IAJgB,IAGZkE,EAHW,OACThC,EAAOtC,KAAKlC,MAAMwE,KAGfO,EAAE,EAAGA,EAAIzC,EAAKmE,OAAQ1B,IACvBzC,EAAKyC,GAAGU,MAAQjB,IAChBgC,EAAWlE,EAAKyC,IAIxB,GAAa,KAATP,EACA,OAAO,6BAEP,IAAMlC,EAAsC,QAA/BJ,KAAKlC,MAAMuE,gBAA4BiC,EAASE,QAAUF,EAASG,UAChF,OACI,6BACI,4BAAQ5C,UAA0C,QAA/B7B,KAAKlC,MAAMuE,gBAA4B,iBAAmB,oBAAqBS,QAAS,kBAAM,EAAK4B,YAAY,SAAlI,OACA,4BAAQ7C,UAA0C,UAA/B7B,KAAKlC,MAAMuE,gBAA8B,iBAAmB,oBAAqBS,QAAS,kBAAM,EAAK4B,YAAY,WAApI,SAECtE,EAAKmE,OAAS,EACV,6BACG,kBAAC,EAAD,CAAatG,SAAU+B,KAAKlC,MAAMuE,gBAAiBjC,KAAMA,EAAMlC,KAAM8B,KAAKlC,MAAMI,OAEhF,2BAAO2D,UAAU,cACb,+BACA,4BAAK7B,KAAK2E,UAAU3E,KAAKlC,MAAMsE,mBAE/B,+BACChC,EAAKwC,KAAI,SAAA/B,GACN,IAAM3C,EAAO,EAAKJ,MAAMI,KAClB0G,EAAsB,OAAT1G,EAAgB,KAAO,OACpC2G,EAAqB,OAAT3G,EAAgB,IAAM,IACxC,OACI,4BACI,4BAAK2C,EAAItB,MACT,4BAAKsB,EAAI5C,UACT,4BAAc,OAATC,EAAgB2C,EAAIjB,SAAW,MAAQiB,EAAIG,aAAe,UAC/D,4BAAc,OAAT9C,EAAgB2C,EAAIC,aAAeD,EAAIE,iBAA5C,IAA8F,QAA/B,EAAKjD,MAAMuE,gBAA4B,OAASuC,EAAaC,EAAY,MACxI,4BAAKhE,EAAIiE,WAAT,QACA,4BAAKjE,EAAIkE,cAAT,aAMV,wBAAIC,MAAO,CAACC,WAAY,SAAUjF,KAAKlC,MAAMwE,KAA7C,cAA8DtC,KAAKlC,MAAMuE,gBAAzE,OAA8FrC,KAAKnC,MAAM6H,c,+BAO7H,IAAD,SACkC1F,KAAKnC,MAAtCqH,EADD,EACCA,QAASS,EADV,EACUA,oBAEf,OACI,6BACI,mCAASA,EAAoBC,IAA7B,iBAAgDD,EAAoBE,MAApE,OACA,6BACA,4BAAQhE,UAA+B,OAApB7B,KAAKlC,MAAMI,KAAgB,iBAAmB,oBAAqB4E,QAAS,kBAAM,EAAKsC,QAAQ,QAAlH,MACA,4BAAQvD,UAA+B,UAApB7B,KAAKlC,MAAMI,KAAmB,iBAAmB,oBAAqB4E,QAAS,kBAAM,EAAKsC,QAAQ,WAArH,SAEA,2BAAOvD,UAAU,WACb,+BACI,4BAAK7B,KAAK2E,UAAU3E,KAAKlC,MAAMqE,aAEnC,+BACK+C,EAAQtC,KAAI,SAAC/B,EAAKgC,GACf,OAAO,EAAKwC,YAAYxE,EAAKgC,QAKxC7C,KAAKsF,aAAaJ,Q,GA5JVjD,cCgOV6D,G,wDA7NX,WAAYjI,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTiI,WAAY,GACZC,MAAO,GACPC,SAAS,EACTC,aAAa,EACbP,oBAAqB,CACjBC,IAAK,GACLC,MAAO,MAIf,EAAKM,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAbV,E,gEAiBf,IAAMC,EAAYrG,KAAKlC,MAAMoI,YAE7BlG,KAAKoD,SAAS,CAAC8C,aAAcG,M,+JAIvBC,EAAWC,EAAQ,I,SACND,EAASE,K,OAAtBC,E,OAEAC,EAAM,kDAAoDD,EAAO,WAAaE,UAAUC,SAAW,eACrG5G,KAAKlC,MAAMmI,UACXY,MAAMH,EAAK,CACPI,OAAQ,SAEZ9G,KAAKoD,SAAL,2BACOpD,KAAKlC,OADZ,IAEImI,SAAS,M,+KAKL1C,G,qFACNwD,EAAiB,uDAAyDxD,E,SAC1EsD,MAAME,GACPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF,IACME,EADU,YAAO,EAAKrJ,MAAMiI,YACDvE,OAAOyF,GACxC,EAAK7D,SAAL,2BACO,EAAKtF,OADZ,IAEIiI,WAAYoB,Q,0QAMlBnH,KAAKoH,W,OAEGpH,KAAKlC,MAAMkI,MAEnBpF,SAAQ,SAAA0B,GACX,EAAK+E,UAAU/E,EAAKgF,c,kQAKN,2C,SACXT,MADW,4CAEZG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF,EAAK7D,SAAL,2BACO,EAAKtF,OADZ,IAEIkI,MAAOiB,Q,2IAMnBjH,KAAKuH,e,8CAGeC,EAAcF,EAAW5H,GAC7C,IAEI+H,EAFU,YAAOzH,KAAKlC,MAAMiI,YAEb2B,QAAO,SAAUC,GAChC,OAAQA,EAAQC,OAASJ,GAAkBG,EAAQrE,QAAQuE,IAAMP,KAG/DQ,EAAY,GAClB,GAAIpI,EAAO,CACP,IAAMH,EAAO,IAAIF,KACjBoI,EAAI7G,SAAQ,SAAAmH,GACR,IAAMC,EAAe,IAAI3I,KAAK0I,EAAEE,YAC5B1I,EAAK2I,gBAAkBF,EAAaE,eAAiB3I,EAAK4I,aAAeH,EAAaG,YACtFL,EAAUtH,KAAKuH,MAK3B,OAAOrI,EAAQoI,EAAYL,I,+BAGtBW,EAAaL,GAClB,OAAO7H,KAAKmI,MAAMD,EAAcL,EAAEnI,Y,oCAGxB0H,EAAW/D,EAAM7D,GAC3B,IACM4I,EAAUtI,KAAKuI,wBAAwB,MAAOjB,EAAW5H,GACzD8I,EAAeF,EAAQ/D,OAAS,EAAK+D,EAAQG,OAAOzI,KAAK0I,SAAS,GAAK,IAAQ,EAC/EC,EAAW3I,KAAKuI,wBAAwB,OAAQjB,EAAW5H,GAC3DkJ,EAAgBD,EAASpE,OAAS,EAAKoE,EAASF,OAAOzI,KAAK0I,SAAS,GAAK,IAAQ,EA+CxF,MA9CgB,CACZnF,KAAMA,EACNE,YAAa6E,EAAQ/D,OACrBb,YAAa8E,EACb7E,iBATmB,MASD6E,GAA+B/C,QAAQ,GACzD5B,aAAc8E,EAASpE,OACvBR,aAAc6E,EACd3E,kBAZmB,MAYA2E,GAAgCnD,QAAQ,GAC3DjB,QAAS8D,EAAQ1F,KAAI,SAACiG,EAAGhG,GACrB,IAAMiG,EAAOD,EAAEjJ,SAAW,IACpBmJ,EAAOF,EAAEG,YAAc,GACvBpJ,GAAYiJ,EAAEjJ,SAAW,KAAM6F,QAAQ,GACvCzE,GAjBS,MAiBO8H,GAAuBrD,QAAQ,GAC/CX,GAAc+D,EAAEG,YAAc,IAAIvD,QAAQ,GAE1CwD,EAAS,GADMH,GAAQC,EAAK,KACC,GAC7BG,EAAQhJ,KAAKgJ,MAAMD,GAEnBE,GAAMD,EADsB,IAAjBD,EAAQC,IACIzD,QAAQ,GAE/B2D,EAAW,GAzBF,MAwBYN,GAA0BC,EAAK,KAChB,GACpCM,EAAYnJ,KAAKgJ,MAAME,GAEvBE,GAAQD,EAD8B,IAAvBD,EAAUC,IACQ5D,QAAQ,GAM/C,MAAO,CAAClG,KALIsJ,EAAEZ,WAAWsB,OAAO,EAAE,GAGf,IAFLV,EAAEZ,WAAWsB,OAAO,EAAE,GAEH,IADpBV,EAAEZ,WAAWsB,OAAO,EAAG,GAGhBtL,SAAU,MAAO2B,SAAUA,EAAUoB,aAAcA,EAAc8D,WAAYA,EAAYhE,aAAcqI,EAAIpI,iBAAkBuI,EAAMvE,cADjI8D,EAAEW,yBAG5B/E,UAAWkE,EAAS/F,KAAI,SAACiG,EAAGhG,GACxB,IAAMjD,GAAYiJ,EAAEjJ,SAAW,KAAM6F,QAAQ,GACvCzE,GAtCS,MAsCOpB,GAA2B6F,QAAQ,GACnDX,GAAc+D,EAAEG,YAAc,IAAIvD,QAAQ,GAC1C3E,GAAgBlB,GAAYkF,EAAW,KAAKW,QAAQ,GACpD1E,GAzCS,MAyCWD,GAA+B2E,QAAQ,GAMjE,MAAO,CAAClG,KALIsJ,EAAEZ,WAAWsB,OAAO,EAAE,GAGf,IAFLV,EAAEZ,WAAWsB,OAAO,EAAE,GAEH,IADpBV,EAAEZ,WAAWsB,OAAO,EAAG,GAGhBtL,SAAU,QAAS2B,SAAUA,EAAUoB,aAAcA,EAAc8D,WAAYA,EAAYhE,aAAcA,EAAcC,iBAAkBA,EAAkBgE,cADzJ8D,EAAEW,4B,4CAQdlH,GAClB,IAAMmH,EAAiBzJ,KAAKlC,MAAM6H,oBAAoBC,IAChD8D,EAAmB1J,KAAKlC,MAAM6H,oBAAoBE,MAClDnC,EAAcpB,EAAKoB,YACnBI,EAAgBxB,EAAKyB,aAErB4F,EAAsBjG,EAAc+F,EAAiB,IAAO/F,EAAc+F,EAAkB,IAE5FG,EAAwB9F,EAAgB4F,EAAmB,IAAO5F,EAAgB4F,EAAoB,IAGtGlE,GAAoBmE,EAAsBC,GAAyB,IAAM,KAJxDlG,EAAc+F,EAAkB,IAE9B3F,EAAgB4F,EAAoB,KAE4D,GAAKC,EAAsBC,GAAyB,EAO7K,OALa,2BACNtH,GADM,IAETkD,gBAAiBA,M,+BAMf,IAAD,OACCQ,EAAQhG,KAAKlC,MAAMkI,MAEzBhG,KAAK6J,cAEL,IAAM3E,EAAUc,EAAMpD,KAAI,SAAAN,GACvB,OAAO,EAAKwH,cAAcxH,EAAKgF,UAAWhF,EAAKiB,KAAM,SAGlDhC,EAAcyE,EAAMpD,KAAI,SAAAN,GAC1B,OAAO,EAAKwH,cAAcxH,EAAKgF,UAAWhF,EAAKiB,KAAM,SAOnDwG,EAJY/D,EAAMpD,KAAK,SAAAN,GACzB,OAAO,EAAKwH,cAAcxH,EAAKgF,UAAWhF,EAAKiB,KAAM,iBAGnBX,KAAI,SAAAN,GACtC,OAAO,EAAK0H,sBAAsB1H,MAGhC2H,EAAmBxJ,IAAE0E,QAAQ4E,EAAqB,CAAC,mBAAoB,CAAC,SAIxErE,EADQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,aADhH,IAAIrG,MAEY8I,YAE7B,OACI,6BACI,wBAAItG,UAAU,aAAY,uBAAGA,UAAU,cAAcqI,KAAK,mBAAhC,WAA1B,IAAwF,0BAAMpH,QAAS,kBAAM,EAAKqD,sBAA1B,aACvFnG,KAAKlC,MAAMoI,YACP,6BACG,4BAAKR,EAAL,gBACA,kBAAC,EAAD,CAAYR,QAAS+E,EAAkBvE,UAAWA,EAAWC,oBAAqB3F,KAAKlC,MAAM6H,uBAEjG,kBAAC,EAAD,CAAaT,QAASA,EAAS3D,YAAaA,S,GAvN7CU,cCQJkI,E,uKARX,OACI,yBAAKtI,UAAU,OACb,kBAAC,EAAD,W,GAJQI,aCQEmI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBlE,WACrBA,UAAUmE,cAAcC,MACrB/D,MAAK,SAAAgE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjI,QAAQiI,MAAMA,EAAMC,c","file":"static/js/main.4db4aebe.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport Chart from \"react-google-charts\";\nimport _ from 'lodash';\n\nclass StravaChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            runSegments: 2.5,\n            cycleSegments: 5,\n        }\n    }\n\n    parseOptions(activity, unit) {\n        const unitType = unit === \"km\" ? \"k\" : \"m\";\n        const speed = activity === \"run\" ? \"min/\" + unit : unitType + \"ph\";\n        return {\n            title: \"Lifetime \" + activity + \"s\",\n            hAxis: {\n                title: \"date\"\n            },\n            vAxis: {\n                title: speed,\n                gridlines: {\n                    units: {\n                        hours: {format: ['']},\n                        minutes: {format: ['mm:ss']},\n                        seconds: {format: ['mm:ss']},\n                    }\n                }\n            },\n            bubble: { textStyle: { fontSize: 11 } }\n        }\n    }\n\n    formatSpeed(speed) {\n        const speedSplit = speed.toString().split(\".\");\n        const minute = speedSplit[0];\n        const second = speedSplit[1];\n\n        const rowDate = new Date(2000, 0, 1, 1, parseInt(minute), parseInt(second), 0);\n\n        return rowDate;\n    }\n\n    getDate(date) {\n        const dateSplit = date.split(\"/\");\n        const day = parseInt(dateSplit[0]);\n        const month = parseInt(dateSplit[1]) - 1;\n        const year = parseInt(dateSplit[2]) + 2000;\n\n        const newDate = new Date(year, month, day);\n\n        return newDate;\n    }\n\n    getSegK(distance, activity) {\n        const newDistance = parseFloat(distance);\n\n        const segment = activity === \"run\" ? this.state.runSegments : this.state.cycleSegments;\n\n        const ceilingFive = Math.ceil(newDistance / segment) * segment;\n        const floorFive = ceilingFive - segment;\n\n        const fiveKSeg = floorFive + \"k - \" + ceilingFive + \"k\";\n\n        return fiveKSeg;\n    }\n\n    getThreeM(distance) {\n        const newDistance = parseFloat(distance);\n\n        const ceilingFive = Math.ceil(newDistance / 3) * 3;\n        const floorFive = ceilingFive - 3;\n\n        const fiveKSeg = floorFive + \"m - \" + ceilingFive + \"m\";\n\n        return fiveKSeg;\n    }\n\n    parseData(rows, activity, unit) {\n        const data = [];\n        const whatSpeed = activity === \"run\" ? \"N/A\" : \"Speed (km/h)\";\n        const segment = activity === \"run\" ? this.state.runSegments + \"k\" : this.state.cycleSegments + \"k\";\n        const unitRange = unit === \"km\" ? segment : \"3m\";\n        const header = [\"ID\", \"Date\", whatSpeed, unitRange, \"Distance\"];\n        data.push(header);\n\n        const orderedRows = _.sortBy(rows, o => parseFloat(o.distance));\n\n        orderedRows.forEach((row) => {\n            const averageSpeed = unit === \"km\" ? row.averageSpeed : row.averageSpeedMile;\n            const distance = unit === \"km\" ? row.distance : row.distanceMile;\n            const unitRange = unit === \"km\" ? this.getSegK(distance, activity) : this.getThreeM(distance);\n            let speed = parseFloat(averageSpeed);\n            if (activity === \"run\") {\n                speed = this.formatSpeed(averageSpeed);\n            }\n            const dataRow =[averageSpeed, this.getDate(row.date), speed, unitRange, parseFloat(distance)];\n            data.push(dataRow);\n        });\n\n        return data;\n    }\n\n    render() {\n        const {activity, rows, unit} = this.props;\n        const orderedRows = [].concat(rows).reverse();\n        const data = this.parseData(orderedRows, activity, unit);\n\n        const options = activity ? this.parseOptions(activity, unit) : [];\n\n        return (\n            <div className=\"App\">\n                <Chart\n                    chartType=\"BubbleChart\"\n                    width=\"100%\"\n                    height=\"400px\"\n                    data={data}\n                    options={options}\n                />\n            </div>\n        );\n    }\n}\n\nexport default StravaChart;\n","import React, {Component} from 'react';\nimport './StravaTable-style.css';\nimport StravaChart from \"../StravaChart/StravaChart\";\nimport _ from 'lodash';\n\nclass StravaTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tableHead: [\n                'Name',\n                'No. Runs',\n                'Run Distance',\n                'No. Cycles',\n                'Cycle Distance',\n            ],\n            tableHeadSecond: [\n                'Date',\n                'Activity',\n                'Distance',\n                'Average Speed',\n                'Activity Time',\n                'Elevation Gain',\n            ],\n            currentActivity: \"run\",\n            user: \"\",\n            unit: \"km\",\n            sort: {\n                field: \"date\",\n                direction: true\n            }\n        };\n    }\n\n    getHeader(headers, sorter) {\n        return headers.map((header, i) => {\n            if (sorter) {\n                return <th className=\"myTableHeaders\" onClick={() => this.setSort(header)}>{header}</th>\n            } else {\n                return <th className=\"myTableHeaders\">{header}</th>\n            }\n        })\n    }\n\n    setSort(field) {\n        const currentSort = this.state.sort;\n        const newDirection = field === currentSort.field ? !currentSort.direction : true;\n\n        console.log(field);\n\n        this.setState({\n            ...this.state,\n            sort: {\n                field: field,\n                direction: newDirection\n            }\n        });\n    }\n\n    setUser(selectedUser) {\n        const currentAthlete = this.state.user;\n        const athlete = currentAthlete === selectedUser ? \"\" : selectedUser;\n\n        this.setState({\n            ...this.state,\n            user: athlete,\n        });\n    }\n\n    getRowsData(row, i) {\n        const user = this.state.user;\n        const name = row.name;\n        const runNo = row.runQuantity;\n        const runDistance = row.runDistance;\n        const runDistanceMile = row.runDistanceMile;\n        const cycleNo = row.bikeQuantity;\n        const cycleDistance = row.bikeDistance;\n        const cycleDistanceMile = row.bikeDistanceMile;\n        const percentage = row.totalPercent;\n        const unit = this.state.unit;\n\n        return (\n            <tr className={user === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\n                <td key={i} className=\"myTableContents\">{name} {percentage == 100 ? \"(completed)\" : \"\"}</td>\n                <td key={i} className=\"myTableContents\">{runNo}</td>\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? runDistance + \"km\" : runDistanceMile + \"miles\"}</td>\n                <td key={i} className=\"myTableContents\">{cycleNo}</td>\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? cycleDistance + \"km\" : cycleDistanceMile + \"miles\"}</td>\n            </tr>\n        )\n    }\n\n    setActivity(activity){\n        this.setState({\n            ...this.state,\n            currentActivity: activity,\n        })\n    }\n\n    setUnit(unit){\n        this.setState({\n            ...this.state,\n            unit: unit,\n        })\n    }\n\n    detailedRows(rows) {\n        const user = this.state.user;\n\n        let userRows;\n        for (let i=0; i < rows.length; i++) {\n            if (rows[i].name == user) {\n                userRows = rows[i];\n            }\n        }\n\n        if (user === \"\") {\n            return <br />;\n        } else {\n            const rows = this.state.currentActivity === \"run\" ? userRows.allRuns : userRows.allCycles;\n            return (\n                <div>\n                    <button className={this.state.currentActivity === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"run\")}>Run</button>\n                    <button className={this.state.currentActivity === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"cycle\")}>Cycle</button>\n\n\n                    {rows.length > 0 ?\n                        (<div>\n                            <StravaChart activity={this.state.currentActivity} rows={rows} unit={this.state.unit} />\n\n                            <table className=\"myTableTwo\">\n                                <thead>\n                                    <tr>{this.getHeader(this.state.tableHeadSecond, \"sorting function\")}</tr>\n                                </thead>\n                                <tbody>\n                                    {rows.map(row => {\n                                        const unit = this.state.unit;\n                                        const singleUnit = unit === \"km\" ? \"km\" : \"mile\";\n                                        const speedUnit = unit === \"km\" ? \"k\" : \"m\";\n                                        return (\n                                            <tr>\n                                                <td>{row.date}</td>\n                                                <td>{row.activity}</td>\n                                                <td>{unit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\n                                                <td>{unit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {this.state.currentActivity === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\n                                                <td>{row.movingTime} min</td>\n                                                <td>{row.elevationGain} m</td>\n                                            </tr>\n                                        )\n                                    })}\n                                </tbody>\n                            </table>\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{this.state.user} is yet to {this.state.currentActivity}</h6>\n                    }\n                </div>\n            );\n        }\n    }\n\n    render() {\n        let { allRows, orderedRows } = this.props;\n        let sort = this.state.sort;\n\n        allRows.forEach(row => {\n            if (sort.field === \"Date\") {\n                allRows = [...orderedRows];\n            } else if (sort.field === \"Distance\") {\n                if (sort.direction) {\n                    row.allRuns = _.orderBy(row.allRuns, 'distance', 'asc');\n                    row.allCycles = _.orderBy(row.allCycles, 'distance', 'asc');\n                } else {\n                    row.allRuns = _.orderBy(row.allRuns, 'distance', 'desc');\n                    row.allCycles = _.orderBy(row.allCycles, 'distance', 'desc');\n                }\n            } else if (sort.field === \"Average Speed\") {\n                if (sort.direction) {\n                    row.allRuns = _.orderBy(row.allRuns, 'averageSpeed', 'asc');\n                    row.allCycles = _.orderBy(row.allCycles, 'averageSpeed', 'asc');\n                } else {\n                    row.allRuns = _.orderBy(row.allRuns, 'averageSpeed', 'desc');\n                    row.allCycles = _.orderBy(row.allCycles, 'averageSpeed', 'desc');\n                }\n            } else if (sort.field === \"Activity Time\") {\n                if (sort.direction) {\n                    row.allRuns = _.orderBy(row.allRuns, 'movingTime', 'asc');\n                    row.allCycles = _.orderBy(row.allCycles, 'movingTime', 'asc');\n                } else {\n                    row.allRuns = _.orderBy(row.allRuns, 'movingTime', 'desc');\n                    row.allCycles = _.orderBy(row.allCycles, 'movingTime', 'desc');\n                }\n            } else if (sort.field === \"Elevation Gain\") {\n                if (sort.direction) {\n                    row.allRuns = _.orderBy(row.allRuns, 'elevationGain', 'asc');\n                    row.allCycles = _.orderBy(row.allCycles, 'elevationGain', 'asc');\n                } else {\n                    row.allRuns = _.orderBy(row.allRuns, 'elevationGain', 'desc');\n                    row.allCycles = _.orderBy(row.allCycles, 'elevationGain', 'desc');\n                }\n            }\n        });\n\n        return (\n            <div>\n                <button className={this.state.unit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"km\")}>Km</button>\n                <button className={this.state.unit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"miles\")}>Miles</button>\n\n                <table className=\"myTable\">\n                    <thead>\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\n                    </thead>\n                    <tbody>\n                        {allRows.map((row, i) => {\n                            return this.getRowsData(row, i)\n                        })}\n                    </tbody>\n                </table>\n\n                {this.detailedRows(allRows)}\n            </div>\n        )\n    }\n}\n\nexport default StravaTable;\n","import React, {Component} from 'react';\nimport './MonthTable-style.css';\nimport StravaChart from \"../StravaChart/StravaChart\";\n\nclass MonthTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tableHead: [\n                'Name',\n                'No. Runs',\n                'Run Distance',\n                'No. Cycles',\n                'Cycle Distance',\n                'Total Complete',\n            ],\n            tableHeadSecond: [\n                'Date',\n                'Activity',\n                'Distance',\n                'Average Speed',\n                'Activity Time',\n                'Elevation Gain',\n            ],\n            currentActivity: \"run\",\n            user: \"\",\n            unit: \"km\",\n        };\n    }\n\n    getHeader(headers) {\n        return headers.map((header, i) => {\n            return <th className=\"myTableHeaders\">{header}</th>\n        });\n    }\n\n    setUser(selectedUser) {\n        const currentAthlete = this.state.user;\n        const athlete = currentAthlete === selectedUser ? \"\" : selectedUser;\n\n        this.setState({\n            ...this.state,\n            user: athlete,\n        });\n    }\n\n    getRowsData(row, i) {\n        const user = this.state.user;\n        const name = row.name;\n        const runNo = row.runQuantity;\n        const runDistance = row.runDistance;\n        const runDistanceMile = row.runDistanceMile;\n        const cycleNo = row.bikeQuantity;\n        const cycleDistance = row.bikeDistance;\n        const cycleDistanceMile = row.bikeDistanceMile;\n        const percentage = row.totalPercentage;\n        const unit = this.state.unit;\n\n        return (\n            <tr className={user === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\n                {percentage >= 100 ?\n                    <td key={i} className=\"myTableContents-complete\">{name} (completed)</td>\n                    : <td key={i} className=\"myTableContents\">{name}</td>\n                }\n                <td key={i} className=\"myTableContents\">{runNo}</td>\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? runDistance + \"km\" : runDistanceMile + \"miles\"}</td>\n                <td key={i} className=\"myTableContents\">{cycleNo}</td>\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? cycleDistance + \"km\" : cycleDistanceMile + \"miles\"}</td>\n                <td key={i} className=\"myTableContents\">{percentage.toFixed(2)}%</td>\n            </tr>\n        )\n    }\n\n    setActivity(activity){\n        this.setState({\n            ...this.state,\n            currentActivity: activity,\n        })\n    }\n\n    setUnit(unit){\n        this.setState({\n            ...this.state,\n            unit: unit,\n        })\n    }\n\n    detailedRows(rows) {\n        const user = this.state.user;\n\n        let userRows;\n        for (let i=0; i < rows.length; i++) {\n            if (rows[i].name == user) {\n                userRows = rows[i];\n            }\n        }\n\n        if (user === \"\") {\n            return <br />;\n        } else {\n            const rows = this.state.currentActivity === \"run\" ? userRows.allRuns : userRows.allCycles;\n            return (\n                <div>\n                    <button className={this.state.currentActivity === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"run\")}>Run</button>\n                    <button className={this.state.currentActivity === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"cycle\")}>Cycle</button>\n\n                    {rows.length > 0 ?\n                        (<div>\n                            <StravaChart activity={this.state.currentActivity} rows={rows} unit={this.state.unit}/>\n\n                            <table className=\"myTableTwo\">\n                                <thead>\n                                <tr>{this.getHeader(this.state.tableHeadSecond)}</tr>\n                                </thead>\n                                <tbody>\n                                {rows.map(row => {\n                                    const unit = this.state.unit;\n                                    const singleUnit = unit === \"km\" ? \"km\" : \"mile\";\n                                    const speedUnit = unit === \"km\" ? \"k\" : \"m\";\n                                    return (\n                                        <tr>\n                                            <td>{row.date}</td>\n                                            <td>{row.activity}</td>\n                                            <td>{unit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\n                                            <td>{unit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {this.state.currentActivity === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\n                                            <td>{row.movingTime} min</td>\n                                            <td>{row.elevationGain} m</td>\n                                        </tr>\n                                    )\n                                })}\n                                </tbody>\n                            </table>\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{this.state.user} is yet to {this.state.currentActivity} in {this.props.thisMonth}</h6>\n                    }\n                </div>\n            );\n        }\n    }\n\n    render() {\n        let { allRows, competitionDistance } = this.props;\n\n        return (\n            <div>\n                <h7>Run {competitionDistance.run} km  &  Cycle {competitionDistance.cycle} km</h7>\n                <br />\n                <button className={this.state.unit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"km\")}>Km</button>\n                <button className={this.state.unit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"miles\")}>Miles</button>\n\n                <table className=\"myTable\">\n                    <thead>\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\n                    </thead>\n                    <tbody>\n                        {allRows.map((row, i) => {\n                            return this.getRowsData(row, i)\n                        })}\n                    </tbody>\n                </table>\n\n                {this.detailedRows(allRows)}\n            </div>\n        )\n    }\n}\n\nexport default MonthTable;\n","import React, {Component} from 'react';\nimport _ from 'lodash';\nimport StravaTable from \"../StravaTable/StravaTable\";\nimport MonthTable from \"../MonthTable/MonthTable\";\nimport './Home-style.css';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activities: [],\n            users: [],\n            alerted: false,\n            competition: false,\n            competitionDistance: {\n                run: 30,\n                cycle: 100,\n            },\n        };\n\n        this.competitionSetter = this.competitionSetter.bind(this);\n    }\n\n    competitionSetter() {\n        const oldStatus = this.state.competition;\n\n        this.setState({competition: !oldStatus});\n    }\n\n    async notifyPhone() {\n        const publicIp = require('public-ip');\n        const ipv4 = await publicIp.v4();\n\n        const url = 'https://raj.bariah.com:2010/location?ipAddress=' + ipv4 + \"&device=\" + navigator.platform + \"&site=Strava\";\n        if(!this.state.alerted) {\n            fetch(url, {\n                method: 'post'\n            });\n            this.setState({\n                ...this.state,\n                alerted: true,\n            });\n        }\n    }\n\n    async fetchData(name) {\n        const activitiesLink = \"https://raj.bariah.com:2010/strava/activity?athlete=\" + name;\n        await fetch(activitiesLink)\n            .then(res => res.json())\n            .then(res => {\n                const activities = [...this.state.activities];\n                const newActivities = activities.concat(res);\n                this.setState({\n                    ...this.state,\n                    activities: newActivities\n                })\n            });\n    }\n\n    async reAuthFunc() {\n        await this.setUsers();\n\n        const users = this.state.users;\n\n        users.forEach(user => {\n           this.fetchData(user.athleteID);\n        });\n    }\n\n    async setUsers() {\n        const userLink = \"https://raj.bariah.com:2010/strava/users\";\n        await fetch(userLink)\n            .then(res => res.json())\n            .then(res => {\n                this.setState({\n                    ...this.state,\n                    users: res\n                })\n            })\n    }\n\n    componentDidMount() {\n        this.reAuthFunc();\n    }\n\n    findAllSpecificActivity(activityType, athleteID, month) {\n        const activity = [...this.state.activities];\n\n        let all = activity.filter(function (element) {\n            return (element.type === activityType) && (element.athlete.id == athleteID);\n        });\n\n        const monthData = [];\n        if (month) {\n            const date = new Date();\n            all.forEach(a => {\n                const activityDate = new Date(a.start_date);\n                if (date.getFullYear() === activityDate.getFullYear() && date.getMonth() === activityDate.getMonth()) {\n                    monthData.push(a);\n                }\n            });\n        }\n\n        return month ? monthData : all;\n    }\n\n    getAllKm(accumulator, a) {\n        return Math.round(accumulator + a.distance);\n    }\n\n    createUserObj(athleteID, name, month) {\n        const mileConversion = 0.6214;\n        const userRun = this.findAllSpecificActivity(\"Run\", athleteID, month);\n        const userTotalRan = userRun.length > 0 ? (userRun.reduce(this.getAllKm,0) / 1000) : 0;\n        const userBike = this.findAllSpecificActivity(\"Ride\", athleteID, month);\n        const userTotalBike = userBike.length > 0 ? (userBike.reduce(this.getAllKm,0) / 1000) : 0;\n        const userObj = {\n            name: name,\n            runQuantity: userRun.length,\n            runDistance: userTotalRan,\n            runDistanceMile: (userTotalRan * mileConversion).toFixed(2),\n            bikeQuantity: userBike.length,\n            bikeDistance: userTotalBike,\n            bikeDistanceMile: (userTotalBike * mileConversion).toFixed(2),\n            allRuns: userRun.map((r, i) => {\n                const dist = r.distance / 1000;\n                const time = r.moving_time / 60;\n                const distance = (r.distance / 1000).toFixed(2)\n                const distanceMile = (dist * mileConversion).toFixed(2)\n                const movingTime = (r.moving_time / 60).toFixed(0);\n                const averageSpeed = dist / (time/60);\n                const oneKM = (1 / averageSpeed) * 60;\n                const floor = Math.floor(oneKM);\n                const decimal = (oneKM - floor) * 0.60;\n                const km = (floor + decimal).toFixed(2);\n                const averageSpeedMiles = (dist * mileConversion) / (time/60);\n                const oneMile = (1 / averageSpeedMiles) * 60;\n                const floorMile = Math.floor(oneMile);\n                const decimalMile = (oneMile - floorMile) * 0.60;\n                const mile = (floorMile + decimalMile).toFixed(2);\n                const day = r.start_date.substr(8,2);\n                const month = r.start_date.substr(5,2);\n                const year = r.start_date.substr(2, 2)\n                const date = day + \"/\" + month + \"/\" + year;\n                const elevationGain = r.total_elevation_gain;\n                return {date: date, activity: \"Run\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: km, averageSpeedMile: mile, elevationGain: elevationGain};\n            }),\n            allCycles: userBike.map((r, i) => {\n                const distance = (r.distance / 1000).toFixed(2)\n                const distanceMile = (distance * mileConversion).toFixed(2)\n                const movingTime = (r.moving_time / 60).toFixed(0);\n                const averageSpeed = (distance / (movingTime/60)).toFixed(1);\n                const averageSpeedMile = (averageSpeed * mileConversion).toFixed(1);\n                const day = r.start_date.substr(8,2);\n                const month = r.start_date.substr(5,2);\n                const year = r.start_date.substr(2, 2)\n                const date = day + \"/\" + month + \"/\" + year;\n                const elevationGain = r.total_elevation_gain;\n                return {date: date, activity: \"Cycle\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: averageSpeed, averageSpeedMile: averageSpeedMile, elevationGain: elevationGain};\n            }),\n        };\n\n        return userObj;\n    }\n\n    calculateTotalPercent(user) {\n        const competitionRun = this.state.competitionDistance.run;\n        const competitionCycle = this.state.competitionDistance.cycle;\n        const runDistance = user.runDistance;\n        const cycleDistance = user.bikeDistance;\n\n        const runPercentageCapped = runDistance > competitionRun ? 100 : (runDistance / competitionRun) * 100;\n        const runPercentage = (runDistance / competitionRun) * 100;\n        const cyclePercentageCapped = cycleDistance > competitionCycle ? 100 : (cycleDistance / competitionCycle) * 100;\n        const cyclePercentage = (cycleDistance / competitionCycle) * 100;\n\n        const totalPercentage =  (runPercentageCapped + cyclePercentageCapped) / 2 === 100 ? (runPercentage + cyclePercentage) / 2 : (runPercentageCapped + cyclePercentageCapped) / 2;\n\n        const newUser = {\n            ...user,\n            totalPercentage: totalPercentage\n        };\n\n        return newUser;\n    }\n\n    render() {\n        const users = this.state.users;\n\n        this.notifyPhone();\n\n        const allRows = users.map(user => {\n           return this.createUserObj(user.athleteID, user.name, null);\n        });\n\n        const orderedRows = users.map(user => {\n            return this.createUserObj(user.athleteID, user.name, null);\n        });\n\n        const lastMonth = users.map (user => {\n            return this.createUserObj(user.athleteID, user.name, \"this month\");\n        });\n\n        const lastMonthPercentage = lastMonth.map(user => {\n            return this.calculateTotalPercent(user);\n        });\n\n        const orderedLastMonth = _.orderBy(lastMonthPercentage, ['totalPercentage'], ['desc']);\n\n        const date = new Date();\n        const month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n        const thisMonth = month[date.getMonth()];\n\n        return (\n            <div>\n                <h2 className=\"myHeading\"><a className=\"rajbar-link\" href=\"https://raj.bar\">raj.Bar</a> <span onClick={() => this.competitionSetter()}>/ strava</span></h2>\n                {this.state.competition ?\n                    (<div>\n                        <h4>{thisMonth} Competition</h4>\n                        <MonthTable allRows={orderedLastMonth} thisMonth={thisMonth} competitionDistance={this.state.competitionDistance}/>\n                    </div>) :\n                    <StravaTable allRows={allRows} orderedRows={orderedRows} />\n                }\n            </div>\n        )\n    }\n}\n\nexport default Home;\n","import React, {Component} from 'react';\nimport './App.css'\nimport Home from '../components/Home/Home';\n\nclass App extends Component {\n  render () {\n    return (\n        <div className=\"App\">\n          <Home />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}