{"version":3,"sources":["components/StravaChart/StravaChart.jsx","containers/StravaChart.js","components/StravaTable/StravaTable.jsx","store/selectors/usersAndActivities.js","containers/StravaTable.js","utils/consts.js","components/MonthTable/MonthTable.jsx","containers/MonthTable.js","components/Home/Home.jsx","store/actions/usersAndActivities.js","store/actionTypes/usersAndActivities.js","containers/Home.js","App.js","store/reducers/usersAndActivities.js","store/reducers/index.js","store/sagas/usersAndActivitiesSagas.js","store/sagas/index.js","serviceWorker.js","index.js","store/configureStore.js","store/initialState.js"],"names":["StravaChart","props","state","runSegments","cycleSegments","activity","unit","title","hAxis","vAxis","gridlines","units","hours","format","minutes","seconds","bubble","textStyle","fontSize","speed","speedSplit","toString","split","minute","second","Date","parseInt","date","dateSplit","day","month","year","distance","newDistance","parseFloat","segment","this","ceilingFive","Math","ceil","rows","data","whatSpeed","header","push","_","sortBy","o","forEach","row","averageSpeed","averageSpeedMile","distanceMile","unitRange","getSegK","getThreeM","formatSpeed","dataRow","getDate","orderedRows","concat","reverse","parseData","options","parseOptions","className","chartType","width","height","Component","connect","dispatch","StravaTable","tableHead","tableHeadSecond","currentActivity","user","sort","field","direction","headers","sorter","map","onClick","setSort","currentSort","newDirection","console","log","setState","selectedUser","urlArr","window","location","href","name","length","userNames","includes","replace","athlete","i","runNo","runQuantity","runDistance","runDistanceMile","cycleNo","bikeQuantity","cycleDistance","bikeDistance","cycleDistanceMile","bikeDistanceMile","setUser","key","to","userRows","allRuns","allCycles","setActivity","getHeader","singleUnit","speedUnit","movingTime","elevationGain","style","paddingTop","allRows","singleSetUser","orderBy","Number","setUnit","getRowsData","detailedRows","selectUserNames","usersAndActivities","users","selectUsers","selectActivities","activities","getAllKm","accumulator","a","round","findAllSpecificActivity","activityType","athleteID","all","filter","element","type","id","monthData","activityDate","start_date","getFullYear","createUserObj","userRun","userTotalRan","reduce","userBike","userTotalBike","toFixed","r","dist","time","moving_time","oneKM","floor","km","oneMile","floorMile","mile","substr","total_elevation_gain","selectFormattedActivities","selectFormattedActivitiesForCurrentYear","formattedActivitiesPercentage","monthIndex","getMonth","competitionRun","competitionCycle","runPercentageCapped","cyclePercentageCapped","totalPercentage","calculateTotalPercent","COMPETITIONDISTANCE","DATE","THISMONTH","MonthTable","isMobile","percentage","thisMonth","padding","Home","alerted","publicIp","require","v4","ipv4","url","navigator","platform","fetch","method","fetchUsers","fetchActivities","notifyPhone","basename","process","exact","path","render","fetchUsersSuccess","payload","fetchActivitiesSuccess","App","initialState","errors","usersError","activitiesError","action","fetchUsersFailure","error","fetchActivitiesFailure","rootReducer","combineReducers","fetchUsersSaga","fetchActivitiesSaga","getUsers","then","res","json","call","put","actions","getActivities","usersWatcher","takeEvery","usersAndActivitiesSagas","Boolean","hostname","match","store","sagaMiddleware","createSagaMiddleware","enhancer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","createStore","Object","keys","sagaWatchers","watcher","run","configureStore","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.58f90524.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nimport _ from 'lodash';\r\n\r\nclass StravaChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            runSegments: 2.5,\r\n            cycleSegments: 5,\r\n        }\r\n    }\r\n\r\n    parseOptions(activity, unit) {\r\n        const unitType = unit === \"km\" ? \"k\" : \"m\";\r\n        const speed = activity === \"run\" ? \"min/\" + unit : unitType + \"ph\";\r\n        return {\r\n            title: \"Lifetime \" + activity + \"s\",\r\n            hAxis: {\r\n                title: \"date\"\r\n            },\r\n            vAxis: {\r\n                title: speed,\r\n                gridlines: {\r\n                    units: {\r\n                        hours: {format: ['']},\r\n                        minutes: {format: ['mm:ss']},\r\n                        seconds: {format: ['mm:ss']},\r\n                    }\r\n                }\r\n            },\r\n            bubble: { textStyle: { fontSize: 11 } }\r\n        }\r\n    }\r\n\r\n    formatSpeed(speed) {\r\n        const speedSplit = speed.toString().split(\".\");\r\n        const minute = speedSplit[0];\r\n        const second = speedSplit[1];\r\n\r\n        const rowDate = new Date(2000, 0, 1, 1, parseInt(minute), parseInt(second), 0);\r\n\r\n        return rowDate;\r\n    }\r\n\r\n    getDate(date) {\r\n        const dateSplit = date.split(\"/\");\r\n        const day = parseInt(dateSplit[0]);\r\n        const month = parseInt(dateSplit[1]) - 1;\r\n        const year = parseInt(dateSplit[2]) + 2000;\r\n\r\n        const newDate = new Date(year, month, day);\r\n\r\n        return newDate;\r\n    }\r\n\r\n    getSegK(distance, activity) {\r\n        const newDistance = parseFloat(distance);\r\n\r\n        const segment = activity === \"run\" ? this.state.runSegments : this.state.cycleSegments;\r\n\r\n        const ceilingFive = Math.ceil(newDistance / segment) * segment;\r\n        const floorFive = ceilingFive - segment;\r\n\r\n        const fiveKSeg = floorFive + \"k - \" + ceilingFive + \"k\";\r\n\r\n        return fiveKSeg;\r\n    }\r\n\r\n    getThreeM(distance) {\r\n        const newDistance = parseFloat(distance);\r\n\r\n        const ceilingFive = Math.ceil(newDistance / 3) * 3;\r\n        const floorFive = ceilingFive - 3;\r\n\r\n        const fiveKSeg = floorFive + \"m - \" + ceilingFive + \"m\";\r\n\r\n        return fiveKSeg;\r\n    }\r\n\r\n    parseData(rows, activity, unit) {\r\n        const data = [];\r\n        const whatSpeed = activity === \"run\" ? \"N/A\" : \"Speed (km/h)\";\r\n        const segment = activity === \"run\" ? this.state.runSegments + \"k\" : this.state.cycleSegments + \"k\";\r\n        const unitRange = unit === \"km\" ? segment : \"3m\";\r\n        const header = [\"ID\", \"Date\", whatSpeed, unitRange, \"Distance\"];\r\n        data.push(header);\r\n\r\n        const orderedRows = _.sortBy(rows, o => parseFloat(o.distance));\r\n\r\n        orderedRows.forEach((row) => {\r\n            const averageSpeed = unit === \"km\" ? row.averageSpeed : row.averageSpeedMile;\r\n            const distance = unit === \"km\" ? row.distance : row.distanceMile;\r\n            const unitRange = unit === \"km\" ? this.getSegK(distance, activity) : this.getThreeM(distance);\r\n            let speed = parseFloat(averageSpeed);\r\n            if (activity === \"run\") {\r\n                speed = this.formatSpeed(averageSpeed);\r\n            }\r\n            const dataRow =[averageSpeed, this.getDate(row.date), speed, unitRange, parseFloat(distance)];\r\n            data.push(dataRow);\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    render() {\r\n        const {activity, rows, unit} = this.props;\r\n        const orderedRows = [].concat(rows).reverse();\r\n        const data = this.parseData(orderedRows, activity, unit);\r\n\r\n        const options = activity ? this.parseOptions(activity, unit) : [];\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Chart\r\n                    chartType=\"BubbleChart\"\r\n                    width=\"100%\"\r\n                    height=\"400px\"\r\n                    data={data}\r\n                    options={options}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StravaChart;\r\n","import { connect } from 'react-redux';\r\nimport StravaChart from \"../components/StravaChart/StravaChart\";\r\n\r\nconst mapStateToProps = state => ({});\r\n\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StravaChart);","import React, {Component} from 'react';\r\nimport './StravaTable-style.css';\r\nimport StravaChart from \"../../containers/StravaChart\";\r\nimport _ from 'lodash';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass StravaTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableHead: [\r\n                'Name',\r\n                'No. Runs',\r\n                'Run Distance',\r\n                'No. Cycles',\r\n                'Cycle Distance',\r\n            ],\r\n            tableHeadSecond: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n                'Elevation Gain',\r\n            ],\r\n            currentActivity: \"run\",\r\n            user: \"\",\r\n            unit: \"km\",\r\n            sort: {\r\n                field: \"date\",\r\n                direction: true\r\n            },\r\n        };\r\n    }\r\n\r\n    getHeader(headers, sorter) {\r\n        return headers.map((header) => {\r\n            if (sorter) {\r\n                return <th className=\"myTableHeaders\" onClick={() => this.setSort(header)}>{header}</th>\r\n            } else {\r\n                return <th className=\"myTableHeaders\">{header}</th>\r\n            }\r\n        })\r\n    }\r\n\r\n    setSort(field) {\r\n        const currentSort = this.state.sort;\r\n        const newDirection = field === currentSort.field ? !currentSort.direction : true;\r\n\r\n        console.log(field);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            sort: {\r\n                field: field,\r\n                direction: newDirection\r\n            }\r\n        });\r\n    }\r\n\r\n    singleSetUser(user) {\r\n        const currentUser = this.state.user;\r\n\r\n        if (user !== currentUser) {\r\n            this.setState({\r\n                ...this.state,\r\n                user: user,\r\n            });\r\n        }\r\n    }\r\n\r\n    setUser(selectedUser) {\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name) && (name !== selectedUser)) {\r\n            window.location = window.location.href.replace(name, '');\r\n        }\r\n\r\n        const currentAthlete = this.state.user;\r\n        const athlete = currentAthlete === selectedUser ? \"\" : selectedUser;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            user: athlete,\r\n        });\r\n    }\r\n\r\n    getRowsData(row, i) {\r\n        const user = this.state.user;\r\n        const name = row.name;\r\n        const runNo = row.runQuantity;\r\n        const runDistance = row.runDistance;\r\n        const runDistanceMile = row.runDistanceMile;\r\n        const cycleNo = row.bikeQuantity;\r\n        const cycleDistance = row.bikeDistance;\r\n        const cycleDistanceMile = row.bikeDistanceMile;\r\n        const unit = this.state.unit;\r\n\r\n        return (\r\n            <tr className={user === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\r\n                <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/home/${name}`}>{name}</Link></td>\r\n                <td key={i} className=\"myTableContents\">{runNo}</td>\r\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? runDistance + \"km\" : runDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{cycleNo}</td>\r\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? cycleDistance + \"km\" : cycleDistanceMile + \"miles\"}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    setActivity(activity){\r\n        this.setState({\r\n            ...this.state,\r\n            currentActivity: activity,\r\n        })\r\n    }\r\n\r\n    setUnit(unit){\r\n        this.setState({\r\n            ...this.state,\r\n            unit: unit,\r\n        })\r\n    }\r\n\r\n    detailedRows(rows) {\r\n        const user = this.state.user;\r\n        const userNames = this.props.userNames;\r\n\r\n        let userRows;\r\n        for (let i=0; i < rows.length; i++) {\r\n            if (rows[i].name == user) {\r\n                userRows = rows[i];\r\n            }\r\n        }\r\n\r\n        if (!userNames.includes(user)) {\r\n            return <br />;\r\n        } else {\r\n            const rows = this.state.currentActivity === \"run\" ? userRows.allRuns : userRows.allCycles;\r\n            return (\r\n                <div>\r\n                    <button className={this.state.currentActivity === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"run\")}>Run</button>\r\n                    <button className={this.state.currentActivity === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"cycle\")}>Cycle</button>\r\n\r\n\r\n                    {rows.length > 0 ?\r\n                        (<div>\r\n                            <StravaChart activity={this.state.currentActivity} rows={rows} unit={this.state.unit} />\r\n\r\n                            <table className=\"myTableTwo\">\r\n                                <thead>\r\n                                    <tr>{this.getHeader(this.state.tableHeadSecond, \"sorting function\")}</tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {rows.map(row => {\r\n                                        const unit = this.state.unit;\r\n                                        const singleUnit = unit === \"km\" ? \"km\" : \"mile\";\r\n                                        const speedUnit = unit === \"km\" ? \"k\" : \"m\";\r\n                                        return (\r\n                                            <tr>\r\n                                                <td>{row.date}</td>\r\n                                                <td>{row.activity}</td>\r\n                                                <td>{unit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\r\n                                                <td>{unit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {this.state.currentActivity === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\r\n                                                <td>{row.movingTime} min</td>\r\n                                                <td>{row.elevationGain} m</td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{this.state.user} is yet to {this.state.currentActivity}</h6>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { allRows, orderedRows } = this.props;\r\n        let sort = this.state.sort;\r\n\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name)) {\r\n            this.singleSetUser(name);\r\n        }\r\n\r\n        allRows.forEach(row => {\r\n            if (sort.field === \"Date\") {\r\n                allRows = [...orderedRows];\r\n            } else if (sort.field === \"Distance\") {\r\n                if (sort.direction) {\r\n                    row.allRuns = _.orderBy(row.allRuns, function (o) { return Number(o.distance); }, 'asc');\r\n                    row.allCycles = _.orderBy(row.allCycles, function (o) { return Number(o.distance); }, 'asc');\r\n                } else {\r\n                    row.allRuns = _.orderBy(row.allRuns, function (o) { return Number(o.distance); }, 'desc');\r\n                    row.allCycles = _.orderBy(row.allCycles, function (o) { return Number(o.distance); }, 'desc');\r\n                }\r\n            } else if (sort.field === \"Average Speed\") {\r\n                if (sort.direction) {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'averageSpeed', 'asc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'averageSpeed', 'asc');\r\n                } else {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'averageSpeed', 'desc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'averageSpeed', 'desc');\r\n                }\r\n            } else if (sort.field === \"Activity Time\") {\r\n                if (sort.direction) {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'movingTime', 'asc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'movingTime', 'asc');\r\n                } else {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'movingTime', 'desc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'movingTime', 'desc');\r\n                }\r\n            } else if (sort.field === \"Elevation Gain\") {\r\n                if (sort.direction) {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'elevationGain', 'asc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'elevationGain', 'asc');\r\n                } else {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'elevationGain', 'desc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'elevationGain', 'desc');\r\n                }\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <button className={this.state.unit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"km\")}>Km</button>\r\n                <button className={this.state.unit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"miles\")}>Miles</button>\r\n\r\n                <table className=\"myTable\">\r\n                    <thead>\r\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {allRows.map((row, i) => {\r\n                            return this.getRowsData(row, i)\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {this.detailedRows(allRows)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StravaTable;\r\n","import _ from \"lodash\";\r\n\r\nexport const selectUserNames = state => state.usersAndActivities.users.map(user => user.name);\r\n\r\nconst selectUsers = state => state.usersAndActivities.users;\r\nconst selectActivities = state => state.usersAndActivities.activities;\r\n\r\n\r\nconst getAllKm = (accumulator, a) => {\r\n    return Math.round(accumulator + a.distance);\r\n}\r\n\r\nconst findAllSpecificActivity = (activityType, athleteID, month, activities) => {\r\n    const activity = [...activities];\r\n\r\n    const all = activity.filter(function (element) {\r\n        return (element.type === activityType) && (element.athlete.id.toString() === athleteID);\r\n    });\r\n\r\n    const monthData = [];\r\n    if (month) {\r\n        const date = new Date();\r\n        all.forEach(a => {\r\n            const activityDate = new Date(a.start_date);\r\n            if (date.getFullYear() === activityDate.getFullYear()) {\r\n                monthData.push(a);\r\n            }\r\n        });\r\n    }\r\n\r\n    return month ? monthData : all;\r\n}\r\n\r\nconst createUserObj = (athleteID, name, month, activities) => {\r\n    const mileConversion = 0.6214;\r\n    const userRun = findAllSpecificActivity(\"Run\", athleteID, month, activities);\r\n    const userTotalRan = userRun.length > 0 ? (userRun.reduce(getAllKm,0) / 1000) : 0;\r\n    const userBike = findAllSpecificActivity(\"Ride\", athleteID, month, activities);\r\n    const userTotalBike = userBike.length > 0 ? (userBike.reduce(getAllKm,0) / 1000) : 0;\r\n    const userObj = {\r\n        name: name,\r\n        runQuantity: userRun.length,\r\n        runDistance: userTotalRan,\r\n        runDistanceMile: (userTotalRan * mileConversion).toFixed(2),\r\n        bikeQuantity: userBike.length,\r\n        bikeDistance: userTotalBike,\r\n        bikeDistanceMile: (userTotalBike * mileConversion).toFixed(2),\r\n        allRuns: userRun.map((r, i) => {\r\n            const dist = r.distance / 1000;\r\n            const time = r.moving_time / 60;\r\n            const distance = (r.distance / 1000).toFixed(2)\r\n            const distanceMile = (dist * mileConversion).toFixed(2)\r\n            const movingTime = (r.moving_time / 60).toFixed(0);\r\n            const averageSpeed = dist / (time/60);\r\n            const oneKM = (1 / averageSpeed) * 60;\r\n            const floor = Math.floor(oneKM);\r\n            const decimal = (oneKM - floor) * 0.60;\r\n            const km = (floor + decimal).toFixed(2);\r\n            const averageSpeedMiles = (dist * mileConversion) / (time/60);\r\n            const oneMile = (1 / averageSpeedMiles) * 60;\r\n            const floorMile = Math.floor(oneMile);\r\n            const decimalMile = (oneMile - floorMile) * 0.60;\r\n            const mile = (floorMile + decimalMile).toFixed(2);\r\n            const day = r.start_date.substr(8,2);\r\n            const month = r.start_date.substr(5,2);\r\n            const year = r.start_date.substr(2, 2)\r\n            const date = day + \"/\" + month + \"/\" + year;\r\n            const elevationGain = r.total_elevation_gain;\r\n            return {date: date, activity: \"Run\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: km, averageSpeedMile: mile, elevationGain: elevationGain};\r\n        }),\r\n        allCycles: userBike.map((r, i) => {\r\n            const distance = (r.distance / 1000).toFixed(2)\r\n            const distanceMile = (distance * mileConversion).toFixed(2)\r\n            const movingTime = (r.moving_time / 60).toFixed(0);\r\n            const averageSpeed = (distance / (movingTime/60)).toFixed(1);\r\n            const averageSpeedMile = (averageSpeed * mileConversion).toFixed(1);\r\n            const day = r.start_date.substr(8,2);\r\n            const month = r.start_date.substr(5,2);\r\n            const year = r.start_date.substr(2, 2)\r\n            const date = day + \"/\" + month + \"/\" + year;\r\n            const elevationGain = r.total_elevation_gain;\r\n            return {date: date, activity: \"Cycle\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: averageSpeed, averageSpeedMile: averageSpeedMile, elevationGain: elevationGain};\r\n        }),\r\n    };\r\n\r\n    return userObj;\r\n};\r\n\r\nconst calculateTotalPercent = (user) => {\r\n    const date = new Date();\r\n    const monthIndex = date.getMonth() + 1;\r\n    // const competitionRun = this.state.competitionDistance.run * monthIndex;\r\n    const competitionRun = 30 * monthIndex;\r\n    // const competitionCycle = this.state.competitionDistance.cycle * monthIndex;\r\n    const competitionCycle = 60 * monthIndex;\r\n    const runDistance = user.runDistance;\r\n    const cycleDistance = user.bikeDistance;\r\n\r\n    const runPercentageCapped = runDistance > competitionRun ? 100 : (runDistance / competitionRun) * 100;\r\n    const runPercentage = (runDistance / competitionRun) * 100;\r\n    const cyclePercentageCapped = cycleDistance > competitionCycle ? 100 : (cycleDistance / competitionCycle) * 100;\r\n    const cyclePercentage = (cycleDistance / competitionCycle) * 100;\r\n\r\n    const totalPercentage =  (runPercentageCapped + cyclePercentageCapped) / 2 === 100 ? (runPercentage + cyclePercentage) / 2 : (runPercentageCapped + cyclePercentageCapped) / 2;\r\n\r\n    const newUser = {\r\n        ...user,\r\n        totalPercentage: totalPercentage\r\n    };\r\n\r\n    return newUser;\r\n};\r\n\r\nexport const selectFormattedActivities = state => {\r\n    const activities = selectActivities(state);\r\n    const users = selectUsers(state);\r\n\r\n    const formattedActivities = users.map(user => {\r\n        return createUserObj(user.athleteID, user.name, null, activities)\r\n    });\r\n\r\n    return formattedActivities;\r\n};\r\n\r\nexport const selectFormattedActivitiesForCurrentYear = state => {\r\n    const activities = selectActivities(state);\r\n    const users = selectUsers(state);\r\n\r\n    const formattedActivities = users.map(user => {\r\n        return createUserObj(user.athleteID, user.name, 'yes', activities)\r\n    });\r\n\r\n    const formattedActivitiesPercentage = formattedActivities.map(user => {\r\n        return calculateTotalPercent(user);\r\n    })\r\n\r\n    const orderedActivities = _.orderBy(formattedActivitiesPercentage, ['totalPercentage'], ['desc']);\r\n\r\n\r\n    return orderedActivities;\r\n};","import { connect } from 'react-redux';\r\nimport StravaTable from \"../components/StravaTable/StravaTable\";\r\nimport { selectUserNames, selectFormattedActivities } from \"../store/selectors/usersAndActivities\";\r\n\r\nconst mapStateToProps = state => ({\r\n    allRows: selectFormattedActivities(state),\r\n    orderedRows: selectFormattedActivities(state),\r\n    userNames: selectUserNames(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StravaTable);","export const COMPETITIONDISTANCE = {\r\n    run: 30,\r\n    cycle: 60,\r\n};\r\n\r\nexport const DATE = new Date();\r\n\r\nconst month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\r\nexport const THISMONTH = month[DATE.getMonth()];","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {isMobile} from 'react-device-detect';\r\nimport './MonthTable-style.css';\r\nimport StravaChart from \"../../containers/StravaChart\";\r\nimport {COMPETITIONDISTANCE, DATE, THISMONTH} from \"../../utils/consts\";\r\n\r\nclass MonthTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableHead: [\r\n                'Name',\r\n                'No. Runs',\r\n                'Run Distance',\r\n                'No. Cycles',\r\n                'Cycle Distance',\r\n                'Total Complete',\r\n            ],\r\n            tableHeadSecond: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n                'Elevation Gain',\r\n            ],\r\n            currentActivity: \"run\",\r\n            user: \"\",\r\n            unit: \"km\",\r\n        };\r\n    }\r\n\r\n    getHeader(headers) {\r\n        return headers.map((header) => {\r\n            return <th className={isMobile ? \"myTableHeadersMobile\" : \"myTableHeaders\"}>{header}</th>\r\n        });\r\n    }\r\n\r\n    singleSetUser(user) {\r\n        const currentUser = this.state.user;\r\n\r\n        if (user !== currentUser) {\r\n            this.setState({\r\n                ...this.state,\r\n                user: user,\r\n            });\r\n        }\r\n    }\r\n\r\n    setUser(selectedUser) {\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name) && (name !== selectedUser)) {\r\n            window.location = window.location.href.replace(name, '');\r\n        }\r\n\r\n        const currentAthlete = this.state.user;\r\n        const athlete = currentAthlete === selectedUser ? \"\" : selectedUser;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            user: athlete,\r\n        });\r\n    }\r\n\r\n    getRowsData(row, i) {\r\n        const user = this.state.user;\r\n        const name = row.name;\r\n        const runNo = row.runQuantity;\r\n        const runDistance = isMobile ? row.runDistance.toFixed(1) : row.runDistance;\r\n        const runDistanceMile = isMobile ? parseFloat(row.runDistanceMile).toFixed(1) : row.runDistanceMile;\r\n        const cycleNo = row.bikeQuantity;\r\n        const cycleDistance = isMobile ? row.bikeDistance.toFixed(1) : row.bikeDistance;\r\n        const cycleDistanceMile = isMobile ? parseFloat(row.bikeDistanceMile).toFixed(1) : row.bikeDistanceMile;\r\n        const percentage = row.totalPercentage;\r\n        const unit = this.state.unit;\r\n\r\n        return (\r\n            <tr className={user === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\r\n                {percentage >= 100 ?\r\n                    <td key={i} className=\"myTableContents-complete\">{name} (completed)</td>\r\n                    : <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/strava-competition/${name}`}>{name}</Link></td>\r\n                }\r\n                <td key={i} className=\"myTableContents\">{runNo}</td>\r\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? runDistance + \"km\" : runDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{cycleNo}</td>\r\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? cycleDistance + \"km\" : cycleDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{percentage.toFixed(2)}%</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    setActivity(activity){\r\n        this.setState({\r\n            ...this.state,\r\n            currentActivity: activity,\r\n        })\r\n    }\r\n\r\n    setUnit(unit){\r\n        this.setState({\r\n            ...this.state,\r\n            unit: unit,\r\n        })\r\n    }\r\n\r\n    detailedRows(rows) {\r\n        const user = this.state.user;\r\n\r\n        let userRows;\r\n        for (let i=0; i < rows.length; i++) {\r\n            if (rows[i].name == user) {\r\n                userRows = rows[i];\r\n            }\r\n        }\r\n\r\n        if (user === \"\") {\r\n            return <br />;\r\n        } else {\r\n            const rows = this.state.currentActivity === \"run\" ? userRows.allRuns : userRows.allCycles;\r\n            return (\r\n                <div>\r\n                    <button className={this.state.currentActivity === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"run\")}>Run</button>\r\n                    <button className={this.state.currentActivity === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"cycle\")}>Cycle</button>\r\n\r\n                    {rows.length > 0 ?\r\n                        (<div>\r\n                            <StravaChart activity={this.state.currentActivity} rows={rows} unit={this.state.unit}/>\r\n\r\n                            <table className=\"myTableTwo\">\r\n                                <thead>\r\n                                <tr>{this.getHeader(this.state.tableHeadSecond)}</tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {rows.map(row => {\r\n                                    const unit = this.state.unit;\r\n                                    const singleUnit = unit === \"km\" ? \"km\" : \"mile\";\r\n                                    const speedUnit = unit === \"km\" ? \"k\" : \"m\";\r\n                                    return (\r\n                                        <tr>\r\n                                            <td>{row.date}</td>\r\n                                            <td>{row.activity}</td>\r\n                                            <td>{unit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\r\n                                            <td>{unit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {this.state.currentActivity === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\r\n                                            <td>{row.movingTime} min</td>\r\n                                            <td>{row.elevationGain} m</td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{this.state.user} is yet to {this.state.currentActivity} in {this.props.thisMonth}</h6>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { allRows } = this.props;\r\n        const monthIndex = DATE.getMonth() + 1;\r\n\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name)) {\r\n            this.singleSetUser(name);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h4>Jan - {THISMONTH} Competition</h4>\r\n                <h6>Run {COMPETITIONDISTANCE.run * monthIndex} km  &  Cycle {COMPETITIONDISTANCE.cycle * monthIndex} km</h6>\r\n                <p style={{fontSize: \"11px\", padding: 0}}>({COMPETITIONDISTANCE.run} km & {COMPETITIONDISTANCE.cycle} km a month)</p>\r\n                <button className={this.state.unit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"km\")}>Km</button>\r\n                <button className={this.state.unit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"miles\")}>Miles</button>\r\n\r\n                <table className=\"myTable\">\r\n                    <thead>\r\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {allRows.map((row, i) => {\r\n                            return this.getRowsData(row, i)\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {this.detailedRows(allRows)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MonthTable;\r\n","import { connect } from 'react-redux';\r\nimport MonthTable from \"../components/MonthTable/MonthTable\";\r\nimport { selectUserNames, selectFormattedActivitiesForCurrentYear } from \"../store/selectors/usersAndActivities\";\r\n\r\nconst mapStateToProps = state => ({\r\n    allRows: selectFormattedActivitiesForCurrentYear(state),\r\n    userNames: selectUserNames(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MonthTable);","import React, {Component} from 'react';\r\nimport { HashRouter as Router, Link, Route, Redirect } from \"react-router-dom\";\r\nimport StravaTable from \"../../containers/StravaTable\";\r\nimport MonthTable from \"../../containers/MonthTable\";\r\nimport './Home-style.css';\r\nimport {DATE} from \"../../utils/consts\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            alerted: false,\r\n        };\r\n    }\r\n\r\n    async notifyPhone() {\r\n        const publicIp = require('public-ip');\r\n        const ipv4 = await publicIp.v4();\r\n\r\n        const url = 'https://raj.bariah.com:2010/location?ipAddress=' + ipv4 + \"&device=\" + navigator.platform + \"&site=Strava\";\r\n        if(!this.state.alerted) {\r\n            fetch(url, {\r\n                method: 'post'\r\n            });\r\n            this.setState({\r\n                ...this.state,\r\n                alerted: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { fetchUsers, fetchActivities } = this.props;\r\n        fetchUsers();\r\n        fetchActivities();\r\n    }\r\n\r\n    render() {\r\n        this.notifyPhone();\r\n\r\n        return (\r\n            <div>\r\n                <Router basename={process.env.PUBLIC_URL}>\r\n                    <h2 className=\"myHeading\"><a className=\"rajbar-link\" href=\"https://raj.bar\">raj.Bar</a> <Link className=\"rajbar-link\" to={'/home'}>/</Link> <Link className=\"rajbar-link\" to={'/strava-competition'}>strava</Link></h2>\r\n                    <Route exact path={\"/\"}>\r\n                        <Redirect to={\"/home\"} />\r\n                    </Route>\r\n                    <Route path={'/home'} render={() => (\r\n                        <StravaTable />\r\n                    )}/>\r\n\r\n                    <Route path={'/strava-competition'} render={() => (\r\n                        <MonthTable />\r\n                    )} />\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import * as actionTypes from '../actionTypes/usersAndActivities';\r\n\r\nexport const fetchUsers = () => ({\r\n    type: actionTypes.FETCH_USERS,\r\n});\r\n\r\nexport const fetchUsersSuccess = users => ({\r\n    type: actionTypes.FETCH_USERS_SUCCESS,\r\n    payload: { users },\r\n});\r\n\r\nexport const fetchUsersFailure = error => ({\r\n    type: actionTypes.FETCH_USERS_FAILURE,\r\n    payload: { error },\r\n});\r\n\r\nexport const fetchActivities = () => ({\r\n    type: actionTypes.FETCH_ACTIVITIES,\r\n});\r\n\r\nexport const fetchActivitiesSuccess = activities => ({\r\n    type: actionTypes.FETCH_ACTIVITIES_SUCCESS,\r\n    payload: { activities },\r\n});\r\n\r\nexport const fetchActivitiesFailure = error => ({\r\n    type: actionTypes.FETCH_ACTIVITIES_FAILURE,\r\n    payload: { error },\r\n});","export const FETCH_USERS = 'FETCH_USERS';\r\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\r\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE';\r\n\r\nexport const FETCH_ACTIVITIES = 'FETCH_ACTIVITIES';\r\nexport const FETCH_ACTIVITIES_SUCCESS = 'FETCH_ACTIVITIES_SUCCESS';\r\nexport const FETCH_ACTIVITIES_FAILURE = 'FETCH_ACTIVITIES_FAILURE';","import { connect } from 'react-redux';\r\nimport Home from '../components/Home/Home';\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchUsers: () => dispatch(actions.fetchUsers()),\r\n    fetchActivities: () => dispatch(actions.fetchActivities()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, {Component} from 'react';\r\nimport './App.css'\r\nimport Home from './containers/Home';\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n        <div className=\"App\">\r\n          <Home />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as actionTypes from '../actionTypes/usersAndActivities';\r\n\r\nconst initialState = {\r\n    users: [],\r\n    activities: [],\r\n    errors: {\r\n        usersError: null,\r\n        activitiesError: null,\r\n    },\r\n};\r\n\r\nconst fetchUsersSuccess = (state, action) => ({\r\n    ...state,\r\n    users: action.payload.users,\r\n});\r\n\r\nconst fetchUsersFailure = (state, action) => ({\r\n    ...state,\r\n    errors: {\r\n        ...state.errors,\r\n        usersError: action.payload.error,\r\n    },\r\n});\r\n\r\nconst fetchActivitiesSuccess = (state, action) => ({\r\n    ...state,\r\n    activities: action.payload.activities,\r\n});\r\n\r\nconst fetchActivitiesFailure = (state, action) => ({\r\n    ...state,\r\n    errors: {\r\n        ...state.errors,\r\n        activitiesError: action.payload.error,\r\n    },\r\n});\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.FETCH_USERS_SUCCESS:\r\n            return fetchUsersSuccess(state, action);\r\n        case actionTypes.FETCH_USERS_FAILURE:\r\n            return fetchUsersFailure(state, action);\r\n        case actionTypes.FETCH_ACTIVITIES_SUCCESS:\r\n            return fetchActivitiesSuccess(state, action);\r\n        case actionTypes.FETCH_ACTIVITIES_FAILURE:\r\n            return fetchActivitiesFailure(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { combineReducers } from \"redux\";\r\nimport usersAndActivities from \"./usersAndActivities\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    usersAndActivities,\r\n})\r\n","import {call, put} from 'redux-saga/effects';\r\nimport * as actions from '../actions';\r\n\r\nconst getUsers = async () => {\r\n    const userLink = \"https://raj.bariah.com:2010/strava/users\";\r\n    return await fetch(userLink)\r\n        .then(res => res.json());\r\n}\r\n\r\nexport function* fetchUsersSaga() {\r\n    try {\r\n        const users = yield call(getUsers)\r\n        yield put(actions.fetchUsersSuccess(users));\r\n\r\n    } catch (error) {\r\n        yield put(actions.fetchUsersFailure(error));\r\n    }\r\n}\r\n\r\nconst getActivities = async () => {\r\n    const activitiesLink = \"https://raj.bariah.com:2010/strava/activities\";\r\n\r\n    return await fetch(activitiesLink)\r\n        .then(res => res.json());\r\n}\r\n\r\nexport function* fetchActivitiesSaga() {\r\n    try {\r\n        const activities = yield call(getActivities);\r\n        yield put(actions.fetchActivitiesSuccess(activities));\r\n    } catch (error) {\r\n        yield put(actions.fetchActivitiesFailure(error));\r\n    }\r\n}","import { takeEvery } from 'redux-saga/effects';\r\nimport * as actionTypes from '../actionTypes';\r\nimport * as usersAndActivitiesSagas from './usersAndActivitiesSagas';\r\n\r\nexport function* usersWatcher() {\r\n    yield takeEvery(actionTypes.FETCH_USERS, usersAndActivitiesSagas.fetchUsersSaga);\r\n    yield takeEvery(actionTypes.FETCH_ACTIVITIES, usersAndActivitiesSagas.fetchActivitiesSaga);\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { configureStore } from './store/configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport { initialState } from './store/initialState';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = configureStore(initialState);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { rootReducer } from \"./reducers\";\r\nimport * as sagaWatchers from './sagas';\r\n\r\nexport function configureStore(initialState) {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n\r\n    const enhancer = compose(\r\n        applyMiddleware(sagaMiddleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__\r\n            ? window.__REDUX_DEVTOOLS_EXTENSION__({ name: 'strava-stats' })\r\n            : f => f,\r\n    )\r\n\r\n    const store = createStore(rootReducer, initialState, enhancer)\r\n\r\n    Object.keys(sagaWatchers).forEach(watcher => {\r\n        sagaMiddleware.run(sagaWatchers[watcher])\r\n    })\r\n\r\n    return store;\r\n}\r\n","export const initialState = {};\r\n"],"sourceRoot":""}