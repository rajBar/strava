{"version":3,"sources":["components/StravaChart/StravaChart.jsx","store/selectors/users.js","utils/consts.js","store/selectors/activities.js","containers/StravaChart.js","components/StravaTable/StravaTable.jsx","store/actions/users.js","store/actionTypes/users.js","store/actions/activities.js","store/actionTypes/activities.js","containers/StravaTable.js","components/MonthTable/MonthTable.jsx","containers/MonthTable.js","components/Home/Home.jsx","containers/Home.js","App.js","store/reducers/users.js","store/reducers/activities.js","store/reducers/index.js","store/sagas/usersSagas.js","store/sagas/activitiesSagas.js","store/sagas/index.js","serviceWorker.js","index.js","store/configureStore.js","store/initialState.js"],"names":["StravaChart","props","state","runSegments","cycleSegments","activity","unit","title","hAxis","vAxis","gridlines","units","hours","format","minutes","seconds","bubble","textStyle","fontSize","speed","speedSplit","toString","split","minute","parseInt","second","Date","date","dateSplit","day","month","year","distance","newDistance","parseFloat","segment","this","ceilingFive","Math","ceil","ceilingThree","rows","data","whatSpeed","header","push","_","sortBy","o","forEach","row","averageSpeed","averageSpeedMile","distanceMile","unitRange","getSegK","getThreeM","formatSpeed","dataRow","getDate","currentActivityType","activityUnit","parseData","options","parseOptions","className","chartType","width","height","Component","selectUserNames","users","map","user","name","selectUsers","selectCurrentUser","currentUser","COMPETITION_DISTANCE","DATE","THIS_MONTH","getMonth","selectActivities","activities","selectCurrentActivityType","selectActivityUnit","getAllKm","accumulator","a","round","findAllSpecificActivity","activityType","athleteID","all","filter","element","type","athlete","id","monthData","activityDate","start_date","getFullYear","createUserObj","userRun","userTotalRan","length","reduce","userBike","userTotalBike","runQuantity","runDistance","runDistanceMile","toFixed","bikeQuantity","bikeDistance","bikeDistanceMile","allRuns","r","i","dist","time","moving_time","movingTime","oneKM","floor","km","oneMile","floorMile","mile","substr","elevationGain","total_elevation_gain","allCycles","selectFormattedActivities","selectFormattedUserActivity","formattedActivities","find","userActivity","selectFormattedActivitiesForCurrentYear","formattedActivitiesPercentage","monthIndex","competitionRun","competitionCycle","cycleDistance","runPercentageCapped","cyclePercentageCapped","totalPercentage","calculateTotalPercent","orderBy","selectFormattedUserActivityForCurrentYear","connect","dispatch","StravaTable","tableHead","tableHeadSecond","sort","field","direction","headers","sorter","onClick","setSort","currentSort","newDirection","setState","setCurrentUser","selectedUser","urlArr","window","location","href","userNames","includes","replace","setUser","key","to","setCurrentActivityType","userRows","getSortedCurrentUserRows","getHeader","singleUnit","speedUnit","style","paddingTop","formattedUserActivity","Number","allRows","setActivityUnit","singleSetUser","getRowsData","detailedRows","fetchUsersSuccess","payload","fetchActivitiesSuccess","actions","MonthTable","isMobile","cycleDistanceMile","percentage","formattedUserActivityForCurrentYear","activityRows","thisMonth","padding","Home","alerted","publicIp","require","v4","ipv4","url","navigator","platform","fetch","method","fetchUsers","fetchActivities","notifyPhone","basename","process","exact","path","render","App","initialState","error","action","fetchUsersFailure","fetchActivitiesFailure","rootReducer","combineReducers","fetchUsersSaga","getUsers","then","res","json","call","put","fetchActivitiesSaga","getActivities","usersWatcher","activitiesWatcher","takeEvery","usersSagas","activitiesSagas","Boolean","hostname","match","store","sagaMiddleware","createSagaMiddleware","enhancer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","createStore","Object","keys","sagaWatchers","watcher","run","configureStore","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c4ae08fb.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nimport _ from 'lodash';\r\n\r\nclass StravaChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            runSegments: 2.5,\r\n            cycleSegments: 5,\r\n        }\r\n    }\r\n\r\n    parseOptions(activity, unit) {\r\n        const unitType = unit === \"km\" ? \"k\" : \"m\";\r\n        const speed = activity === \"run\" ? \"min/\" + unit : unitType + \"ph\";\r\n        return {\r\n            title: \"Lifetime \" + activity + \"s\",\r\n            hAxis: {\r\n                title: \"date\"\r\n            },\r\n            vAxis: {\r\n                title: speed,\r\n                gridlines: {\r\n                    units: {\r\n                        hours: {format: ['']},\r\n                        minutes: {format: ['mm:ss']},\r\n                        seconds: {format: ['mm:ss']},\r\n                    }\r\n                }\r\n            },\r\n            bubble: { textStyle: { fontSize: 11 } }\r\n        }\r\n    }\r\n\r\n    formatSpeed(speed) {\r\n        const speedSplit = speed.toString().split(\".\");\r\n        const minute = parseInt(speedSplit[0]);\r\n        const second = parseInt(speedSplit[1]);\r\n\r\n        return new Date(2000, 0, 1, 1, minute, second, 0);\r\n    }\r\n\r\n    getDate(date) {\r\n        const dateSplit = date.split(\"/\");\r\n        const day = parseInt(dateSplit[0]);\r\n        const month = parseInt(dateSplit[1]) - 1;\r\n        const year = parseInt(dateSplit[2]) + 2000;\r\n\r\n        return new Date(year, month, day);\r\n    }\r\n\r\n    getSegK(distance, activity) {\r\n        const newDistance = parseFloat(distance);\r\n\r\n        const segment = activity === \"run\" ? this.state.runSegments : this.state.cycleSegments;\r\n\r\n        const ceilingFive = Math.ceil(newDistance / segment) * segment;\r\n        const floorFive = ceilingFive - segment;\r\n\r\n        return floorFive + \"k - \" + ceilingFive + \"k\";\r\n    }\r\n\r\n    getThreeM(distance) {\r\n        const newDistance = parseFloat(distance);\r\n\r\n        const ceilingThree = Math.ceil(newDistance / 3) * 3;\r\n        const floorThree = ceilingThree - 3;\r\n\r\n        return floorThree + \"m - \" + ceilingThree + \"m\";\r\n    }\r\n\r\n    parseData(rows, activity, unit) {\r\n        const data = [];\r\n        const whatSpeed = activity === \"run\" ? \"N/A\" : \"Speed (km/h)\";\r\n        const segment = activity === \"run\" ? this.state.runSegments + \"k\" : this.state.cycleSegments + \"k\";\r\n        const unitRange = unit === \"km\" ? segment : \"3m\";\r\n        const header = [\"ID\", \"Date\", whatSpeed, unitRange, \"Distance\"];\r\n        data.push(header);\r\n\r\n        const orderedRows = _.sortBy(rows, o => parseFloat(o.distance));\r\n\r\n        orderedRows.forEach((row) => {\r\n            const averageSpeed = unit === \"km\" ? row.averageSpeed : row.averageSpeedMile;\r\n            const distance = unit === \"km\" ? row.distance : row.distanceMile;\r\n            const unitRange = unit === \"km\" ? this.getSegK(distance, activity) : this.getThreeM(distance);\r\n            let speed = parseFloat(averageSpeed);\r\n            if (activity === \"run\") {\r\n                speed = this.formatSpeed(averageSpeed);\r\n            }\r\n            const dataRow =[averageSpeed, this.getDate(row.date), speed, unitRange, parseFloat(distance)];\r\n            data.push(dataRow);\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    render() {\r\n        const {currentActivityType, rows, activityUnit} = this.props;\r\n        const data = this.parseData(rows, currentActivityType, activityUnit);\r\n\r\n        const options = currentActivityType ? this.parseOptions(currentActivityType, activityUnit) : [];\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Chart\r\n                    chartType=\"BubbleChart\"\r\n                    width=\"100%\"\r\n                    height=\"400px\"\r\n                    data={data}\r\n                    options={options}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StravaChart;\r\n","export const selectUserNames = state => state.users.users.map(user => user.name);\r\n\r\nexport const selectUsers = state => state.users.users;\r\n\r\nexport const selectCurrentUser = state => state.users.currentUser;","export const COMPETITION_DISTANCE = {\r\n    run: 30,\r\n    cycle: 60,\r\n};\r\n\r\nexport const DATE = new Date();\r\n\r\nconst month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\r\nexport const THIS_MONTH = month[DATE.getMonth()];","import _ from \"lodash\";\r\nimport {selectCurrentUser, selectUsers} from \"./users\";\r\nimport {COMPETITION_DISTANCE} from \"../../utils/consts\";\r\n\r\nconst selectActivities = state => state.activities.activities;\r\n\r\nexport const selectCurrentActivityType = state => state.activities.currentActivityType;\r\n\r\nexport const selectActivityUnit = state => state.activities.activityUnit;\r\n\r\nconst getAllKm = (accumulator, a) => {\r\n    return Math.round(accumulator + a.distance);\r\n}\r\n\r\nconst findAllSpecificActivity = (activityType, athleteID, month, activities) => {\r\n    const activity = [...activities];\r\n\r\n    const all = activity.filter(function (element) {\r\n        return (element.type === activityType) && (element.athlete.id.toString() === athleteID);\r\n    });\r\n\r\n    const monthData = [];\r\n    if (month) {\r\n        const date = new Date();\r\n        all.forEach(a => {\r\n            const activityDate = new Date(a.start_date);\r\n            if (date.getFullYear() === activityDate.getFullYear()) {\r\n                monthData.push(a);\r\n            }\r\n        });\r\n    }\r\n\r\n    return month ? monthData : all;\r\n}\r\n\r\nconst createUserObj = (athleteID, name, month, activities) => {\r\n    const mileConversion = 0.6214;\r\n    const userRun = findAllSpecificActivity(\"Run\", athleteID, month, activities);\r\n    const userTotalRan = userRun.length > 0 ? (userRun.reduce(getAllKm,0) / 1000) : 0;\r\n    const userBike = findAllSpecificActivity(\"Ride\", athleteID, month, activities);\r\n    const userTotalBike = userBike.length > 0 ? (userBike.reduce(getAllKm,0) / 1000) : 0;\r\n    const userObj = {\r\n        name: name,\r\n        runQuantity: userRun.length,\r\n        runDistance: userTotalRan,\r\n        runDistanceMile: (userTotalRan * mileConversion).toFixed(2),\r\n        bikeQuantity: userBike.length,\r\n        bikeDistance: userTotalBike,\r\n        bikeDistanceMile: (userTotalBike * mileConversion).toFixed(2),\r\n        allRuns: userRun.map((r, i) => {\r\n            const dist = r.distance / 1000;\r\n            const time = r.moving_time / 60;\r\n            const distance = (r.distance / 1000).toFixed(2)\r\n            const distanceMile = (dist * mileConversion).toFixed(2)\r\n            const movingTime = (r.moving_time / 60).toFixed(0);\r\n            const averageSpeed = dist / (time/60);\r\n            const oneKM = (1 / averageSpeed) * 60;\r\n            const floor = Math.floor(oneKM);\r\n            const decimal = (oneKM - floor) * 0.60;\r\n            const km = (floor + decimal).toFixed(2);\r\n            const averageSpeedMiles = (dist * mileConversion) / (time/60);\r\n            const oneMile = (1 / averageSpeedMiles) * 60;\r\n            const floorMile = Math.floor(oneMile);\r\n            const decimalMile = (oneMile - floorMile) * 0.60;\r\n            const mile = (floorMile + decimalMile).toFixed(2);\r\n            const day = r.start_date.substr(8,2);\r\n            const month = r.start_date.substr(5,2);\r\n            const year = r.start_date.substr(2, 2)\r\n            const date = day + \"/\" + month + \"/\" + year;\r\n            const elevationGain = r.total_elevation_gain;\r\n            return {date: date, activity: \"Run\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: km, averageSpeedMile: mile, elevationGain: elevationGain};\r\n        }),\r\n        allCycles: userBike.map((r, i) => {\r\n            const distance = (r.distance / 1000).toFixed(2)\r\n            const distanceMile = (distance * mileConversion).toFixed(2)\r\n            const movingTime = (r.moving_time / 60).toFixed(0);\r\n            const averageSpeed = (distance / (movingTime/60)).toFixed(1);\r\n            const averageSpeedMile = (averageSpeed * mileConversion).toFixed(1);\r\n            const day = r.start_date.substr(8,2);\r\n            const month = r.start_date.substr(5,2);\r\n            const year = r.start_date.substr(2, 2)\r\n            const date = day + \"/\" + month + \"/\" + year;\r\n            const elevationGain = r.total_elevation_gain;\r\n            return {date: date, activity: \"Cycle\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: averageSpeed, averageSpeedMile: averageSpeedMile, elevationGain: elevationGain};\r\n        }),\r\n    };\r\n\r\n    return userObj;\r\n};\r\n\r\nconst calculateTotalPercent = (user) => {\r\n    const date = new Date();\r\n    const monthIndex = date.getMonth() + 1;\r\n    const competitionRun = COMPETITION_DISTANCE.run * monthIndex;\r\n    const competitionCycle = COMPETITION_DISTANCE.cycle * monthIndex;\r\n    const runDistance = user.runDistance;\r\n    const cycleDistance = user.bikeDistance;\r\n\r\n    const runPercentageCapped = runDistance > competitionRun ? 100 : (runDistance / competitionRun) * 100;\r\n    const runPercentage = (runDistance / competitionRun) * 100;\r\n    const cyclePercentageCapped = cycleDistance > competitionCycle ? 100 : (cycleDistance / competitionCycle) * 100;\r\n    const cyclePercentage = (cycleDistance / competitionCycle) * 100;\r\n\r\n    const totalPercentage =  (runPercentageCapped + cyclePercentageCapped) / 2 === 100 ? (runPercentage + cyclePercentage) / 2 : (runPercentageCapped + cyclePercentageCapped) / 2;\r\n\r\n    const newUser = {\r\n        ...user,\r\n        totalPercentage: totalPercentage\r\n    };\r\n\r\n    return newUser;\r\n};\r\n\r\nexport const selectFormattedActivities = state => {\r\n    const activities = selectActivities(state);\r\n    const users = selectUsers(state);\r\n\r\n    return users.map(user => {\r\n        return createUserObj(user.athleteID, user.name, null, activities)\r\n    });\r\n};\r\n\r\nexport const selectFormattedUserActivity = state => {\r\n    const formattedActivities = selectFormattedActivities(state);\r\n    const currentUser = selectCurrentUser(state);\r\n\r\n    return _.find(formattedActivities, userActivity => userActivity.name === currentUser);\r\n}\r\n\r\nexport const selectFormattedActivitiesForCurrentYear = state => {\r\n    const activities = selectActivities(state);\r\n    const users = selectUsers(state);\r\n\r\n    const formattedActivities = users.map(user => {\r\n        return createUserObj(user.athleteID, user.name, 'yes', activities)\r\n    });\r\n\r\n    const formattedActivitiesPercentage = formattedActivities.map(user => {\r\n        return calculateTotalPercent(user);\r\n    })\r\n\r\n    return _.orderBy(formattedActivitiesPercentage, ['totalPercentage'], ['desc']);\r\n};\r\n\r\nexport const selectFormattedUserActivityForCurrentYear = state => {\r\n    const formattedActivities = selectFormattedActivitiesForCurrentYear(state);\r\n    const currentUser = selectCurrentUser(state);\r\n\r\n    return _.find(formattedActivities, userActivity => userActivity.name === currentUser);\r\n};","import { connect } from 'react-redux';\r\nimport StravaChart from \"../components/StravaChart/StravaChart\";\r\nimport {selectActivityUnit, selectCurrentActivityType} from \"../store/selectors/activities\";\r\n\r\nconst mapStateToProps = state => ({\r\n    currentActivityType: selectCurrentActivityType(state),\r\n    activityUnit: selectActivityUnit(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StravaChart);","import React, {Component} from 'react';\r\nimport './StravaTable-style.css';\r\nimport StravaChart from \"../../containers/StravaChart\";\r\nimport _ from 'lodash';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass StravaTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableHead: [\r\n                'Name',\r\n                'No. Runs',\r\n                'Run Distance',\r\n                'No. Cycles',\r\n                'Cycle Distance',\r\n            ],\r\n            tableHeadSecond: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n                'Elevation Gain',\r\n            ],\r\n            sort: {\r\n                field: \"date\",\r\n                direction: true\r\n            },\r\n        };\r\n    }\r\n\r\n    getHeader(headers, sorter) {\r\n        return headers.map((header) => {\r\n            if (sorter) {\r\n                return <th className=\"myTableHeaders\" onClick={() => this.setSort(header)}>{header}</th>\r\n            } else {\r\n                return <th className=\"myTableHeaders\">{header}</th>\r\n            }\r\n        })\r\n    }\r\n\r\n    setSort(field) {\r\n        const currentSort = this.state.sort;\r\n        const newDirection = field === currentSort.field ? !currentSort.direction : true;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            sort: {\r\n                field: field,\r\n                direction: newDirection\r\n            }\r\n        });\r\n    }\r\n\r\n    singleSetUser(user) {\r\n        const { currentUser, setCurrentUser } = this.props;\r\n\r\n        if (user !== currentUser) {\r\n            setCurrentUser(user);\r\n        }\r\n    }\r\n\r\n    setUser(selectedUser) {\r\n        const { currentUser, setCurrentUser } = this.props;\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name) && (name !== selectedUser)) {\r\n            window.location = window.location.href.replace(name, '');\r\n        }\r\n\r\n        const athlete = currentUser === selectedUser ? \"\" : selectedUser;\r\n\r\n        setCurrentUser(athlete);\r\n    }\r\n\r\n    getRowsData(row, i) {\r\n        const { currentUser, activityUnit } = this.props;\r\n        const name = row.name;\r\n\r\n        return (\r\n            <tr className={currentUser === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\r\n                <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/home/${name}`}>{name}</Link></td>\r\n                <td key={i} className=\"myTableContents\">{row.runQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? row.runDistance + \"km\" : row.runDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{row.bikeQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? row.bikeDistance + \"km\" : row.bikeDistanceMile + \"miles\"}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    detailedRows() {\r\n        const { currentUser, currentActivityType, setCurrentActivityType, activityUnit, userNames } = this.props;\r\n\r\n        const userRows = this.getSortedCurrentUserRows();\r\n\r\n        if (!userNames.includes(currentUser)) {\r\n            return <br />;\r\n        } else {\r\n            const rows = currentActivityType === \"run\" ? userRows.allRuns : userRows.allCycles;\r\n            return (\r\n                <div>\r\n                    <button className={currentActivityType === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"run\")}>Run</button>\r\n                    <button className={currentActivityType === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"cycle\")}>Cycle</button>\r\n\r\n\r\n                    {rows.length > 0 ?\r\n                        (<div>\r\n                            <StravaChart rows={rows} />\r\n\r\n                            <table className=\"myTableTwo\">\r\n                                <thead>\r\n                                    <tr>{this.getHeader(this.state.tableHeadSecond, \"sorting function\")}</tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {rows.map(row => {\r\n                                        const singleUnit = activityUnit === \"km\" ? \"km\" : \"mile\";\r\n                                        const speedUnit = activityUnit === \"km\" ? \"k\" : \"m\";\r\n                                        return (\r\n                                            <tr>\r\n                                                <td>{row.date}</td>\r\n                                                <td>{row.activity}</td>\r\n                                                <td>{activityUnit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\r\n                                                <td>{activityUnit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {currentActivityType === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\r\n                                                <td>{row.movingTime} min</td>\r\n                                                <td>{row.elevationGain} m</td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{currentUser} is yet to {currentActivityType}</h6>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    getSortedCurrentUserRows() {\r\n        const { formattedUserActivity } = this.props\r\n        let userActivity = {...formattedUserActivity};\r\n        const { sort } = this.state;\r\n\r\n\r\n        if (sort.field === \"Date\") {\r\n            userActivity = {...formattedUserActivity};\r\n        } else if (sort.field === \"Distance\") {\r\n            if (sort.direction) {\r\n                userActivity.allRuns = _.orderBy(userActivity.allRuns, function (o) { return Number(o.distance); }, 'asc');\r\n                userActivity.allCycles = _.orderBy(userActivity.allCycles, function (o) { return Number(o.distance); }, 'asc');\r\n            } else {\r\n                userActivity.allRuns = _.orderBy(userActivity.allRuns, function (o) { return Number(o.distance); }, 'desc');\r\n                userActivity.allCycles = _.orderBy(userActivity.allCycles, function (o) { return Number(o.distance); }, 'desc');\r\n            }\r\n        } else if (sort.field === \"Average Speed\") {\r\n            if (sort.direction) {\r\n                userActivity.allRuns = _.orderBy(userActivity.allRuns, o => { return Number(o.averageSpeed) }, 'asc');\r\n                userActivity.allCycles = _.orderBy(userActivity.allCycles, o => { return Number(o.averageSpeed) }, 'asc');\r\n            } else {\r\n                userActivity.allRuns = _.orderBy(userActivity.allRuns, o => { return Number(o.averageSpeed) }, 'desc');\r\n                userActivity.allCycles = _.orderBy(userActivity.allCycles, o => { return Number(o.averageSpeed) }, 'desc');\r\n            }\r\n        } else if (sort.field === \"Activity Time\") {\r\n            if (sort.direction) {\r\n                userActivity.allRuns = _.orderBy(userActivity.allRuns, 'movingTime', 'asc');\r\n                userActivity.allCycles = _.orderBy(userActivity.allCycles, 'movingTime', 'asc');\r\n            } else {\r\n                userActivity.allRuns = _.orderBy(userActivity.allRuns, 'movingTime', 'desc');\r\n                userActivity.allCycles = _.orderBy(userActivity.allCycles, 'movingTime', 'desc');\r\n            }\r\n        } else if (sort.field === \"Elevation Gain\") {\r\n            if (sort.direction) {\r\n                userActivity.allRuns = _.orderBy(userActivity.allRuns, 'elevationGain', 'asc');\r\n                userActivity.allCycles = _.orderBy(userActivity.allCycles, 'elevationGain', 'asc');\r\n            } else {\r\n                userActivity.allRuns = _.orderBy(userActivity.allRuns, 'elevationGain', 'desc');\r\n                userActivity.allCycles = _.orderBy(userActivity.allCycles, 'elevationGain', 'desc');\r\n            }\r\n        }\r\n\r\n        return userActivity;\r\n    }\r\n\r\n    render() {\r\n        const { allRows, activityUnit, setActivityUnit } = this.props;\r\n\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name)) {\r\n            this.singleSetUser(name);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <button className={activityUnit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"km\")}>Km</button>\r\n                <button className={activityUnit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"miles\")}>Miles</button>\r\n\r\n                <table className=\"myTable\">\r\n                    <thead>\r\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {allRows.map((row, i) => {\r\n                            return this.getRowsData(row, i)\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {this.detailedRows()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StravaTable;\r\n","import * as actionTypes from '../actionTypes/users';\r\n\r\nexport const fetchUsers = () => ({\r\n    type: actionTypes.FETCH_USERS,\r\n});\r\n\r\nexport const fetchUsersSuccess = users => ({\r\n    type: actionTypes.FETCH_USERS_SUCCESS,\r\n    payload: { users },\r\n});\r\n\r\nexport const fetchUsersFailure = error => ({\r\n    type: actionTypes.FETCH_USERS_FAILURE,\r\n    payload: { error },\r\n});\r\n\r\nexport const setCurrentUser = user => ({\r\n        type: actionTypes.SET_CURRENT_USER,\r\n        payload: { user },\r\n});","export const FETCH_USERS = 'FETCH_USERS';\r\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\r\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE';\r\n\r\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';","import * as actionTypes from \"../actionTypes/activities\";\r\n\r\nexport const fetchActivities = () => ({\r\n    type: actionTypes.FETCH_ACTIVITIES,\r\n});\r\n\r\nexport const fetchActivitiesSuccess = activities => ({\r\n    type: actionTypes.FETCH_ACTIVITIES_SUCCESS,\r\n    payload: { activities },\r\n});\r\n\r\nexport const fetchActivitiesFailure = error => ({\r\n    type: actionTypes.FETCH_ACTIVITIES_FAILURE,\r\n    payload: { error },\r\n});\r\n\r\nexport const setCurrentActivityType = activityType => ({\r\n    type: actionTypes.SET_CURRENT_ACTIVITY_TYPE,\r\n    payload: { activityType },\r\n});\r\n\r\nexport const setActivityUnit = activityUnit => ({\r\n    type: actionTypes.SET_ACTIVITY_UNIT,\r\n    payload: { activityUnit },\r\n})","export const FETCH_ACTIVITIES = 'FETCH_ACTIVITIES';\r\nexport const FETCH_ACTIVITIES_SUCCESS = 'FETCH_ACTIVITIES_SUCCESS';\r\nexport const FETCH_ACTIVITIES_FAILURE = 'FETCH_ACTIVITIES_FAILURE';\r\n\r\nexport const SET_CURRENT_ACTIVITY_TYPE = 'SET_CURRENT_ACTIVITY_TYPE';\r\nexport const SET_ACTIVITY_UNIT = 'SET_ACTIVITY_UNIT';","import { connect } from 'react-redux';\r\nimport StravaTable from \"../components/StravaTable/StravaTable\";\r\nimport {selectCurrentUser, selectUserNames} from \"../store/selectors/users\";\r\nimport {selectActivityUnit, selectCurrentActivityType, selectFormattedActivities, selectFormattedUserActivity} from \"../store/selectors/activities\";\r\nimport * as actions from '../store/actions';\r\n\r\nconst mapStateToProps = state => ({\r\n    allRows: selectFormattedActivities(state),\r\n    formattedUserActivity: selectFormattedUserActivity(state),\r\n    userNames: selectUserNames(state),\r\n    currentUser: selectCurrentUser(state),\r\n    currentActivityType: selectCurrentActivityType(state),\r\n    activityUnit: selectActivityUnit(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCurrentUser: user => dispatch(actions.setCurrentUser(user)),\r\n    setCurrentActivityType: activityType => dispatch(actions.setCurrentActivityType(activityType)),\r\n    setActivityUnit: activityUnit => dispatch(actions.setActivityUnit(activityUnit)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StravaTable);","import React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {isMobile} from 'react-device-detect';\r\nimport './MonthTable-style.css';\r\nimport StravaChart from \"../../containers/StravaChart\";\r\nimport {COMPETITION_DISTANCE, DATE, THIS_MONTH} from \"../../utils/consts\";\r\n\r\nclass MonthTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableHead: [\r\n                'Name',\r\n                'No. Runs',\r\n                'Run Distance',\r\n                'No. Cycles',\r\n                'Cycle Distance',\r\n                'Total Complete',\r\n            ],\r\n            tableHeadSecond: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n                'Elevation Gain',\r\n            ],\r\n        };\r\n    }\r\n\r\n    getHeader(headers) {\r\n        return headers.map((header) => {\r\n            return <th className={isMobile ? \"myTableHeadersMobile\" : \"myTableHeaders\"}>{header}</th>\r\n        });\r\n    }\r\n\r\n    singleSetUser(user) {\r\n        const { currentUser, setCurrentUser } = this.props;\r\n\r\n        if (user !== currentUser) {\r\n            setCurrentUser(user);\r\n        }\r\n    }\r\n\r\n    setUser(selectedUser) {\r\n        const { currentUser, setCurrentUser } = this.props;\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name) && (name !== selectedUser)) {\r\n            window.location = window.location.href.replace(name, '');\r\n        }\r\n\r\n        const athlete = currentUser === selectedUser ? \"\" : selectedUser;\r\n\r\n        setCurrentUser(athlete);\r\n    }\r\n\r\n    getRowsData(row, i) {\r\n        const { currentUser, activityUnit } = this.props;\r\n        const name = row.name;\r\n        const runDistance = isMobile ? row.runDistance.toFixed(1) : row.runDistance;\r\n        const runDistanceMile = isMobile ? parseFloat(row.runDistanceMile).toFixed(1) : row.runDistanceMile;\r\n        const cycleDistance = isMobile ? row.bikeDistance.toFixed(1) : row.bikeDistance;\r\n        const cycleDistanceMile = isMobile ? parseFloat(row.bikeDistanceMile).toFixed(1) : row.bikeDistanceMile;\r\n        const percentage = row.totalPercentage;\r\n\r\n        return (\r\n            <tr className={currentUser === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\r\n                {percentage >= 100 ?\r\n                    <td key={i} className=\"myTableContents-complete\">{name} (completed)</td>\r\n                    : <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/strava-competition/${name}`}>{name}</Link></td>\r\n                }\r\n                <td key={i} className=\"myTableContents\">{row.runQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? runDistance + \"km\" : runDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{row.bikeQuantity}</td>\r\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? cycleDistance + \"km\" : cycleDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{percentage.toFixed(2)}%</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    detailedRows() {\r\n        const { currentUser, currentActivityType, setCurrentActivityType, activityUnit, formattedUserActivityForCurrentYear } = this.props;\r\n\r\n        if (currentUser === \"\") {\r\n            return <br />;\r\n        } else {\r\n            const activityRows = currentActivityType === \"run\" ? formattedUserActivityForCurrentYear.allRuns : formattedUserActivityForCurrentYear.allCycles;\r\n            return (\r\n                <div>\r\n                    <button className={currentActivityType === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"run\")}>Run</button>\r\n                    <button className={currentActivityType === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"cycle\")}>Cycle</button>\r\n\r\n                    {activityRows.length > 0 ?\r\n                        (<div>\r\n                            <StravaChart rows={activityRows} />\r\n\r\n                            <table className=\"myTableTwo\">\r\n                                <thead>\r\n                                <tr>{this.getHeader(this.state.tableHeadSecond)}</tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {activityRows.map(row => {\r\n                                    const singleUnit = activityUnit === \"km\" ? \"km\" : \"mile\";\r\n                                    const speedUnit = activityUnit === \"km\" ? \"k\" : \"m\";\r\n                                    return (\r\n                                        <tr>\r\n                                            <td>{row.date}</td>\r\n                                            <td>{row.activity}</td>\r\n                                            <td>{activityUnit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\r\n                                            <td>{activityUnit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {currentActivityType === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\r\n                                            <td>{row.movingTime} min</td>\r\n                                            <td>{row.elevationGain} m</td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{currentUser} is yet to {currentActivityType} in {this.props.thisMonth}</h6>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { allRows, activityUnit, setActivityUnit } = this.props;\r\n        const monthIndex = DATE.getMonth() + 1;\r\n\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length - 1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name)) {\r\n            this.singleSetUser(name);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h4>Jan - {THIS_MONTH} Competition</h4>\r\n                <h6>Run {COMPETITION_DISTANCE.run * monthIndex} km  &  Cycle {COMPETITION_DISTANCE.cycle * monthIndex} km</h6>\r\n                <p style={{fontSize: \"11px\", padding: 0}}>({COMPETITION_DISTANCE.run} km & {COMPETITION_DISTANCE.cycle} km a month)</p>\r\n                <button className={activityUnit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"km\")}>Km</button>\r\n                <button className={activityUnit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"miles\")}>Miles</button>\r\n\r\n                <table className=\"myTable\">\r\n                    <thead>\r\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {allRows.map((row, i) => {\r\n                            return this.getRowsData(row, i)\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {this.detailedRows()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MonthTable;\r\n","import { connect } from 'react-redux';\r\nimport MonthTable from \"../components/MonthTable/MonthTable\";\r\nimport {selectCurrentUser, selectUserNames} from \"../store/selectors/users\";\r\nimport {\r\n    selectActivityUnit,\r\n    selectCurrentActivityType,\r\n    selectFormattedActivitiesForCurrentYear,\r\n    selectFormattedUserActivityForCurrentYear\r\n} from \"../store/selectors/activities\";\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n    allRows: selectFormattedActivitiesForCurrentYear(state),\r\n    formattedUserActivityForCurrentYear: selectFormattedUserActivityForCurrentYear(state),\r\n    userNames: selectUserNames(state),\r\n    currentUser: selectCurrentUser(state),\r\n    currentActivityType: selectCurrentActivityType(state),\r\n    activityUnit: selectActivityUnit(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCurrentUser: user => dispatch(actions.setCurrentUser(user)),\r\n    setCurrentActivityType: activityType => dispatch(actions.setCurrentActivityType(activityType)),\r\n    setActivityUnit: activityUnit => dispatch(actions.setActivityUnit(activityUnit)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MonthTable);","import React, {Component} from 'react';\r\nimport { HashRouter as Router, Link, Route, Redirect } from \"react-router-dom\";\r\nimport StravaTable from \"../../containers/StravaTable\";\r\nimport MonthTable from \"../../containers/MonthTable\";\r\nimport './Home-style.css';\r\nimport {DATE} from \"../../utils/consts\";\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            alerted: false,\r\n        };\r\n    }\r\n\r\n    async notifyPhone() {\r\n        const publicIp = require('public-ip');\r\n        const ipv4 = await publicIp.v4();\r\n\r\n        const url = 'https://raj.bariah.com:2010/location?ipAddress=' + ipv4 + \"&device=\" + navigator.platform + \"&site=Strava\";\r\n        if(!this.state.alerted) {\r\n            fetch(url, {\r\n                method: 'post'\r\n            });\r\n            this.setState({\r\n                ...this.state,\r\n                alerted: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { fetchUsers, fetchActivities } = this.props;\r\n        fetchUsers();\r\n        fetchActivities();\r\n    }\r\n\r\n    render() {\r\n        this.notifyPhone();\r\n\r\n        return (\r\n            <div>\r\n                <Router basename={process.env.PUBLIC_URL}>\r\n                    <h2 className=\"myHeading\"><a className=\"rajbar-link\" href=\"https://raj.bar\">raj.Bar</a> <Link className=\"rajbar-link\" to={'/home'}>/</Link> <Link className=\"rajbar-link\" to={'/strava-competition'}>strava</Link></h2>\r\n                    <Route exact path={\"/\"}>\r\n                        <Redirect to={\"/home\"} />\r\n                    </Route>\r\n                    <Route path={'/home'} render={() => (\r\n                        <StravaTable />\r\n                    )}/>\r\n\r\n                    <Route path={'/strava-competition'} render={() => (\r\n                        <MonthTable />\r\n                    )} />\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import { connect } from 'react-redux';\r\nimport Home from '../components/Home/Home';\r\nimport * as actions from \"../store/actions\";\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchUsers: () => dispatch(actions.fetchUsers()),\r\n    fetchActivities: () => dispatch(actions.fetchActivities()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, {Component} from 'react';\r\nimport './App.css'\r\nimport Home from './containers/Home';\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n        <div className=\"App\">\r\n          <Home />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as actionTypes from '../actionTypes/users';\r\n\r\nconst initialState = {\r\n    users: [],\r\n    currentUser: \"\",\r\n    error: null,\r\n};\r\n\r\nconst fetchUsersSuccess = (state, action) => ({\r\n    ...state,\r\n    users: action.payload.users,\r\n});\r\n\r\nconst fetchUsersFailure = (state, action) => ({\r\n    ...state,\r\n    error: action.payload.error,\r\n});\r\n\r\nconst setCurrentUser = (state, action) => ({\r\n    ...state,\r\n    currentUser: action.payload.user,\r\n});\r\n\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.FETCH_USERS_SUCCESS:\r\n            return fetchUsersSuccess(state, action);\r\n        case actionTypes.FETCH_USERS_FAILURE:\r\n            return fetchUsersFailure(state, action);\r\n        case actionTypes.SET_CURRENT_USER:\r\n            return setCurrentUser(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};","import * as actionTypes from '../actionTypes/activities';\r\n\r\nconst initialState = {\r\n    activities: [],\r\n    currentActivityType: 'run',\r\n    activityUnit: 'km',\r\n    error: null,\r\n};\r\n\r\nconst fetchActivitiesSuccess = (state, action) => ({\r\n    ...state,\r\n    activities: action.payload.activities,\r\n});\r\n\r\nconst fetchActivitiesFailure = (state, action) => ({\r\n    ...state,\r\n    error: action.payload.error,\r\n});\r\n\r\nconst setCurrentActivityType = (state, action) => ({\r\n    ...state,\r\n    currentActivityType: action.payload.activityType,\r\n});\r\n\r\nconst setActivityUnit = (state, action) => ({\r\n    ...state,\r\n    activityUnit: action.payload.activityUnit,\r\n})\r\n\r\nexport default (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.FETCH_ACTIVITIES_SUCCESS:\r\n            return fetchActivitiesSuccess(state, action);\r\n        case actionTypes.FETCH_ACTIVITIES_FAILURE:\r\n            return fetchActivitiesFailure(state, action);\r\n        case actionTypes.SET_CURRENT_ACTIVITY_TYPE:\r\n            return setCurrentActivityType(state, action);\r\n        case actionTypes.SET_ACTIVITY_UNIT:\r\n            return setActivityUnit(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};","import { combineReducers } from \"redux\";\r\nimport users from \"./users\";\r\nimport activities from \"./activities\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    users,\r\n    activities,\r\n})\r\n","import {call, put} from 'redux-saga/effects';\r\nimport * as actions from '../actions';\r\n\r\nconst getUsers = async () => {\r\n    const userLink = \"https://raj.bariah.com:2010/strava/users\";\r\n    return await fetch(userLink)\r\n        .then(res => res.json());\r\n}\r\n\r\nexport function* fetchUsersSaga() {\r\n    try {\r\n        const users = yield call(getUsers)\r\n        yield put(actions.fetchUsersSuccess(users));\r\n    } catch (error) {\r\n        yield put(actions.fetchUsersFailure(error));\r\n    }\r\n}","import {call, put} from 'redux-saga/effects';\r\nimport * as actions from '../actions';\r\n\r\nconst getActivities = async () => {\r\n    const activitiesLink = \"https://raj.bariah.com:2010/strava/activities\";\r\n\r\n    return await fetch(activitiesLink)\r\n        .then(res => res.json());\r\n}\r\n\r\nexport function* fetchActivitiesSaga() {\r\n    try {\r\n        const activities = yield call(getActivities);\r\n        yield put(actions.fetchActivitiesSuccess(activities));\r\n    } catch (error) {\r\n        yield put(actions.fetchActivitiesFailure(error));\r\n    }\r\n}","import { takeEvery } from 'redux-saga/effects';\r\nimport * as actionTypes from '../actionTypes';\r\nimport * as usersSagas from './usersSagas';\r\nimport * as activitiesSagas from './activitiesSagas';\r\n\r\nexport function* usersWatcher() {\r\n    yield takeEvery(actionTypes.FETCH_USERS, usersSagas.fetchUsersSaga);\r\n}\r\n\r\nexport function* activitiesWatcher() {\r\n    yield takeEvery(actionTypes.FETCH_ACTIVITIES, activitiesSagas.fetchActivitiesSaga);\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { configureStore } from './store/configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport { initialState } from './store/initialState';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = configureStore(initialState);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n;\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { rootReducer } from \"./reducers\";\r\nimport * as sagaWatchers from './sagas';\r\n\r\nexport function configureStore(initialState) {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n\r\n    const enhancer = compose(\r\n        applyMiddleware(sagaMiddleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__\r\n            ? window.__REDUX_DEVTOOLS_EXTENSION__({ name: 'strava-stats' })\r\n            : f => f,\r\n    )\r\n\r\n    const store = createStore(rootReducer, initialState, enhancer)\r\n\r\n    Object.keys(sagaWatchers).forEach(watcher => {\r\n        sagaMiddleware.run(sagaWatchers[watcher])\r\n    })\r\n\r\n    return store;\r\n}\r\n","export const initialState = {};\r\n"],"sourceRoot":""}