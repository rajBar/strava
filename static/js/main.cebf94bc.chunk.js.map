{"version":3,"sources":["components/StravaChart/StravaChart.js","components/StravaTable/StravaTable.js","components/Home/Home.js","containers/App.js","serviceWorker.js","index.js"],"names":["StravaChart","props","state","runSegments","cycleSegments","activity","unit","title","hAxis","vAxis","gridlines","units","hours","format","minutes","seconds","bubble","textStyle","fontSize","speed","speedSplit","toString","split","minute","second","Date","parseInt","date","dateSplit","day","month","year","distance","newDistance","parseFloat","segment","this","ceilingFive","Math","ceil","rows","data","whatSpeed","header","push","_","sortBy","o","forEach","row","averageSpeed","averageSpeedMile","distanceMile","unitRange","getSegK","getThreeM","formatSpeed","dataRow","getDate","orderedRows","concat","reverse","parseData","options","parseOptions","className","chartType","width","height","Component","StravaTable","tableHead","tableHeadSecond","currentActivity","user","sort","field","direction","headers","sorter","map","i","onClick","setSort","currentSort","newDirection","console","log","setState","selectedUser","athlete","name","runNo","runQuantity","runDistance","runDistanceMile","cycleNo","bikeQuantity","cycleDistance","bikeDistance","cycleDistanceMile","bikeDistanceMile","percentage","totalPercent","setUser","key","userRows","length","allRuns","allCycles","setActivity","getHeader","singleUnit","speedUnit","movingTime","elevationGain","allRows","orderBy","setUnit","getRowsData","detailedRows","Home","activities","users","activitiesLink","fetch","then","res","json","newActivities","setUsers","fetchData","athleteID","reAuthFunc","activityType","filter","element","type","id","accumulator","a","round","userRun","findAllSpecificActivity","userTotalRan","reduce","getAllKm","userBike","userTotalBike","toFixed","r","dist","time","moving_time","oneKM","floor","km","oneMile","floorMile","mile","start_date","substr","total_elevation_gain","createUserObj","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cebf94bc.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nimport _ from 'lodash';\r\n\r\nclass StravaChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            runSegments: 2.5,\r\n            cycleSegments: 5,\r\n        }\r\n    }\r\n\r\n    parseOptions(activity, unit) {\r\n        const unitType = unit === \"km\" ? \"k\" : \"m\";\r\n        const speed = activity === \"run\" ? \"min/\" + unit : unitType + \"ph\";\r\n        return {\r\n            title: \"Lifetime \" + activity + \"s\",\r\n            hAxis: {\r\n                title: \"date\"\r\n            },\r\n            vAxis: {\r\n                title: speed,\r\n                gridlines: {\r\n                    units: {\r\n                        hours: {format: ['']},\r\n                        minutes: {format: ['mm:ss']},\r\n                        seconds: {format: ['mm:ss']},\r\n                    }\r\n                }\r\n            },\r\n            bubble: { textStyle: { fontSize: 11 } }\r\n        }\r\n    }\r\n\r\n    formatSpeed(speed) {\r\n        const speedSplit = speed.toString().split(\".\");\r\n        const minute = speedSplit[0];\r\n        const second = speedSplit[1];\r\n\r\n        const rowDate = new Date(2000, 0, 1, 1, parseInt(minute), parseInt(second), 0);\r\n\r\n        return rowDate;\r\n    }\r\n\r\n    getDate(date) {\r\n        const dateSplit = date.split(\"/\");\r\n        const day = parseInt(dateSplit[0]);\r\n        const month = parseInt(dateSplit[1]) - 1;\r\n        const year = parseInt(dateSplit[2]) + 2000;\r\n\r\n        const newDate = new Date(year, month, day);\r\n\r\n        return newDate;\r\n    }\r\n\r\n    getSegK(distance, activity) {\r\n        const newDistance = parseFloat(distance);\r\n\r\n        const segment = activity === \"run\" ? this.state.runSegments : this.state.cycleSegments;\r\n\r\n        const ceilingFive = Math.ceil(newDistance / segment) * segment;\r\n        const floorFive = ceilingFive - segment;\r\n\r\n        const fiveKSeg = floorFive + \"k - \" + ceilingFive + \"k\";\r\n\r\n        return fiveKSeg;\r\n    }\r\n\r\n    getThreeM(distance) {\r\n        const newDistance = parseFloat(distance);\r\n\r\n        const ceilingFive = Math.ceil(newDistance / 3) * 3;\r\n        const floorFive = ceilingFive - 3;\r\n\r\n        const fiveKSeg = floorFive + \"m - \" + ceilingFive + \"m\";\r\n\r\n        return fiveKSeg;\r\n    }\r\n\r\n    parseData(rows, activity, unit) {\r\n        const data = [];\r\n        const whatSpeed = activity === \"run\" ? \"N/A\" : \"Speed (km/h)\";\r\n        const segment = activity === \"run\" ? this.state.runSegments + \"k\" : this.state.cycleSegments + \"k\";\r\n        const unitRange = unit === \"km\" ? segment : \"3m\";\r\n        const header = [\"ID\", \"Date\", whatSpeed, unitRange, \"Distance\"];\r\n        data.push(header);\r\n\r\n        const orderedRows = _.sortBy(rows, o => parseFloat(o.distance));\r\n\r\n        orderedRows.forEach((row) => {\r\n            const averageSpeed = unit === \"km\" ? row.averageSpeed : row.averageSpeedMile;\r\n            const distance = unit === \"km\" ? row.distance : row.distanceMile;\r\n            const unitRange = unit === \"km\" ? this.getSegK(distance, activity) : this.getThreeM(distance);\r\n            let speed = parseFloat(averageSpeed);\r\n            if (activity === \"run\") {\r\n                speed = this.formatSpeed(averageSpeed);\r\n            }\r\n            const dataRow =[averageSpeed, this.getDate(row.date), speed, unitRange, parseFloat(distance)];\r\n            data.push(dataRow);\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    render() {\r\n        const {activity, rows, unit} = this.props;\r\n        const orderedRows = [].concat(rows).reverse();\r\n        const data = this.parseData(orderedRows, activity, unit);\r\n\r\n        const options = activity ? this.parseOptions(activity, unit) : [];\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Chart\r\n                    chartType=\"BubbleChart\"\r\n                    width=\"100%\"\r\n                    height=\"400px\"\r\n                    data={data}\r\n                    options={options}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StravaChart;\r\n","import React, {Component} from 'react';\r\nimport './StravaTable-style.css';\r\nimport StravaChart from \"../StravaChart/StravaChart\";\r\nimport _ from 'lodash';\r\n\r\nclass StravaTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableHead: [\r\n                'Name',\r\n                'No. Runs',\r\n                'Run Distance',\r\n                'No. Cycles',\r\n                'Cycle Distance',\r\n            ],\r\n            tableHeadSecond: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n                'Elevation Gain',\r\n            ],\r\n            currentActivity: \"run\",\r\n            user: \"\",\r\n            unit: \"km\",\r\n            sort: {\r\n                field: \"date\",\r\n                direction: true\r\n            }\r\n        };\r\n    }\r\n\r\n    getHeader(headers, sorter) {\r\n        return headers.map((header, i) => {\r\n            if (sorter) {\r\n                return <th className=\"myTableHeaders\" onClick={() => this.setSort(header)}>{header}</th>\r\n            } else {\r\n                return <th className=\"myTableHeaders\">{header}</th>\r\n            }\r\n        })\r\n    }\r\n\r\n    setSort(field) {\r\n        const currentSort = this.state.sort;\r\n        const newDirection = field === currentSort.field ? !currentSort.direction : true;\r\n\r\n        console.log(field);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            sort: {\r\n                field: field,\r\n                direction: newDirection\r\n            }\r\n        });\r\n    }\r\n\r\n    setUser(selectedUser) {\r\n        const currentAthlete = this.state.user;\r\n        const athlete = currentAthlete === selectedUser ? \"\" : selectedUser;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            user: athlete,\r\n        });\r\n    }\r\n\r\n    getRowsData(row, i) {\r\n        const user = this.state.user;\r\n        const name = row.name;\r\n        const runNo = row.runQuantity;\r\n        const runDistance = row.runDistance;\r\n        const runDistanceMile = row.runDistanceMile;\r\n        const cycleNo = row.bikeQuantity;\r\n        const cycleDistance = row.bikeDistance;\r\n        const cycleDistanceMile = row.bikeDistanceMile;\r\n        const percentage = row.totalPercent;\r\n        const unit = this.state.unit;\r\n\r\n        return (\r\n            <tr className={user === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\r\n                <td key={i} className=\"myTableContents\">{name} {percentage == 100 ? \"(completed)\" : \"\"}</td>\r\n                <td key={i} className=\"myTableContents\">{runNo}</td>\r\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? runDistance + \"km\" : runDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{cycleNo}</td>\r\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? cycleDistance + \"km\" : cycleDistanceMile + \"miles\"}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    setActivity(activity){\r\n        this.setState({\r\n            ...this.state,\r\n            currentActivity: activity,\r\n        })\r\n    }\r\n\r\n    setUnit(unit){\r\n        this.setState({\r\n            ...this.state,\r\n            unit: unit,\r\n        })\r\n    }\r\n\r\n    detailedRows(rows) {\r\n        const user = this.state.user;\r\n\r\n        let userRows;\r\n        for (let i=0; i < rows.length; i++) {\r\n            if (rows[i].name == user) {\r\n                userRows = rows[i];\r\n            }\r\n        }\r\n\r\n        if (user === \"\") {\r\n            return <br />;\r\n        } else {\r\n            const rows = this.state.currentActivity === \"run\" ? userRows.allRuns : userRows.allCycles;\r\n            return (\r\n                <div>\r\n                    <button className={this.state.currentActivity === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"run\")}>Run</button>\r\n                    <button className={this.state.currentActivity === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"cycle\")}>Cycle</button>\r\n\r\n                    <StravaChart activity={this.state.currentActivity} rows={rows} unit={this.state.unit} />\r\n\r\n                    <table className=\"myTableTwo\">\r\n                        <thead>\r\n                            <tr>{this.getHeader(this.state.tableHeadSecond, \"sorting function\")}</tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {rows.map(row => {\r\n                                const unit = this.state.unit;\r\n                                const singleUnit = unit === \"km\" ? \"km\" : \"mile\";\r\n                                const speedUnit = unit === \"km\" ? \"k\" : \"m\";\r\n                                return (\r\n                                    <tr>\r\n                                        <td>{row.date}</td>\r\n                                        <td>{row.activity}</td>\r\n                                        <td>{unit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\r\n                                        <td>{unit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {this.state.currentActivity === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\r\n                                        <td>{row.movingTime} min</td>\r\n                                        <td>{row.elevationGain} m</td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { allRows, orderedRows } = this.props;\r\n        let sort = this.state.sort;\r\n\r\n        allRows.forEach(row => {\r\n            if (sort.field === \"Date\") {\r\n                allRows = [...orderedRows];\r\n            } else if (sort.field === \"Distance\") {\r\n                if (sort.direction) {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'distance', 'asc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'distance', 'asc');\r\n                } else {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'distance', 'desc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'distance', 'desc');\r\n                }\r\n            } else if (sort.field === \"Average Speed\") {\r\n                if (sort.direction) {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'averageSpeed', 'asc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'averageSpeed', 'asc');\r\n                } else {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'averageSpeed', 'desc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'averageSpeed', 'desc');\r\n                }\r\n            } else if (sort.field === \"Activity Time\") {\r\n                if (sort.direction) {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'movingTime', 'asc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'movingTime', 'asc');\r\n                } else {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'movingTime', 'desc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'movingTime', 'desc');\r\n                }\r\n            } else if (sort.field === \"Elevation Gain\") {\r\n                if (sort.direction) {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'elevationGain', 'asc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'elevationGain', 'asc');\r\n                } else {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'elevationGain', 'desc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'elevationGain', 'desc');\r\n                }\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <button className={this.state.unit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"km\")}>Km</button>\r\n                <button className={this.state.unit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"miles\")}>Miles</button>\r\n\r\n                <table className=\"myTable\">\r\n                    <thead>\r\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {allRows.map((row, i) => {\r\n                            return this.getRowsData(row, i)\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {this.detailedRows(allRows)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StravaTable;\r\n","import React, {Component} from 'react';\r\nimport StravaTable from \"../StravaTable/StravaTable\";\r\nimport './Home-style.css';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activities: [],\r\n            users: [],\r\n        }\r\n    }\r\n\r\n    async fetchData(name) {\r\n        const activitiesLink = \"https://raj.bariah.com:2010/strava/\" + name;\r\n        await fetch(activitiesLink)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                const activities = [...this.state.activities];\r\n                const newActivities = activities.concat(res);\r\n                this.setState({\r\n                    ...this.state,\r\n                    activities: newActivities\r\n                })\r\n            });\r\n    }\r\n\r\n    async reAuthFunc() {\r\n        await this.setUsers();\r\n\r\n        const users = this.state.users;\r\n\r\n        users.forEach(user => {\r\n           this.fetchData(user.name);\r\n        });\r\n    }\r\n\r\n    setUsers() {\r\n        const users = [\r\n            {\r\n                name: \"Raj\",\r\n                athleteID: \"59236473\",\r\n            },\r\n            {\r\n                name: \"Ross\",\r\n                athleteID: \"53092595\",\r\n            },\r\n            {\r\n                name: \"Cally\",\r\n                athleteID: \"59236853\",\r\n            },\r\n        ];\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            users: users\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.reAuthFunc();\r\n    }\r\n\r\n    findAllSpecificActivity(activityType, athleteID) {\r\n        const activity = [...this.state.activities];\r\n\r\n        const all = activity.filter(function (element) {\r\n            return (element.type === activityType) && (element.athlete.id == athleteID);\r\n        });\r\n\r\n        return all;\r\n    }\r\n\r\n    getAllKm(accumulator, a) {\r\n        return Math.round(accumulator + a.distance);\r\n    }\r\n\r\n    createUserObj(athleteID, name) {\r\n        const mileConversion = 0.6214;\r\n        const userRun = this.findAllSpecificActivity(\"Run\", athleteID);\r\n        const userTotalRan = userRun.length > 0 ? (userRun.reduce(this.getAllKm,0) / 1000) : 0;\r\n        const userBike = this.findAllSpecificActivity(\"Ride\", athleteID);\r\n        const userTotalBike = userBike.length > 0 ? (userBike.reduce(this.getAllKm,0) / 1000) : 0;\r\n        const userObj = {\r\n            name: name,\r\n            runQuantity: userRun.length,\r\n            runDistance: userTotalRan,\r\n            runDistanceMile: (userTotalRan * mileConversion).toFixed(2),\r\n            bikeQuantity: userBike.length,\r\n            bikeDistance: userTotalBike,\r\n            bikeDistanceMile: (userTotalBike * mileConversion).toFixed(2),\r\n            allRuns: userRun.map((r, i) => {\r\n                const dist = r.distance / 1000;\r\n                const time = r.moving_time / 60;\r\n                const distance = (r.distance / 1000).toFixed(2)\r\n                const distanceMile = (dist * mileConversion).toFixed(2)\r\n                const movingTime = (r.moving_time / 60).toFixed(0);\r\n                const averageSpeed = dist / (time/60);\r\n                const oneKM = (1 / averageSpeed) * 60;\r\n                const floor = Math.floor(oneKM);\r\n                const decimal = (oneKM - floor) * 0.60;\r\n                const km = (floor + decimal).toFixed(2);\r\n                const averageSpeedMiles = (dist * mileConversion) / (time/60);\r\n                const oneMile = (1 / averageSpeedMiles) * 60;\r\n                const floorMile = Math.floor(oneMile);\r\n                const decimalMile = (oneMile - floorMile) * 0.60;\r\n                const mile = (floorMile + decimalMile).toFixed(2);\r\n                const day = r.start_date.substr(8,2);\r\n                const month = r.start_date.substr(5,2);\r\n                const year = r.start_date.substr(2, 2)\r\n                const date = day + \"/\" + month + \"/\" + year;\r\n                const elevationGain = r.total_elevation_gain;\r\n                return {date: date, activity: \"Run\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: km, averageSpeedMile: mile, elevationGain: elevationGain};\r\n            }),\r\n            allCycles: userBike.map((r, i) => {\r\n                const distance = (r.distance / 1000).toFixed(2)\r\n                const distanceMile = (distance * mileConversion).toFixed(2)\r\n                const movingTime = (r.moving_time / 60).toFixed(0);\r\n                const averageSpeed = (distance / (movingTime/60)).toFixed(1);\r\n                const averageSpeedMile = (averageSpeed * mileConversion).toFixed(1);\r\n                const day = r.start_date.substr(8,2);\r\n                const month = r.start_date.substr(5,2);\r\n                const year = r.start_date.substr(2, 2)\r\n                const date = day + \"/\" + month + \"/\" + year;\r\n                const elevationGain = r.total_elevation_gain;\r\n                return {date: date, activity: \"Cycle\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: averageSpeed, averageSpeedMile: averageSpeedMile, elevationGain: elevationGain};\r\n            }),\r\n        };\r\n\r\n        return userObj;\r\n    }\r\n\r\n    render() {\r\n        const users = this.state.users;\r\n\r\n        const allRows = users.map(user => {\r\n           return this.createUserObj(user.athleteID, user.name);\r\n        });\r\n\r\n        const orderedRows = users.map(user => {\r\n            return this.createUserObj(user.athleteID, user.name);\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <h2 className=\"myHeading\"><a className=\"rajbar-link\" href=\"https://raj.bar\">raj.Bar</a> / strava</h2>\r\n                <StravaTable allRows={allRows} orderedRows={orderedRows} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, {Component} from 'react';\r\nimport './App.css'\r\nimport Home from '../components/Home/Home';\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n        <div className=\"App\">\r\n          <Home />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}