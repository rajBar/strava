{"version":3,"sources":["components/StravaChart/StravaChart.js","components/StravaTable/StravaTable.js","components/MonthTable/MonthTable.js","components/Home/Home.js","containers/App.js","serviceWorker.js","index.js"],"names":["StravaChart","props","state","runSegments","cycleSegments","activity","unit","title","hAxis","vAxis","gridlines","units","hours","format","minutes","seconds","bubble","textStyle","fontSize","speed","speedSplit","toString","split","minute","second","Date","parseInt","date","dateSplit","day","month","year","distance","newDistance","parseFloat","segment","this","ceilingFive","Math","ceil","rows","data","whatSpeed","header","push","_","sortBy","o","forEach","row","averageSpeed","averageSpeedMile","distanceMile","unitRange","getSegK","getThreeM","formatSpeed","dataRow","getDate","orderedRows","concat","reverse","parseData","options","parseOptions","className","chartType","width","height","Component","StravaTable","tableHead","tableHeadSecond","currentActivity","user","sort","field","direction","headers","sorter","map","i","onClick","setSort","currentSort","newDirection","console","log","setState","selectedUser","athlete","name","runNo","runQuantity","runDistance","runDistanceMile","cycleNo","bikeQuantity","cycleDistance","bikeDistance","cycleDistanceMile","bikeDistanceMile","setUser","key","to","userRows","userNames","length","includes","allRuns","allCycles","setActivity","getHeader","singleUnit","speedUnit","movingTime","elevationGain","style","paddingTop","allRows","urlArr","window","location","href","singleSetUser","orderBy","Number","setUnit","getRowsData","detailedRows","MonthTable","percentage","totalPercentage","toFixed","thisMonth","competitionDistance","monthIndex","getMonth","run","cycle","padding","Home","activities","users","alerted","competition","competitionSetter","bind","oldStatus","publicIp","require","v4","ipv4","url","navigator","platform","fetch","method","athleteID","activitiesLink","then","res","json","newActivities","setUsers","fetchData","reAuthFunc","activityType","all","filter","element","type","id","monthData","a","activityDate","start_date","getFullYear","accumulator","round","userRun","findAllSpecificActivity","userTotalRan","reduce","getAllKm","userBike","userTotalBike","r","dist","time","moving_time","oneKM","floor","km","oneMile","floorMile","mile","substr","total_elevation_gain","competitionRun","competitionCycle","runPercentageCapped","cyclePercentageCapped","notifyPhone","createUserObj","lastMonthPercentage","calculateTotalPercent","orderedLastMonth","basename","process","path","render","exact","App","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cefce1ed.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport Chart from \"react-google-charts\";\r\nimport _ from 'lodash';\r\n\r\nclass StravaChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            runSegments: 2.5,\r\n            cycleSegments: 5,\r\n        }\r\n    }\r\n\r\n    parseOptions(activity, unit) {\r\n        const unitType = unit === \"km\" ? \"k\" : \"m\";\r\n        const speed = activity === \"run\" ? \"min/\" + unit : unitType + \"ph\";\r\n        return {\r\n            title: \"Lifetime \" + activity + \"s\",\r\n            hAxis: {\r\n                title: \"date\"\r\n            },\r\n            vAxis: {\r\n                title: speed,\r\n                gridlines: {\r\n                    units: {\r\n                        hours: {format: ['']},\r\n                        minutes: {format: ['mm:ss']},\r\n                        seconds: {format: ['mm:ss']},\r\n                    }\r\n                }\r\n            },\r\n            bubble: { textStyle: { fontSize: 11 } }\r\n        }\r\n    }\r\n\r\n    formatSpeed(speed) {\r\n        const speedSplit = speed.toString().split(\".\");\r\n        const minute = speedSplit[0];\r\n        const second = speedSplit[1];\r\n\r\n        const rowDate = new Date(2000, 0, 1, 1, parseInt(minute), parseInt(second), 0);\r\n\r\n        return rowDate;\r\n    }\r\n\r\n    getDate(date) {\r\n        const dateSplit = date.split(\"/\");\r\n        const day = parseInt(dateSplit[0]);\r\n        const month = parseInt(dateSplit[1]) - 1;\r\n        const year = parseInt(dateSplit[2]) + 2000;\r\n\r\n        const newDate = new Date(year, month, day);\r\n\r\n        return newDate;\r\n    }\r\n\r\n    getSegK(distance, activity) {\r\n        const newDistance = parseFloat(distance);\r\n\r\n        const segment = activity === \"run\" ? this.state.runSegments : this.state.cycleSegments;\r\n\r\n        const ceilingFive = Math.ceil(newDistance / segment) * segment;\r\n        const floorFive = ceilingFive - segment;\r\n\r\n        const fiveKSeg = floorFive + \"k - \" + ceilingFive + \"k\";\r\n\r\n        return fiveKSeg;\r\n    }\r\n\r\n    getThreeM(distance) {\r\n        const newDistance = parseFloat(distance);\r\n\r\n        const ceilingFive = Math.ceil(newDistance / 3) * 3;\r\n        const floorFive = ceilingFive - 3;\r\n\r\n        const fiveKSeg = floorFive + \"m - \" + ceilingFive + \"m\";\r\n\r\n        return fiveKSeg;\r\n    }\r\n\r\n    parseData(rows, activity, unit) {\r\n        const data = [];\r\n        const whatSpeed = activity === \"run\" ? \"N/A\" : \"Speed (km/h)\";\r\n        const segment = activity === \"run\" ? this.state.runSegments + \"k\" : this.state.cycleSegments + \"k\";\r\n        const unitRange = unit === \"km\" ? segment : \"3m\";\r\n        const header = [\"ID\", \"Date\", whatSpeed, unitRange, \"Distance\"];\r\n        data.push(header);\r\n\r\n        const orderedRows = _.sortBy(rows, o => parseFloat(o.distance));\r\n\r\n        orderedRows.forEach((row) => {\r\n            const averageSpeed = unit === \"km\" ? row.averageSpeed : row.averageSpeedMile;\r\n            const distance = unit === \"km\" ? row.distance : row.distanceMile;\r\n            const unitRange = unit === \"km\" ? this.getSegK(distance, activity) : this.getThreeM(distance);\r\n            let speed = parseFloat(averageSpeed);\r\n            if (activity === \"run\") {\r\n                speed = this.formatSpeed(averageSpeed);\r\n            }\r\n            const dataRow =[averageSpeed, this.getDate(row.date), speed, unitRange, parseFloat(distance)];\r\n            data.push(dataRow);\r\n        });\r\n\r\n        return data;\r\n    }\r\n\r\n    render() {\r\n        const {activity, rows, unit} = this.props;\r\n        const orderedRows = [].concat(rows).reverse();\r\n        const data = this.parseData(orderedRows, activity, unit);\r\n\r\n        const options = activity ? this.parseOptions(activity, unit) : [];\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Chart\r\n                    chartType=\"BubbleChart\"\r\n                    width=\"100%\"\r\n                    height=\"400px\"\r\n                    data={data}\r\n                    options={options}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StravaChart;\r\n","import React, {Component} from 'react';\r\nimport './StravaTable-style.css';\r\nimport StravaChart from \"../StravaChart/StravaChart\";\r\nimport _ from 'lodash';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass StravaTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableHead: [\r\n                'Name',\r\n                'No. Runs',\r\n                'Run Distance',\r\n                'No. Cycles',\r\n                'Cycle Distance',\r\n            ],\r\n            tableHeadSecond: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n                'Elevation Gain',\r\n            ],\r\n            currentActivity: \"run\",\r\n            user: \"\",\r\n            unit: \"km\",\r\n            sort: {\r\n                field: \"date\",\r\n                direction: true\r\n            }\r\n        };\r\n    }\r\n\r\n    getHeader(headers, sorter) {\r\n        return headers.map((header, i) => {\r\n            if (sorter) {\r\n                return <th className=\"myTableHeaders\" onClick={() => this.setSort(header)}>{header}</th>\r\n            } else {\r\n                return <th className=\"myTableHeaders\">{header}</th>\r\n            }\r\n        })\r\n    }\r\n\r\n    setSort(field) {\r\n        const currentSort = this.state.sort;\r\n        const newDirection = field === currentSort.field ? !currentSort.direction : true;\r\n\r\n        console.log(field);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            sort: {\r\n                field: field,\r\n                direction: newDirection\r\n            }\r\n        });\r\n    }\r\n\r\n    singleSetUser(user) {\r\n        const currentUser = this.state.user;\r\n\r\n        if (user !== currentUser) {\r\n            this.setState({\r\n                ...this.state,\r\n                user: user,\r\n            });\r\n        }\r\n    }\r\n\r\n    setUser(selectedUser) {\r\n        const currentAthlete = this.state.user;\r\n        const athlete = currentAthlete === selectedUser ? \"\" : selectedUser;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            user: athlete,\r\n        });\r\n    }\r\n\r\n    getRowsData(row, i) {\r\n        const user = this.state.user;\r\n        const name = row.name;\r\n        const runNo = row.runQuantity;\r\n        const runDistance = row.runDistance;\r\n        const runDistanceMile = row.runDistanceMile;\r\n        const cycleNo = row.bikeQuantity;\r\n        const cycleDistance = row.bikeDistance;\r\n        const cycleDistanceMile = row.bikeDistanceMile;\r\n        const unit = this.state.unit;\r\n\r\n        return (\r\n            <tr className={user === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\r\n                <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/strava/${name}`}>{name}</Link></td>\r\n                <td key={i} className=\"myTableContents\">{runNo}</td>\r\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? runDistance + \"km\" : runDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{cycleNo}</td>\r\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? cycleDistance + \"km\" : cycleDistanceMile + \"miles\"}</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    setActivity(activity){\r\n        this.setState({\r\n            ...this.state,\r\n            currentActivity: activity,\r\n        })\r\n    }\r\n\r\n    setUnit(unit){\r\n        this.setState({\r\n            ...this.state,\r\n            unit: unit,\r\n        })\r\n    }\r\n\r\n    detailedRows(rows) {\r\n        const user = this.state.user;\r\n        const userNames = this.props.userNames;\r\n\r\n        let userRows;\r\n        for (let i=0; i < rows.length; i++) {\r\n            if (rows[i].name == user) {\r\n                userRows = rows[i];\r\n            }\r\n        }\r\n\r\n        if (!userNames.includes(user)) {\r\n            return <br />;\r\n        } else {\r\n            const rows = this.state.currentActivity === \"run\" ? userRows.allRuns : userRows.allCycles;\r\n            return (\r\n                <div>\r\n                    <button className={this.state.currentActivity === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"run\")}>Run</button>\r\n                    <button className={this.state.currentActivity === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"cycle\")}>Cycle</button>\r\n\r\n\r\n                    {rows.length > 0 ?\r\n                        (<div>\r\n                            <StravaChart activity={this.state.currentActivity} rows={rows} unit={this.state.unit} />\r\n\r\n                            <table className=\"myTableTwo\">\r\n                                <thead>\r\n                                    <tr>{this.getHeader(this.state.tableHeadSecond, \"sorting function\")}</tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {rows.map(row => {\r\n                                        const unit = this.state.unit;\r\n                                        const singleUnit = unit === \"km\" ? \"km\" : \"mile\";\r\n                                        const speedUnit = unit === \"km\" ? \"k\" : \"m\";\r\n                                        return (\r\n                                            <tr>\r\n                                                <td>{row.date}</td>\r\n                                                <td>{row.activity}</td>\r\n                                                <td>{unit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\r\n                                                <td>{unit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {this.state.currentActivity === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\r\n                                                <td>{row.movingTime} min</td>\r\n                                                <td>{row.elevationGain} m</td>\r\n                                            </tr>\r\n                                        )\r\n                                    })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{this.state.user} is yet to {this.state.currentActivity}</h6>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { allRows, orderedRows } = this.props;\r\n        let sort = this.state.sort;\r\n\r\n        const currentURL = window.location.href;\r\n        const urlArr = currentURL.split('/');\r\n        const name = urlArr[urlArr.length -1];\r\n        const userNames = this.props.userNames;\r\n        if (userNames.includes(name)) {\r\n            this.singleSetUser(name);\r\n        }\r\n\r\n        allRows.forEach(row => {\r\n            if (sort.field === \"Date\") {\r\n                allRows = [...orderedRows];\r\n            } else if (sort.field === \"Distance\") {\r\n                if (sort.direction) {\r\n                    row.allRuns = _.orderBy(row.allRuns, function (o) { return Number(o.distance); }, 'asc');\r\n                    row.allCycles = _.orderBy(row.allCycles, function (o) { return Number(o.distance); }, 'asc');\r\n                } else {\r\n                    row.allRuns = _.orderBy(row.allRuns, function (o) { return Number(o.distance); }, 'desc');\r\n                    row.allCycles = _.orderBy(row.allCycles, function (o) { return Number(o.distance); }, 'desc');\r\n                }\r\n            } else if (sort.field === \"Average Speed\") {\r\n                if (sort.direction) {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'averageSpeed', 'asc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'averageSpeed', 'asc');\r\n                } else {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'averageSpeed', 'desc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'averageSpeed', 'desc');\r\n                }\r\n            } else if (sort.field === \"Activity Time\") {\r\n                if (sort.direction) {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'movingTime', 'asc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'movingTime', 'asc');\r\n                } else {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'movingTime', 'desc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'movingTime', 'desc');\r\n                }\r\n            } else if (sort.field === \"Elevation Gain\") {\r\n                if (sort.direction) {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'elevationGain', 'asc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'elevationGain', 'asc');\r\n                } else {\r\n                    row.allRuns = _.orderBy(row.allRuns, 'elevationGain', 'desc');\r\n                    row.allCycles = _.orderBy(row.allCycles, 'elevationGain', 'desc');\r\n                }\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <button className={this.state.unit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"km\")}>Km</button>\r\n                <button className={this.state.unit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"miles\")}>Miles</button>\r\n\r\n                <table className=\"myTable\">\r\n                    <thead>\r\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {allRows.map((row, i) => {\r\n                            return this.getRowsData(row, i)\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {this.detailedRows(allRows)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StravaTable;\r\n","import React, {Component} from 'react';\r\nimport './MonthTable-style.css';\r\nimport StravaChart from \"../StravaChart/StravaChart\";\r\n\r\nclass MonthTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tableHead: [\r\n                'Name',\r\n                'No. Runs',\r\n                'Run Distance',\r\n                'No. Cycles',\r\n                'Cycle Distance',\r\n                'Total Complete',\r\n            ],\r\n            tableHeadSecond: [\r\n                'Date',\r\n                'Activity',\r\n                'Distance',\r\n                'Average Speed',\r\n                'Activity Time',\r\n                'Elevation Gain',\r\n            ],\r\n            currentActivity: \"run\",\r\n            user: \"\",\r\n            unit: \"km\",\r\n        };\r\n    }\r\n\r\n    getHeader(headers) {\r\n        return headers.map((header, i) => {\r\n            return <th className=\"myTableHeaders\">{header}</th>\r\n        });\r\n    }\r\n\r\n    setUser(selectedUser) {\r\n        const currentAthlete = this.state.user;\r\n        const athlete = currentAthlete === selectedUser ? \"\" : selectedUser;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            user: athlete,\r\n        });\r\n    }\r\n\r\n    getRowsData(row, i) {\r\n        const user = this.state.user;\r\n        const name = row.name;\r\n        const runNo = row.runQuantity;\r\n        const runDistance = row.runDistance;\r\n        const runDistanceMile = row.runDistanceMile;\r\n        const cycleNo = row.bikeQuantity;\r\n        const cycleDistance = row.bikeDistance;\r\n        const cycleDistanceMile = row.bikeDistanceMile;\r\n        const percentage = row.totalPercentage;\r\n        const unit = this.state.unit;\r\n\r\n        return (\r\n            <tr className={user === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\r\n                {percentage >= 100 ?\r\n                    <td key={i} className=\"myTableContents-complete\">{name} (completed)</td>\r\n                    : <td key={i} className=\"myTableContents\">{name}</td>\r\n                }\r\n                <td key={i} className=\"myTableContents\">{runNo}</td>\r\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? runDistance + \"km\" : runDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{cycleNo}</td>\r\n                <td key={i} className=\"myTableContents\">{unit === \"km\" ? cycleDistance + \"km\" : cycleDistanceMile + \"miles\"}</td>\r\n                <td key={i} className=\"myTableContents\">{percentage.toFixed(2)}%</td>\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    setActivity(activity){\r\n        this.setState({\r\n            ...this.state,\r\n            currentActivity: activity,\r\n        })\r\n    }\r\n\r\n    setUnit(unit){\r\n        this.setState({\r\n            ...this.state,\r\n            unit: unit,\r\n        })\r\n    }\r\n\r\n    detailedRows(rows) {\r\n        const user = this.state.user;\r\n\r\n        let userRows;\r\n        for (let i=0; i < rows.length; i++) {\r\n            if (rows[i].name == user) {\r\n                userRows = rows[i];\r\n            }\r\n        }\r\n\r\n        if (user === \"\") {\r\n            return <br />;\r\n        } else {\r\n            const rows = this.state.currentActivity === \"run\" ? userRows.allRuns : userRows.allCycles;\r\n            return (\r\n                <div>\r\n                    <button className={this.state.currentActivity === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"run\")}>Run</button>\r\n                    <button className={this.state.currentActivity === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setActivity(\"cycle\")}>Cycle</button>\r\n\r\n                    {rows.length > 0 ?\r\n                        (<div>\r\n                            <StravaChart activity={this.state.currentActivity} rows={rows} unit={this.state.unit}/>\r\n\r\n                            <table className=\"myTableTwo\">\r\n                                <thead>\r\n                                <tr>{this.getHeader(this.state.tableHeadSecond)}</tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {rows.map(row => {\r\n                                    const unit = this.state.unit;\r\n                                    const singleUnit = unit === \"km\" ? \"km\" : \"mile\";\r\n                                    const speedUnit = unit === \"km\" ? \"k\" : \"m\";\r\n                                    return (\r\n                                        <tr>\r\n                                            <td>{row.date}</td>\r\n                                            <td>{row.activity}</td>\r\n                                            <td>{unit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\r\n                                            <td>{unit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {this.state.currentActivity === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\r\n                                            <td>{row.movingTime} min</td>\r\n                                            <td>{row.elevationGain} m</td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{this.state.user} is yet to {this.state.currentActivity} in {this.props.thisMonth}</h6>\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { allRows, competitionDistance, thisMonth } = this.props;\r\n        const date = new Date();\r\n        const monthIndex = date.getMonth() + 1;\r\n\r\n        return (\r\n            <div>\r\n                <h4>Jan - {thisMonth} Competition</h4>\r\n                <h6>Run {competitionDistance.run * monthIndex} km  &  Cycle {competitionDistance.cycle * monthIndex} km</h6>\r\n                <p style={{fontSize: \"11px\", padding: 0}}>({competitionDistance.run} km & {competitionDistance.cycle} km a month)</p>\r\n                <button className={this.state.unit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"km\")}>Km</button>\r\n                <button className={this.state.unit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => this.setUnit(\"miles\")}>Miles</button>\r\n\r\n                <table className=\"myTable\">\r\n                    <thead>\r\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {allRows.map((row, i) => {\r\n                            return this.getRowsData(row, i)\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n\r\n                {this.detailedRows(allRows)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MonthTable;\r\n","import React, {Component} from 'react';\r\nimport _ from 'lodash';\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\r\nimport StravaTable from \"../StravaTable/StravaTable\";\r\nimport MonthTable from \"../MonthTable/MonthTable\";\r\nimport './Home-style.css';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activities: [],\r\n            users: [],\r\n            alerted: false,\r\n            competition: false,\r\n            competitionDistance: {\r\n                run: 30,\r\n                cycle: 60,\r\n            },\r\n        };\r\n\r\n        this.competitionSetter = this.competitionSetter.bind(this);\r\n    }\r\n\r\n    competitionSetter() {\r\n        const oldStatus = this.state.competition;\r\n\r\n        this.setState({competition: !oldStatus});\r\n    }\r\n\r\n    async notifyPhone() {\r\n        const publicIp = require('public-ip');\r\n        const ipv4 = await publicIp.v4();\r\n\r\n        const url = 'https://raj.bariah.com:2010/location?ipAddress=' + ipv4 + \"&device=\" + navigator.platform + \"&site=Strava\";\r\n        if(!this.state.alerted) {\r\n            fetch(url, {\r\n                method: 'post'\r\n            });\r\n            this.setState({\r\n                ...this.state,\r\n                alerted: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    async fetchData(athleteID) {\r\n        const activitiesLink = \"https://raj.bariah.com:2010/strava/activity?athlete=\" + athleteID;\r\n        await fetch(activitiesLink)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                const activities = [...this.state.activities];\r\n                const newActivities = activities.concat(res);\r\n                this.setState({\r\n                    ...this.state,\r\n                    activities: newActivities\r\n                })\r\n            });\r\n    }\r\n\r\n    async reAuthFunc() {\r\n        await this.setUsers();\r\n\r\n        const users = this.state.users;\r\n\r\n        users.forEach(user => {\r\n           this.fetchData(user.athleteID);\r\n        });\r\n    }\r\n\r\n    async setUsers() {\r\n        const userLink = \"https://raj.bariah.com:2010/strava/users\";\r\n        await fetch(userLink)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                this.setState({\r\n                    ...this.state,\r\n                    users: res\r\n                })\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.reAuthFunc();\r\n    }\r\n\r\n    findAllSpecificActivity(activityType, athleteID, month) {\r\n        const activity = [...this.state.activities];\r\n\r\n        let all = activity.filter(function (element) {\r\n            return (element.type === activityType) && (element.athlete.id == athleteID);\r\n        });\r\n\r\n        const monthData = [];\r\n        if (month) {\r\n            const date = new Date();\r\n            all.forEach(a => {\r\n                const activityDate = new Date(a.start_date);\r\n                // if (date.getFullYear() === activityDate.getFullYear() && date.getMonth() === activityDate.getMonth()) {\r\n                if (date.getFullYear() === activityDate.getFullYear()) {\r\n                    monthData.push(a);\r\n                }\r\n            });\r\n        }\r\n\r\n        return month ? monthData : all;\r\n    }\r\n\r\n    getAllKm(accumulator, a) {\r\n        return Math.round(accumulator + a.distance);\r\n    }\r\n\r\n    createUserObj(athleteID, name, month) {\r\n        const mileConversion = 0.6214;\r\n        const userRun = this.findAllSpecificActivity(\"Run\", athleteID, month);\r\n        const userTotalRan = userRun.length > 0 ? (userRun.reduce(this.getAllKm,0) / 1000) : 0;\r\n        const userBike = this.findAllSpecificActivity(\"Ride\", athleteID, month);\r\n        const userTotalBike = userBike.length > 0 ? (userBike.reduce(this.getAllKm,0) / 1000) : 0;\r\n        const userObj = {\r\n            name: name,\r\n            runQuantity: userRun.length,\r\n            runDistance: userTotalRan,\r\n            runDistanceMile: (userTotalRan * mileConversion).toFixed(2),\r\n            bikeQuantity: userBike.length,\r\n            bikeDistance: userTotalBike,\r\n            bikeDistanceMile: (userTotalBike * mileConversion).toFixed(2),\r\n            allRuns: userRun.map((r, i) => {\r\n                const dist = r.distance / 1000;\r\n                const time = r.moving_time / 60;\r\n                const distance = (r.distance / 1000).toFixed(2)\r\n                const distanceMile = (dist * mileConversion).toFixed(2)\r\n                const movingTime = (r.moving_time / 60).toFixed(0);\r\n                const averageSpeed = dist / (time/60);\r\n                const oneKM = (1 / averageSpeed) * 60;\r\n                const floor = Math.floor(oneKM);\r\n                const decimal = (oneKM - floor) * 0.60;\r\n                const km = (floor + decimal).toFixed(2);\r\n                const averageSpeedMiles = (dist * mileConversion) / (time/60);\r\n                const oneMile = (1 / averageSpeedMiles) * 60;\r\n                const floorMile = Math.floor(oneMile);\r\n                const decimalMile = (oneMile - floorMile) * 0.60;\r\n                const mile = (floorMile + decimalMile).toFixed(2);\r\n                const day = r.start_date.substr(8,2);\r\n                const month = r.start_date.substr(5,2);\r\n                const year = r.start_date.substr(2, 2)\r\n                const date = day + \"/\" + month + \"/\" + year;\r\n                const elevationGain = r.total_elevation_gain;\r\n                return {date: date, activity: \"Run\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: km, averageSpeedMile: mile, elevationGain: elevationGain};\r\n            }),\r\n            allCycles: userBike.map((r, i) => {\r\n                const distance = (r.distance / 1000).toFixed(2)\r\n                const distanceMile = (distance * mileConversion).toFixed(2)\r\n                const movingTime = (r.moving_time / 60).toFixed(0);\r\n                const averageSpeed = (distance / (movingTime/60)).toFixed(1);\r\n                const averageSpeedMile = (averageSpeed * mileConversion).toFixed(1);\r\n                const day = r.start_date.substr(8,2);\r\n                const month = r.start_date.substr(5,2);\r\n                const year = r.start_date.substr(2, 2)\r\n                const date = day + \"/\" + month + \"/\" + year;\r\n                const elevationGain = r.total_elevation_gain;\r\n                return {date: date, activity: \"Cycle\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: averageSpeed, averageSpeedMile: averageSpeedMile, elevationGain: elevationGain};\r\n            }),\r\n        };\r\n\r\n        return userObj;\r\n    }\r\n\r\n    calculateTotalPercent(user) {\r\n        const date = new Date();\r\n        const monthIndex = date.getMonth() + 1;\r\n        const competitionRun = this.state.competitionDistance.run * monthIndex;\r\n        const competitionCycle = this.state.competitionDistance.cycle * monthIndex;\r\n        const runDistance = user.runDistance;\r\n        const cycleDistance = user.bikeDistance;\r\n\r\n        const runPercentageCapped = runDistance > competitionRun ? 100 : (runDistance / competitionRun) * 100;\r\n        const runPercentage = (runDistance / competitionRun) * 100;\r\n        const cyclePercentageCapped = cycleDistance > competitionCycle ? 100 : (cycleDistance / competitionCycle) * 100;\r\n        const cyclePercentage = (cycleDistance / competitionCycle) * 100;\r\n\r\n        const totalPercentage =  (runPercentageCapped + cyclePercentageCapped) / 2 === 100 ? (runPercentage + cyclePercentage) / 2 : (runPercentageCapped + cyclePercentageCapped) / 2;\r\n\r\n        const newUser = {\r\n            ...user,\r\n            totalPercentage: totalPercentage\r\n        };\r\n\r\n        return newUser;\r\n    }\r\n\r\n    render() {\r\n        const users = this.state.users;\r\n\r\n        this.notifyPhone();\r\n\r\n        const allRows = users.map(user => {\r\n           return this.createUserObj(user.athleteID, user.name, null);\r\n        });\r\n\r\n        const orderedRows = users.map(user => {\r\n            return this.createUserObj(user.athleteID, user.name, null);\r\n        });\r\n\r\n        const lastMonth = users.map (user => {\r\n            return this.createUserObj(user.athleteID, user.name, \"this month\");\r\n        });\r\n\r\n        const lastMonthPercentage = lastMonth.map(user => {\r\n            return this.calculateTotalPercent(user);\r\n        });\r\n\r\n        const orderedLastMonth = _.orderBy(lastMonthPercentage, ['totalPercentage'], ['desc']);\r\n\r\n        const date = new Date();\r\n        const month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\r\n        const thisMonth = month[date.getMonth()];\r\n\r\n        const userNames = [];\r\n        this.state.users.forEach(user => userNames.push(user.name));\r\n\r\n        return (\r\n            <div>\r\n                <Router basename={process.env.PUBLIC_URL}>\r\n                    <h2 className=\"myHeading\"><a className=\"rajbar-link\" href=\"https://raj.bar\">raj.Bar</a> <Link className=\"rajbar-link\" to={'/strava'}>/</Link> <Link className=\"rajbar-link\" to={'/strava-competition'}>strava</Link></h2>\r\n                    <Route path={'/'} render={() => (\r\n                        <StravaTable allRows={allRows} orderedRows={orderedRows} userNames={userNames} />\r\n                    )}/>\r\n\r\n                    <Route exact={true} path={'/strava-competition'} render={() => (\r\n                        <MonthTable allRows={orderedLastMonth} thisMonth={thisMonth} competitionDistance={this.state.competitionDistance}/>\r\n                    )} />\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, {Component} from 'react';\r\nimport './App.css'\r\nimport Home from '../components/Home/Home';\r\n\r\nclass App extends Component {\r\n  render () {\r\n    return (\r\n        <div className=\"App\">\r\n          <Home />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}