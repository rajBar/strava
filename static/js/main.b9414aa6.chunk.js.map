{"version":3,"sources":["components/StravaChart/StravaChart.jsx","store/selectors/users.js","utils/consts.js","store/selectors/activities.js","containers/StravaChart.js","components/StravaTable/StravaTable.jsx","store/actions/users.js","store/actionTypes/users.js","store/actions/activities.js","store/actionTypes/activities.js","containers/StravaTable.js","components/YearTable/YearTable.jsx","containers/YearTable.js","components/Home/Home.jsx","containers/Home.js","App.js","store/reducers/users.js","store/reducers/activities.js","store/reducers/index.js","store/sagas/activitiesSagas.js","store/sagas/usersSagas.js","store/sagas/index.js","serviceWorker.js","index.js","store/configureStore.js","store/initialState.js"],"names":["StravaChart","props","state","runSegments","cycleSegments","activity","unit","title","hAxis","vAxis","gridlines","units","hours","format","minutes","seconds","bubble","textStyle","fontSize","this","currentActivityType","activityUnit","chartData","chartDataCurrentYear","data","currentYear","options","parseOptions","className","chartType","width","height","Component","selectUserNames","users","map","user","name","selectCurrentUser","currentUser","COMPETITION_DISTANCE","DATE","Date","THIS_MONTH","getMonth","selectActivities","activities","selectCurrentActivityType","selectActivityUnit","selectUserActivity","createSelector","formattedActivities","_","find","userActivity","selectUserSpecificActivity","allRuns","allCycles","isThisYear","date","currentDate","activityDate","getFullYear","selectFormattedActivitiesForCurrentYear","activitiesCurrentYear","forEach","userActivities","cycles","filter","cycle","startDate","runs","run","runDistance","reduce","a","b","parseFloat","cycleDistance","newUser","toFixed","runDistanceMile","runQuantity","length","bikeDistance","bikeDistanceMile","bikeQuantity","push","selectFormattedActivitiesForCurrentYearWithPercentage","activitiesPercentage","monthIndex","competitionRun","competitionCycle","runPercentageCapped","cyclePercentageCapped","totalPercentage","calculateTotalPercent","orderBy","selectFormattedUserActivityForCurrentYear","selectFormattedUserSpecificActivityCurrentYear","getDate","dateSplit","split","day","parseInt","month","year","parseData","rows","header","sortBy","o","distance","row","averageSpeed","averageSpeedMile","distanceMile","unitRange","newDistance","segment","ceilingFive","Math","ceil","getSegK","ceilingThree","getThreeM","speed","speedSplit","toString","minute","second","formatSpeed","dataRow","selectChartData","currentUserActivity","currentUnit","currentActivity","selectChartDataCurrentYear","connect","dispatch","StravaTable","tableHead","tableHeadSecond","sort","field","direction","headers","sorter","onClick","setSort","currentSort","newDirection","setState","setCurrentUser","selectedUser","urlArr","window","location","href","userNames","includes","replace","i","setUser","key","to","setCurrentActivityType","userRows","getSortedCurrentUserRows","getHeader","singleUnit","speedUnit","movingTime","elevationGain","style","paddingTop","currentUserCurrentActivityData","Number","allRows","setActivityUnit","singleSetUser","getRowsData","detailedRows","fetchUsersSuccess","type","payload","fetchActivitiesSuccess","activityType","actions","YearTable","isMobile","cycleDistanceMile","percentage","formattedUserSpecificActivityForCurrentYear","padding","Home","alerted","publicIp","require","v4","ipv4","platform","mobileVendor","mobileModel","navigator","url","fetch","method","catch","e","console","log","fetchUsers","notifyPhone","basename","process","exact","path","render","App","initialState","error","action","fetchUsersFailure","fetchActivitiesFailure","rootReducer","combineReducers","fetchActivitiesSaga","getActivities","then","res","json","getAllKm","accumulator","round","findAllSpecificActivity","athleteID","element","athlete","id","createUserObj","userRun","userTotalRan","userBike","userTotalBike","r","dist","time","moving_time","oneKM","floor","decimal","km","oneMile","floorMile","decimalMile","mile","start_date","substr","total_elevation_gain","call","put","fetchUsersSaga","getUsers","usersWatcher","takeEvery","usersSagas","Boolean","hostname","match","store","sagaMiddleware","createSagaMiddleware","enhancer","compose","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","f","createStore","Object","keys","sagaWatchers","watcher","configureStore","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b9414aa6.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport Chart from \"react-google-charts\";\n\nclass StravaChart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            runSegments: 2.5,\n            cycleSegments: 5,\n        }\n    }\n\n    parseOptions(activity, unit) {\n        const unitType = unit === \"km\" ? \"k\" : \"m\";\n        const speed = activity === \"run\" ? \"min/\" + unit : unitType + \"ph\";\n        return {\n            title: \"Lifetime \" + activity + \"s\",\n            hAxis: {\n                title: \"date\"\n            },\n            vAxis: {\n                title: speed,\n                gridlines: {\n                    units: {\n                        hours: {format: ['']},\n                        minutes: {format: ['mm:ss']},\n                        seconds: {format: ['mm:ss']},\n                    }\n                }\n            },\n            bubble: { textStyle: { fontSize: 11 } }\n        }\n    }\n\n    render() {\n        const {currentActivityType, activityUnit, chartData, chartDataCurrentYear, currentYear} = this.props;\n        const data = currentYear ? chartDataCurrentYear : chartData;\n\n        const options = currentActivityType ? this.parseOptions(currentActivityType, activityUnit) : [];\n\n        return (\n            <div className=\"App\">\n                <Chart\n                    chartType=\"BubbleChart\"\n                    width=\"100%\"\n                    height=\"400px\"\n                    data={data}\n                    options={options}\n                />\n            </div>\n        );\n    }\n}\n\nexport default StravaChart;\n","export const selectUserNames = state => state.users.users.map(user => user.name);\n\nexport const selectUsers = state => state.users.users;\n\nexport const selectCurrentUser = state => state.users.currentUser;","export const COMPETITION_DISTANCE = {\n    run: 30,\n    cycle: 60,\n};\n\nexport const DATE = new Date();\n\nconst month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\nexport const THIS_MONTH = month[DATE.getMonth()];","import _ from \"lodash\";\nimport {createSelector} from 'reselect';\nimport {selectCurrentUser} from \"./users\";\nimport {COMPETITION_DISTANCE} from \"../../utils/consts\";\n\nexport const selectActivities = state => state.activities.activities;\n\nexport const selectCurrentActivityType = state => state.activities.currentActivityType;\n\nexport const selectActivityUnit = state => state.activities.activityUnit;\n\nexport const selectUserActivity = createSelector(\n    selectActivities,\n    selectCurrentUser,\n    (formattedActivities, currentUser) => _.find(formattedActivities, userActivity => userActivity.name === currentUser)\n);\n\nexport const selectUserSpecificActivity = createSelector(\n    selectUserActivity,\n    selectCurrentActivityType,\n    (userActivity, currentActivityType) => currentActivityType === \"run\" ? userActivity?.allRuns : userActivity?.allCycles\n);\n\nconst calculateTotalPercent = (user) => {\n    const date = new Date();\n    const monthIndex = date.getMonth() + 1;\n    const competitionRun = COMPETITION_DISTANCE.run * monthIndex;\n    const competitionCycle = COMPETITION_DISTANCE.cycle * monthIndex;\n    const runDistance = user.runDistance;\n    const cycleDistance = user.bikeDistance;\n\n    const runPercentageCapped = runDistance > competitionRun ? 100 : (runDistance / competitionRun) * 100;\n    const runPercentage = (runDistance / competitionRun) * 100;\n    const cyclePercentageCapped = cycleDistance > competitionCycle ? 100 : (cycleDistance / competitionCycle) * 100;\n    const cyclePercentage = (cycleDistance / competitionCycle) * 100;\n\n    const totalPercentage =  (runPercentageCapped + cyclePercentageCapped) / 2 === 100 ? (runPercentage + cyclePercentage) / 2 : (runPercentageCapped + cyclePercentageCapped) / 2;\n\n    return {\n        ...user,\n        totalPercentage: totalPercentage\n    };\n};\n\nconst isThisYear = (date) => {\n    const currentDate = new Date();\n    const activityDate = new Date(date);\n\n    return currentDate.getFullYear() === activityDate.getFullYear();\n}\n\nexport const selectFormattedActivitiesForCurrentYear = createSelector(\n    selectActivities,\n    activities => {\n        const mileConversion = 0.6214;\n        const activitiesCurrentYear = [];\n        activities.forEach(userActivities => {\n            const cycles = _.filter(userActivities.allCycles, cycle => { return isThisYear(cycle.startDate) })\n            const runs = _.filter(userActivities.allRuns, run => { return isThisYear(run.startDate) });\n            const runDistance = runs.reduce((a, b) => a + (parseFloat(b['distance']) || 0), 0);\n            const cycleDistance = cycles.reduce((a, b) => a + (parseFloat(b['distance']) || 0), 0);\n            const newUser = {\n                ...userActivities,\n                allRuns: runs,\n                runDistance: runDistance.toFixed(2),\n                runDistanceMile: (runDistance * mileConversion).toFixed(2),\n                runQuantity: runs.length,\n                allCycles: cycles,\n                bikeDistance: cycleDistance.toFixed(2),\n                bikeDistanceMile: (cycleDistance * mileConversion).toFixed(2),\n                bikeQuantity: cycles.length\n            }\n            activitiesCurrentYear.push(newUser);\n        });\n\n        return activitiesCurrentYear;\n    }\n);\n\nexport const selectFormattedActivitiesForCurrentYearWithPercentage = createSelector(\n    selectFormattedActivitiesForCurrentYear,\n    activities => {\n        const activitiesPercentage = activities.map(user => {\n            return calculateTotalPercent(user);\n        })\n\n        return _.orderBy(activitiesPercentage, ['totalPercentage'], ['desc']);\n    }\n);\n\nexport const selectFormattedUserActivityForCurrentYear = createSelector(\n    selectFormattedActivitiesForCurrentYearWithPercentage,\n    selectCurrentUser,\n    (formattedActivities, currentUser) => _.find(formattedActivities, userActivity => userActivity.name === currentUser)\n);\n\nexport const selectFormattedUserSpecificActivityCurrentYear = createSelector(\n    selectFormattedUserActivityForCurrentYear,\n    selectCurrentActivityType,\n    (userActivity, currentActivityType) => currentActivityType === \"run\" ? userActivity?.allRuns : userActivity?.allCycles\n);\n\nconst formatSpeed = (speed) => {\n    const speedSplit = speed.toString().split(\".\");\n    const minute = parseInt(speedSplit[0]);\n    const second = parseInt(speedSplit[1]);\n\n    return new Date(2000, 0, 1, 1, minute, second, 0);\n}\n\nconst getDate = (date) => {\n    const dateSplit = date.split(\"/\");\n    const day = parseInt(dateSplit[0]);\n    const month = parseInt(dateSplit[1]) - 1;\n    const year = parseInt(dateSplit[2]) + 2000;\n\n    return new Date(year, month, day);\n}\n\nconst getSegK = (distance, activity) => {\n    const newDistance = parseFloat(distance);\n\n    const segment = activity === \"run\" ? 2.5 : 5;\n\n    const ceilingFive = Math.ceil(newDistance / segment) * segment;\n    const floorFive = ceilingFive - segment;\n\n    return floorFive + \"k - \" + ceilingFive + \"k\";\n}\n\nconst getThreeM = (distance) => {\n    const newDistance = parseFloat(distance);\n\n    const ceilingThree = Math.ceil(newDistance / 3) * 3;\n    const floorThree = ceilingThree - 3;\n\n    return floorThree + \"m - \" + ceilingThree + \"m\";\n}\n\nconst parseData = (rows, activity, unit) => {\n    const data = [];\n    const whatSpeed = activity === \"run\" ? \"N/A\" : \"Speed (km/h)\";\n    const segment = activity === \"run\" ? \"2.5k\" : \"5k\";\n    const unitRange = unit === \"km\" ? segment : \"3m\";\n    const header = [\"ID\", \"Date\", whatSpeed, unitRange, \"Distance\"];\n    data.push(header);\n\n    const orderedRows = _.sortBy(rows, o => parseFloat(o.distance));\n\n    orderedRows.forEach((row) => {\n        const averageSpeed = unit === \"km\" ? row.averageSpeed : row.averageSpeedMile;\n        const distance = unit === \"km\" ? row.distance : row.distanceMile;\n        const unitRange = unit === \"km\" ? getSegK(distance, activity) : getThreeM(distance);\n        let speed = parseFloat(averageSpeed);\n        if (activity === \"run\") {\n            speed = formatSpeed(averageSpeed);\n        }\n        const dataRow =[averageSpeed, getDate(row.date), speed, unitRange, parseFloat(distance)];\n        data.push(dataRow);\n    });\n\n    return data;\n}\n\nexport const selectChartData = createSelector(\n    selectUserSpecificActivity,\n    selectActivityUnit,\n    selectCurrentActivityType,\n    (currentUserActivity, currentUnit, currentActivity) => parseData(currentUserActivity, currentActivity, currentUnit)\n);\n\nexport const selectChartDataCurrentYear = createSelector(\n    selectFormattedUserSpecificActivityCurrentYear,\n    selectActivityUnit,\n    selectCurrentActivityType,\n    (currentUserActivity, currentUnit, currentActivity) => parseData(currentUserActivity, currentActivity, currentUnit)\n);\n","import { connect } from 'react-redux';\nimport StravaChart from \"../components/StravaChart/StravaChart\";\nimport {\n    selectActivityUnit,\n    selectChartData,\n    selectChartDataCurrentYear,\n    selectCurrentActivityType\n} from \"../store/selectors/activities\";\n\nconst mapStateToProps = state => ({\n    currentActivityType: selectCurrentActivityType(state),\n    activityUnit: selectActivityUnit(state),\n    chartData: selectChartData(state),\n    chartDataCurrentYear: selectChartDataCurrentYear(state),\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StravaChart);","import React, {Component} from 'react';\nimport './StravaTable-style.css';\nimport StravaChart from \"../../containers/StravaChart\";\nimport _ from 'lodash';\nimport {Link} from \"react-router-dom\";\n\nclass StravaTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tableHead: [\n                'Name',\n                'No. Runs',\n                'Run Distance',\n                'No. Cycles',\n                'Cycle Distance',\n            ],\n            tableHeadSecond: [\n                'Date',\n                'Activity',\n                'Distance',\n                'Average Speed',\n                'Activity Time',\n                'Elevation Gain',\n            ],\n            sort: {\n                field: \"date\",\n                direction: true\n            },\n        };\n    }\n\n    getHeader(headers, sorter) {\n        return headers.map((header) => {\n            if (sorter) {\n                return <th className=\"myTableHeaders\" onClick={() => this.setSort(header)}>{header}</th>\n            } else {\n                return <th className=\"myTableHeaders\">{header}</th>\n            }\n        })\n    }\n\n    setSort(field) {\n        const currentSort = this.state.sort;\n        const newDirection = field === currentSort.field ? !currentSort.direction : true;\n\n        this.setState({\n            ...this.state,\n            sort: {\n                field: field,\n                direction: newDirection\n            }\n        });\n    }\n\n    singleSetUser(user) {\n        const { currentUser, setCurrentUser } = this.props;\n\n        if (user !== currentUser) {\n            setCurrentUser(user);\n        }\n    }\n\n    setUser(selectedUser) {\n        const { currentUser, setCurrentUser } = this.props;\n        const currentURL = window.location.href;\n        const urlArr = currentURL.split('/');\n        const name = urlArr[urlArr.length - 1];\n        const userNames = this.props.userNames;\n        if (userNames.includes(name) && (name !== selectedUser)) {\n            window.location = window.location.href.replace(name, '');\n        }\n\n        const athlete = currentUser === selectedUser ? \"\" : selectedUser;\n\n        setCurrentUser(athlete);\n    }\n\n    getRowsData(row, i) {\n        const { currentUser, activityUnit } = this.props;\n        const name = row.name;\n\n        return (\n            <tr className={currentUser === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\n                <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/home/${name}`}>{name}</Link></td>\n                <td key={i} className=\"myTableContents\">{row.runQuantity}</td>\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? row.runDistance + \"km\" : row.runDistanceMile + \"miles\"}</td>\n                <td key={i} className=\"myTableContents\">{row.bikeQuantity}</td>\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? row.bikeDistance + \"km\" : row.bikeDistanceMile + \"miles\"}</td>\n            </tr>\n        )\n    }\n\n    detailedRows() {\n        const { currentUser, currentActivityType, setCurrentActivityType, activityUnit, userNames } = this.props;\n\n        const userRows = this.getSortedCurrentUserRows();\n\n        if (!userNames.includes(currentUser)) {\n            return <br />;\n        } else {\n            return (\n                <div>\n                    <button className={currentActivityType === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"run\")}>Run</button>\n                    <button className={currentActivityType === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"cycle\")}>Cycle</button>\n\n\n                    {userRows.length > 0 ?\n                        (<div>\n                            <StravaChart />\n\n                            <table className=\"myTableTwo\">\n                                <thead>\n                                    <tr>{this.getHeader(this.state.tableHeadSecond, \"sorting function\")}</tr>\n                                </thead>\n                                <tbody>\n                                    {userRows.map(row => {\n                                        const singleUnit = activityUnit === \"km\" ? \"km\" : \"mile\";\n                                        const speedUnit = activityUnit === \"km\" ? \"k\" : \"m\";\n                                        return (\n                                            <tr>\n                                                <td>{row.date}</td>\n                                                <td>{row.activity}</td>\n                                                <td>{activityUnit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\n                                                <td>{activityUnit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {currentActivityType === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\n                                                <td>{row.movingTime} min</td>\n                                                <td>{row.elevationGain} m</td>\n                                            </tr>\n                                        )\n                                    })}\n                                </tbody>\n                            </table>\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{currentUser} is yet to {currentActivityType}</h6>\n                    }\n                </div>\n            );\n        }\n    };\n\n    getSortedCurrentUserRows() {\n        const { currentUserCurrentActivityData } = this.props\n        let userActivity = currentUserCurrentActivityData ? [...currentUserCurrentActivityData] : [];\n        const { sort } = this.state;\n\n\n        if (sort.field === \"Date\") {\n            userActivity = [...currentUserCurrentActivityData];\n        } else if (sort.field === \"Distance\") {\n            if (sort.direction) {\n                userActivity = _.orderBy(userActivity, function (o) { return Number(o.distance); }, 'asc');\n            } else {\n                userActivity = _.orderBy(userActivity, function (o) { return Number(o.distance); }, 'desc');\n            }\n        } else if (sort.field === \"Average Speed\") {\n            if (sort.direction) {\n                userActivity = _.orderBy(userActivity, o => { return Number(o.averageSpeed) }, 'asc');\n            } else {\n                userActivity = _.orderBy(userActivity, o => { return Number(o.averageSpeed) }, 'desc');\n            }\n        } else if (sort.field === \"Activity Time\") {\n            if (sort.direction) {\n                userActivity = _.orderBy(userActivity, 'movingTime', 'asc');\n            } else {\n                userActivity = _.orderBy(userActivity, 'movingTime', 'desc');\n            }\n        } else if (sort.field === \"Elevation Gain\") {\n            if (sort.direction) {\n                userActivity = _.orderBy(userActivity, 'elevationGain', 'asc');\n            } else {\n                userActivity = _.orderBy(userActivity, 'elevationGain', 'desc');\n            }\n        }\n\n        return userActivity;\n    }\n\n    render() {\n        const { allRows, activityUnit, setActivityUnit } = this.props;\n\n        const currentURL = window.location.href;\n        const urlArr = currentURL.split('/');\n        const name = urlArr[urlArr.length - 1];\n        const userNames = this.props.userNames;\n        if (userNames.includes(name)) {\n            this.singleSetUser(name);\n        }\n\n        return (\n            <div>\n                <button className={activityUnit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"km\")}>Km</button>\n                <button className={activityUnit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"miles\")}>Miles</button>\n\n                <table className=\"myTable\">\n                    <thead>\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\n                    </thead>\n                    <tbody>\n                        {allRows.map((row, i) => {\n                            return this.getRowsData(row, i)\n                        })}\n                    </tbody>\n                </table>\n\n                {this.detailedRows()}\n            </div>\n        )\n    }\n}\n\nexport default StravaTable;\n","import * as actionTypes from '../actionTypes/users';\n\nexport const fetchUsers = () => ({\n    type: actionTypes.FETCH_USERS,\n});\n\nexport const fetchUsersSuccess = users => ({\n    type: actionTypes.FETCH_USERS_SUCCESS,\n    payload: { users },\n});\n\nexport const fetchUsersFailure = error => ({\n    type: actionTypes.FETCH_USERS_FAILURE,\n    payload: { error },\n});\n\nexport const setCurrentUser = user => ({\n        type: actionTypes.SET_CURRENT_USER,\n        payload: { user },\n});","export const FETCH_USERS = 'FETCH_USERS';\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS';\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE';\n\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';","import * as actionTypes from \"../actionTypes/activities\";\n\nexport const fetchActivitiesSuccess = activities => ({\n    type: actionTypes.FETCH_ACTIVITIES_SUCCESS,\n    payload: { activities },\n});\n\nexport const fetchActivitiesFailure = error => ({\n    type: actionTypes.FETCH_ACTIVITIES_FAILURE,\n    payload: { error },\n});\n\nexport const setCurrentActivityType = activityType => ({\n    type: actionTypes.SET_CURRENT_ACTIVITY_TYPE,\n    payload: { activityType },\n});\n\nexport const setActivityUnit = activityUnit => ({\n    type: actionTypes.SET_ACTIVITY_UNIT,\n    payload: { activityUnit },\n})","export const FETCH_ACTIVITIES_SUCCESS = 'FETCH_ACTIVITIES_SUCCESS';\nexport const FETCH_ACTIVITIES_FAILURE = 'FETCH_ACTIVITIES_FAILURE';\n\nexport const SET_CURRENT_ACTIVITY_TYPE = 'SET_CURRENT_ACTIVITY_TYPE';\nexport const SET_ACTIVITY_UNIT = 'SET_ACTIVITY_UNIT';","import { connect } from 'react-redux';\nimport StravaTable from \"../components/StravaTable/StravaTable\";\nimport {selectCurrentUser, selectUserNames} from \"../store/selectors/users\";\nimport {\n    selectActivityUnit,\n    selectCurrentActivityType,\n    selectActivities,\n    selectUserSpecificActivity\n} from \"../store/selectors/activities\";\nimport * as actions from '../store/actions';\n\nconst mapStateToProps = state => ({\n    allRows: selectActivities(state),\n    currentUserCurrentActivityData: selectUserSpecificActivity(state),\n    userNames: selectUserNames(state),\n    currentUser: selectCurrentUser(state),\n    currentActivityType: selectCurrentActivityType(state),\n    activityUnit: selectActivityUnit(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setCurrentUser: user => dispatch(actions.setCurrentUser(user)),\n    setCurrentActivityType: activityType => dispatch(actions.setCurrentActivityType(activityType)),\n    setActivityUnit: activityUnit => dispatch(actions.setActivityUnit(activityUnit)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StravaTable);","import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\nimport {isMobile} from 'react-device-detect';\nimport './YearTable-style.css';\nimport StravaChart from \"../../containers/StravaChart\";\nimport {COMPETITION_DISTANCE, DATE, THIS_MONTH} from \"../../utils/consts\";\n\nclass YearTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tableHead: [\n                'Name',\n                'No. Runs',\n                'Run Distance',\n                'No. Cycles',\n                'Cycle Distance',\n                'Total Complete',\n            ],\n            tableHeadSecond: [\n                'Date',\n                'Activity',\n                'Distance',\n                'Average Speed',\n                'Activity Time',\n                'Elevation Gain',\n            ],\n        };\n    }\n\n    getHeader(headers) {\n        return headers.map((header) => {\n            return <th className={isMobile ? \"myTableHeadersMobile\" : \"myTableHeaders\"}>{header}</th>\n        });\n    }\n\n    singleSetUser(user) {\n        const { currentUser, setCurrentUser } = this.props;\n\n        if (user !== currentUser) {\n            setCurrentUser(user);\n        }\n    }\n\n    setUser(selectedUser) {\n        const { currentUser, setCurrentUser } = this.props;\n        const currentURL = window.location.href;\n        const urlArr = currentURL.split('/');\n        const name = urlArr[urlArr.length - 1];\n        const userNames = this.props.userNames;\n        if (userNames.includes(name) && (name !== selectedUser)) {\n            window.location = window.location.href.replace(name, '');\n        }\n\n        const athlete = currentUser === selectedUser ? \"\" : selectedUser;\n\n        setCurrentUser(athlete);\n    }\n\n    getRowsData(row, i) {\n        const { currentUser, activityUnit } = this.props;\n        const name = row.name;\n        const runDistance = isMobile ? parseFloat(row.runDistance).toFixed(1) : row.runDistance;\n        const runDistanceMile = isMobile ? parseFloat(row.runDistanceMile).toFixed(1) : row.runDistanceMile;\n        const cycleDistance = isMobile ? parseFloat(row.bikeDistance).toFixed(1) : row.bikeDistance;\n        const cycleDistanceMile = isMobile ? parseFloat(row.bikeDistanceMile).toFixed(1) : row.bikeDistanceMile;\n        const percentage = row.totalPercentage;\n\n        return (\n            <tr className={currentUser === name ? \"selectedRow\" : \"selectableRow\"} onClick={() => this.setUser(name)}>\n                {percentage >= 100 ?\n                    <td key={i} className=\"myTableContents-complete\">{name} (completed)</td>\n                    : <td key={i} className=\"myTableContents\"><Link className=\"hidden-link\" to={`/strava-competition/${name}`}>{name}</Link></td>\n                }\n                <td key={i} className=\"myTableContents\">{row.runQuantity}</td>\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? runDistance + \"km\" : runDistanceMile + \"miles\"}</td>\n                <td key={i} className=\"myTableContents\">{row.bikeQuantity}</td>\n                <td key={i} className=\"myTableContents\">{activityUnit === \"km\" ? cycleDistance + \"km\" : cycleDistanceMile + \"miles\"}</td>\n                <td key={i} className=\"myTableContents\">{percentage.toFixed(2)}%</td>\n            </tr>\n        )\n    }\n\n    detailedRows() {\n        const { currentUser, currentActivityType, setCurrentActivityType, activityUnit, formattedUserSpecificActivityForCurrentYear } = this.props;\n\n        if (currentUser === \"\") {\n            return <br />;\n        } else {\n            return (\n                <div>\n                    <button className={currentActivityType === \"run\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"run\")}>Run</button>\n                    <button className={currentActivityType === \"cycle\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setCurrentActivityType(\"cycle\")}>Cycle</button>\n\n                    {formattedUserSpecificActivityForCurrentYear.length > 0 ?\n                        (<div>\n                            <StravaChart currentYear={true} />\n\n                            <table className=\"myTableTwo\">\n                                <thead>\n                                <tr>{this.getHeader(this.state.tableHeadSecond)}</tr>\n                                </thead>\n                                <tbody>\n                                {formattedUserSpecificActivityForCurrentYear.map(row => {\n                                    const singleUnit = activityUnit === \"km\" ? \"km\" : \"mile\";\n                                    const speedUnit = activityUnit === \"km\" ? \"k\" : \"m\";\n                                    return (\n                                        <tr>\n                                            <td>{row.date}</td>\n                                            <td>{row.activity}</td>\n                                            <td>{activityUnit === \"km\" ? row.distance + \" km\" : row.distanceMile + \" miles\"}</td>\n                                            <td>{activityUnit === \"km\" ? row.averageSpeed : row.averageSpeedMile} {currentActivityType === \"run\" ? \"min/\" + singleUnit : speedUnit + \"ph\"}</td>\n                                            <td>{row.movingTime} min</td>\n                                            <td>{row.elevationGain} m</td>\n                                        </tr>\n                                    )\n                                })}\n                                </tbody>\n                            </table>\n                        </div>) : <h6 style={{paddingTop: '20px'}}>{currentUser} is yet to {currentActivityType} this year</h6>\n                    }\n                </div>\n            );\n        }\n    }\n\n    render() {\n        let { allRows, activityUnit, setActivityUnit } = this.props;\n        const monthIndex = DATE.getMonth() + 1;\n\n        const currentURL = window.location.href;\n        const urlArr = currentURL.split('/');\n        const name = urlArr[urlArr.length - 1];\n        const userNames = this.props.userNames;\n        if (userNames.includes(name)) {\n            this.singleSetUser(name);\n        }\n\n        return (\n            <div>\n                <h4>Jan - {THIS_MONTH} Competition</h4>\n                <h6>Run {COMPETITION_DISTANCE.run * monthIndex} km  &  Cycle {COMPETITION_DISTANCE.cycle * monthIndex} km</h6>\n                <p style={{fontSize: \"11px\", padding: 0}}>({COMPETITION_DISTANCE.run} km & {COMPETITION_DISTANCE.cycle} km a month)</p>\n                <button className={activityUnit === \"km\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"km\")}>Km</button>\n                <button className={activityUnit === \"miles\" ? \"selectedButton\" : \"nonSelectedButton\"} onClick={() => setActivityUnit(\"miles\")}>Miles</button>\n\n                <table className=\"myTable\">\n                    <thead>\n                        <tr>{this.getHeader(this.state.tableHead)}</tr>\n                    </thead>\n                    <tbody>\n                        {allRows.map((row, i) => {\n                            return this.getRowsData(row, i)\n                        })}\n                    </tbody>\n                </table>\n\n                {this.detailedRows()}\n            </div>\n        )\n    }\n}\n\nexport default YearTable;\n","import { connect } from 'react-redux';\nimport YearTable from \"../components/YearTable/YearTable\";\nimport {selectCurrentUser, selectUserNames} from \"../store/selectors/users\";\nimport {\n    selectActivityUnit,\n    selectCurrentActivityType,\n    selectFormattedActivitiesForCurrentYearWithPercentage,\n    selectFormattedUserSpecificActivityCurrentYear,\n} from \"../store/selectors/activities\";\nimport * as actions from \"../store/actions\";\n\nconst mapStateToProps = state => ({\n    allRows: selectFormattedActivitiesForCurrentYearWithPercentage(state),\n    formattedUserSpecificActivityForCurrentYear: selectFormattedUserSpecificActivityCurrentYear(state),\n    userNames: selectUserNames(state),\n    currentUser: selectCurrentUser(state),\n    currentActivityType: selectCurrentActivityType(state),\n    activityUnit: selectActivityUnit(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setCurrentUser: user => dispatch(actions.setCurrentUser(user)),\n    setCurrentActivityType: activityType => dispatch(actions.setCurrentActivityType(activityType)),\n    setActivityUnit: activityUnit => dispatch(actions.setActivityUnit(activityUnit)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(YearTable);","import React, {Component} from 'react';\nimport { HashRouter as Router, Link, Route, Redirect } from \"react-router-dom\";\nimport {isMobile, mobileVendor, mobileModel} from 'react-device-detect';\nimport StravaTable from \"../../containers/StravaTable\";\nimport YearTable from \"../../containers/YearTable\";\nimport './Home-style.css';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            alerted: false,\n        };\n    }\n\n    async notifyPhone() {\n        const publicIp = require('public-ip');\n        const ipv4 = await publicIp.v4();\n        const platform = isMobile ? `${mobileVendor} ${mobileModel}` : navigator.platform;\n\n        // const url = 'https://raj.bariah.com:2010/location?ipAddress=' + ipv4 + \"&device=\" + platform + \"&site=Strava\";\n        const url = 'https://maker.ifttt.com/trigger/site_visited/with/key/b_Yu8_AU_JIDYDYR_WXF5-?value1=' + ipv4 + \"&value2=\" + platform + \"&value3=Strava\";\n        if(!this.state.alerted) {\n            fetch(url, {\n                method: 'post'\n            }).catch(e => console.log(e));\n            this.setState({\n                ...this.state,\n                alerted: true,\n            });\n        }\n    }\n\n    componentDidMount() {\n        const { fetchUsers } = this.props;\n        fetchUsers();\n    }\n\n    render() {\n        this.notifyPhone();\n\n        return (\n            <div>\n                <Router basename={process.env.PUBLIC_URL}>\n                    <h2 className=\"myHeading\"><a className=\"rajbar-link\" href=\"https://raj.bar\">raj.Bar</a> <Link className=\"rajbar-link\" to={'/home'}>/</Link> <Link className=\"rajbar-link\" to={'/strava-competition'}>strava</Link></h2>\n                    <Route exact path={\"/\"}>\n                        <Redirect to={\"/home\"} />\n                    </Route>\n                    <Route path={'/home'} render={() => (\n                        <StravaTable />\n                    )}/>\n\n                    <Route path={'/strava-competition'} render={() => (\n                        <YearTable />\n                    )} />\n                </Router>\n            </div>\n        )\n    }\n}\n\nexport default Home;\n","import { connect } from 'react-redux';\nimport Home from '../components/Home/Home';\nimport * as actions from \"../store/actions\";\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchUsers: () => dispatch(actions.fetchUsers()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, {Component} from 'react';\nimport './App.css'\nimport Home from './containers/Home';\n\nclass App extends Component {\n  render () {\n    return (\n        <div className=\"App\">\n          <Home />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","import * as actionTypes from '../actionTypes/users';\n\nconst initialState = {\n    users: [],\n    currentUser: \"\",\n    error: null,\n};\n\nconst fetchUsersSuccess = (state, action) => ({\n    ...state,\n    users: action.payload.users,\n});\n\nconst fetchUsersFailure = (state, action) => ({\n    ...state,\n    error: action.payload.error,\n});\n\nconst setCurrentUser = (state, action) => ({\n    ...state,\n    currentUser: action.payload.user,\n});\n\n\nexport default (state = initialState, action) => {\n    switch(action.type) {\n        case actionTypes.FETCH_USERS_SUCCESS:\n            return fetchUsersSuccess(state, action);\n        case actionTypes.FETCH_USERS_FAILURE:\n            return fetchUsersFailure(state, action);\n        case actionTypes.SET_CURRENT_USER:\n            return setCurrentUser(state, action);\n        default:\n            return state;\n    }\n};","import * as actionTypes from '../actionTypes/activities';\n\nconst initialState = {\n    activities: [],\n    currentActivityType: 'run',\n    activityUnit: 'km',\n    error: null,\n};\n\nconst fetchActivitiesSuccess = (state, action) => ({\n    ...state,\n    activities: action.payload.activities,\n});\n\nconst fetchActivitiesFailure = (state, action) => ({\n    ...state,\n    error: action.payload.error,\n});\n\nconst setCurrentActivityType = (state, action) => ({\n    ...state,\n    currentActivityType: action.payload.activityType,\n});\n\nconst setActivityUnit = (state, action) => ({\n    ...state,\n    activityUnit: action.payload.activityUnit,\n})\n\nexport default (state = initialState, action) => {\n    switch(action.type) {\n        case actionTypes.FETCH_ACTIVITIES_SUCCESS:\n            return fetchActivitiesSuccess(state, action);\n        case actionTypes.FETCH_ACTIVITIES_FAILURE:\n            return fetchActivitiesFailure(state, action);\n        case actionTypes.SET_CURRENT_ACTIVITY_TYPE:\n            return setCurrentActivityType(state, action);\n        case actionTypes.SET_ACTIVITY_UNIT:\n            return setActivityUnit(state, action);\n        default:\n            return state;\n    }\n};","import { combineReducers } from \"redux\";\nimport users from \"./users\";\nimport activities from \"./activities\";\n\nexport const rootReducer = combineReducers({\n    users,\n    activities,\n})\n","import {call, put} from 'redux-saga/effects';\nimport * as actions from '../actions';\n\nconst getActivities = async () => {\n    // const activitiesLink = \"https://raj.bariah.com:2010/strava/activities\";\n    // const activitiesLink = \"https://rajbar.hopto.org:2010/strava/activities\";\n    // const activitiesLink = \"https://api.rajbar.duckdns.org/strava/activities\";\n    const activitiesLink = \"https://api.rajbariah.com/strava/activities\";\n\n    return await fetch(activitiesLink)\n        .then(res => res.json());\n}\n\nconst getAllKm = (accumulator, a) => {\n    return Math.round(accumulator + a.distance);\n}\n\nconst findAllSpecificActivity = (activityType, athleteID, activities) => {\n    const activity = [...activities];\n\n    return activity.filter(function (element) {\n        return (element.type === activityType) && (element.athlete.id.toString() === athleteID);\n    });\n}\n\nconst createUserObj = (athleteID, name, activities) => {\n    const mileConversion = 0.6214;\n    const userRun = findAllSpecificActivity(\"Run\", athleteID, activities);\n    const userTotalRan = userRun.length > 0 ? (userRun.reduce(getAllKm,0) / 1000) : 0;\n    const userBike = findAllSpecificActivity(\"Ride\", athleteID, activities);\n    const userTotalBike = userBike.length > 0 ? (userBike.reduce(getAllKm,0) / 1000) : 0;\n    const userObj = {\n        name: name,\n        runQuantity: userRun.length,\n        runDistance: userTotalRan,\n        runDistanceMile: (userTotalRan * mileConversion).toFixed(2),\n        bikeQuantity: userBike.length,\n        bikeDistance: userTotalBike,\n        bikeDistanceMile: (userTotalBike * mileConversion).toFixed(2),\n        allRuns: userRun.map((r, i) => {\n            const dist = r.distance / 1000;\n            const time = r.moving_time / 60;\n            const distance = (r.distance / 1000).toFixed(2)\n            const distanceMile = (dist * mileConversion).toFixed(2)\n            const movingTime = (r.moving_time / 60).toFixed(0);\n            const averageSpeed = dist / (time/60);\n            const oneKM = (1 / averageSpeed) * 60;\n            let floor = Math.floor(oneKM);\n            let decimal = (oneKM - floor) * 0.60;\n            if (decimal.toFixed(2) === \"0.60\") {\n                floor += 1;\n                decimal = 0;\n            }\n            const km = (floor + decimal).toFixed(2);\n            const averageSpeedMiles = (dist * mileConversion) / (time/60);\n            const oneMile = (1 / averageSpeedMiles) * 60;\n            let floorMile = Math.floor(oneMile);\n            let decimalMile = (oneMile - floorMile) * 0.60;\n            if (decimal.toFixed(2) === \"0.60\") {\n                floorMile += 1;\n                decimalMile = 0;\n            }\n            const mile = (floorMile + decimalMile).toFixed(2);\n            const day = r.start_date.substr(8,2);\n            const month = r.start_date.substr(5,2);\n            const year = r.start_date.substr(2, 2)\n            const date = day + \"/\" + month + \"/\" + year;\n            const elevationGain = r.total_elevation_gain;\n            return {date: date, startDate: r.start_date, activity: \"Run\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: km, averageSpeedMile: mile, elevationGain: elevationGain};\n        }),\n        allCycles: userBike.map((r, i) => {\n            const distance = (r.distance / 1000).toFixed(2)\n            const distanceMile = (distance * mileConversion).toFixed(2)\n            const movingTime = (r.moving_time / 60).toFixed(0);\n            const averageSpeed = (distance / (movingTime/60)).toFixed(1);\n            const averageSpeedMile = (averageSpeed * mileConversion).toFixed(1);\n            const day = r.start_date.substr(8,2);\n            const month = r.start_date.substr(5,2);\n            const year = r.start_date.substr(2, 2)\n            const date = day + \"/\" + month + \"/\" + year;\n            const elevationGain = r.total_elevation_gain;\n            return {date: date, startDate: r.start_date, activity: \"Cycle\", distance: distance, distanceMile: distanceMile, movingTime: movingTime, averageSpeed: averageSpeed, averageSpeedMile: averageSpeedMile, elevationGain: elevationGain};\n        }),\n    };\n\n    return userObj;\n};\n\nexport function* fetchActivitiesSaga(users) {\n    try {\n        const activities = yield call(getActivities);\n\n        const formattedActivities = users.map(user => {\n            return createUserObj(user.athleteID, user.name, activities)\n        });\n\n        yield put(actions.fetchActivitiesSuccess(formattedActivities));\n    } catch (error) {\n        yield put(actions.fetchActivitiesFailure(error));\n    }\n}\n","import {call, put} from 'redux-saga/effects';\nimport * as actions from '../actions';\nimport {fetchActivitiesSaga} from \"./activitiesSagas\";\n\nconst getUsers = async () => {\n    // const userLink = \"https://raj.bariah.com:2010/strava/users\";\n    // const userLink = \"https://rajbar.hopto.org:2010/strava/users\";\n    // const userLink = \"https://api.rajbar.duckdns.org/strava/users\";\n    const userLink = \"https://api.rajbariah.com/strava/users\";\n    return await fetch(userLink)\n        .then(res => res.json());\n}\n\nexport function* fetchUsersSaga() {\n    try {\n        const users = yield call(getUsers)\n        yield put(actions.fetchUsersSuccess(users));\n        yield call(fetchActivitiesSaga, users);\n    } catch (error) {\n        yield put(actions.fetchUsersFailure(error));\n    }\n}\n","import { takeEvery } from 'redux-saga/effects';\nimport * as actionTypes from '../actionTypes';\nimport * as usersSagas from './usersSagas';\n\nexport function* usersWatcher() {\n    yield takeEvery(actionTypes.FETCH_USERS, usersSagas.fetchUsersSaga);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { configureStore } from './store/configureStore';\nimport { Provider } from 'react-redux';\nimport { initialState } from './store/initialState';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore(initialState);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from 'redux-saga';\nimport { rootReducer } from \"./reducers\";\nimport * as sagaWatchers from './sagas';\n\nexport function configureStore(initialState) {\n    const sagaMiddleware = createSagaMiddleware();\n\n    const enhancer = compose(\n        applyMiddleware(sagaMiddleware),\n        window.__REDUX_DEVTOOLS_EXTENSION__\n            ? window.__REDUX_DEVTOOLS_EXTENSION__({ name: 'strava-stats' })\n            : f => f,\n    )\n\n    const store = createStore(rootReducer, initialState, enhancer)\n\n    Object.keys(sagaWatchers).forEach(watcher => {\n        sagaMiddleware.run(sagaWatchers[watcher])\n    })\n\n    return store;\n}\n","export const initialState = {};\n"],"sourceRoot":""}